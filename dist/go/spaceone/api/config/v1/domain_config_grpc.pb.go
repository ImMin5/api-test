// DomainConfig API which configure environments for domain

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: spaceone/api/config/v1/domain_config.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DomainConfig_Create_FullMethodName = "/spaceone.api.config.v1.DomainConfig/create"
	DomainConfig_Update_FullMethodName = "/spaceone.api.config.v1.DomainConfig/update"
	DomainConfig_Set_FullMethodName    = "/spaceone.api.config.v1.DomainConfig/set"
	DomainConfig_Delete_FullMethodName = "/spaceone.api.config.v1.DomainConfig/delete"
	DomainConfig_Get_FullMethodName    = "/spaceone.api.config.v1.DomainConfig/get"
	DomainConfig_List_FullMethodName   = "/spaceone.api.config.v1.DomainConfig/list"
	DomainConfig_Stat_FullMethodName   = "/spaceone.api.config.v1.DomainConfig/stat"
)

// DomainConfigClient is the client API for DomainConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DomainConfigClient interface {
	Create(ctx context.Context, in *SetDomainConfigRequest, opts ...grpc.CallOption) (*DomainConfigInfo, error)
	Update(ctx context.Context, in *SetDomainConfigRequest, opts ...grpc.CallOption) (*DomainConfigInfo, error)
	Set(ctx context.Context, in *SetDomainConfigRequest, opts ...grpc.CallOption) (*DomainConfigInfo, error)
	Delete(ctx context.Context, in *DomainConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *GetDomainConfigRequest, opts ...grpc.CallOption) (*DomainConfigInfo, error)
	List(ctx context.Context, in *DomainConfigQuery, opts ...grpc.CallOption) (*DomainConfigsInfo, error)
	Stat(ctx context.Context, in *DomainConfigStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type domainConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewDomainConfigClient(cc grpc.ClientConnInterface) DomainConfigClient {
	return &domainConfigClient{cc}
}

func (c *domainConfigClient) Create(ctx context.Context, in *SetDomainConfigRequest, opts ...grpc.CallOption) (*DomainConfigInfo, error) {
	out := new(DomainConfigInfo)
	err := c.cc.Invoke(ctx, DomainConfig_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainConfigClient) Update(ctx context.Context, in *SetDomainConfigRequest, opts ...grpc.CallOption) (*DomainConfigInfo, error) {
	out := new(DomainConfigInfo)
	err := c.cc.Invoke(ctx, DomainConfig_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainConfigClient) Set(ctx context.Context, in *SetDomainConfigRequest, opts ...grpc.CallOption) (*DomainConfigInfo, error) {
	out := new(DomainConfigInfo)
	err := c.cc.Invoke(ctx, DomainConfig_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainConfigClient) Delete(ctx context.Context, in *DomainConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, DomainConfig_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainConfigClient) Get(ctx context.Context, in *GetDomainConfigRequest, opts ...grpc.CallOption) (*DomainConfigInfo, error) {
	out := new(DomainConfigInfo)
	err := c.cc.Invoke(ctx, DomainConfig_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainConfigClient) List(ctx context.Context, in *DomainConfigQuery, opts ...grpc.CallOption) (*DomainConfigsInfo, error) {
	out := new(DomainConfigsInfo)
	err := c.cc.Invoke(ctx, DomainConfig_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainConfigClient) Stat(ctx context.Context, in *DomainConfigStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, DomainConfig_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DomainConfigServer is the server API for DomainConfig service.
// All implementations must embed UnimplementedDomainConfigServer
// for forward compatibility
type DomainConfigServer interface {
	Create(context.Context, *SetDomainConfigRequest) (*DomainConfigInfo, error)
	Update(context.Context, *SetDomainConfigRequest) (*DomainConfigInfo, error)
	Set(context.Context, *SetDomainConfigRequest) (*DomainConfigInfo, error)
	Delete(context.Context, *DomainConfigRequest) (*empty.Empty, error)
	Get(context.Context, *GetDomainConfigRequest) (*DomainConfigInfo, error)
	List(context.Context, *DomainConfigQuery) (*DomainConfigsInfo, error)
	Stat(context.Context, *DomainConfigStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedDomainConfigServer()
}

// UnimplementedDomainConfigServer must be embedded to have forward compatible implementations.
type UnimplementedDomainConfigServer struct {
}

func (UnimplementedDomainConfigServer) Create(context.Context, *SetDomainConfigRequest) (*DomainConfigInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDomainConfigServer) Update(context.Context, *SetDomainConfigRequest) (*DomainConfigInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDomainConfigServer) Set(context.Context, *SetDomainConfigRequest) (*DomainConfigInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedDomainConfigServer) Delete(context.Context, *DomainConfigRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDomainConfigServer) Get(context.Context, *GetDomainConfigRequest) (*DomainConfigInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDomainConfigServer) List(context.Context, *DomainConfigQuery) (*DomainConfigsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDomainConfigServer) Stat(context.Context, *DomainConfigStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedDomainConfigServer) mustEmbedUnimplementedDomainConfigServer() {}

// UnsafeDomainConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DomainConfigServer will
// result in compilation errors.
type UnsafeDomainConfigServer interface {
	mustEmbedUnimplementedDomainConfigServer()
}

func RegisterDomainConfigServer(s grpc.ServiceRegistrar, srv DomainConfigServer) {
	s.RegisterService(&DomainConfig_ServiceDesc, srv)
}

func _DomainConfig_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDomainConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainConfigServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainConfig_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainConfigServer).Create(ctx, req.(*SetDomainConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainConfig_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDomainConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainConfigServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainConfig_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainConfigServer).Update(ctx, req.(*SetDomainConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainConfig_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDomainConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainConfigServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainConfig_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainConfigServer).Set(ctx, req.(*SetDomainConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainConfig_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainConfigServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainConfig_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainConfigServer).Delete(ctx, req.(*DomainConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainConfig_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainConfigServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainConfig_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainConfigServer).Get(ctx, req.(*GetDomainConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainConfig_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainConfigQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainConfigServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainConfig_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainConfigServer).List(ctx, req.(*DomainConfigQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainConfig_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainConfigStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainConfigServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainConfig_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainConfigServer).Stat(ctx, req.(*DomainConfigStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// DomainConfig_ServiceDesc is the grpc.ServiceDesc for DomainConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DomainConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.config.v1.DomainConfig",
	HandlerType: (*DomainConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _DomainConfig_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _DomainConfig_Update_Handler,
		},
		{
			MethodName: "set",
			Handler:    _DomainConfig_Set_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _DomainConfig_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _DomainConfig_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _DomainConfig_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _DomainConfig_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/config/v1/domain_config.proto",
}
