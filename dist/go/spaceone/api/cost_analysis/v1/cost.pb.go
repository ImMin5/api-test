// A Cost is a resource of raw cost data collected by the cost_analysis.DataSource.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: spaceone/api/cost_analysis/v1/cost.proto

package v1

import (
	v1 "github.com/cloudforet-io/api/dist/go/spaceone/api/core/v1"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CostAnalyzeQuery_Granularity int32

const (
	CostAnalyzeQuery_UNIT_NONE   CostAnalyzeQuery_Granularity = 0
	CostAnalyzeQuery_ACCUMULATED CostAnalyzeQuery_Granularity = 1
	CostAnalyzeQuery_DAILY       CostAnalyzeQuery_Granularity = 2
	CostAnalyzeQuery_MONTHLY     CostAnalyzeQuery_Granularity = 3
	CostAnalyzeQuery_YEARLY      CostAnalyzeQuery_Granularity = 4
)

// Enum value maps for CostAnalyzeQuery_Granularity.
var (
	CostAnalyzeQuery_Granularity_name = map[int32]string{
		0: "UNIT_NONE",
		1: "ACCUMULATED",
		2: "DAILY",
		3: "MONTHLY",
		4: "YEARLY",
	}
	CostAnalyzeQuery_Granularity_value = map[string]int32{
		"UNIT_NONE":   0,
		"ACCUMULATED": 1,
		"DAILY":       2,
		"MONTHLY":     3,
		"YEARLY":      4,
	}
)

func (x CostAnalyzeQuery_Granularity) Enum() *CostAnalyzeQuery_Granularity {
	p := new(CostAnalyzeQuery_Granularity)
	*p = x
	return p
}

func (x CostAnalyzeQuery_Granularity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CostAnalyzeQuery_Granularity) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_cost_analysis_v1_cost_proto_enumTypes[0].Descriptor()
}

func (CostAnalyzeQuery_Granularity) Type() protoreflect.EnumType {
	return &file_spaceone_api_cost_analysis_v1_cost_proto_enumTypes[0]
}

func (x CostAnalyzeQuery_Granularity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CostAnalyzeQuery_Granularity.Descriptor instead.
func (CostAnalyzeQuery_Granularity) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_cost_proto_rawDescGZIP(), []int{6, 0}
}

//	{
//	       "original_cost": 4.50528e-08,
//	       "original_currency": "USD",
//	       "usd_cost": 4.50528e-08,
//	       "usage_quantity": 4.11e-07,
//	       "provider": "aws",
//	       "region_code": "ap-northeast-1",
//	       "product": "AWSDataTransfer",
//	       "account": "722069360300",
//	       "usage_type": "data-transfer.out",
//	       "additional_info": {
//	           "raw_usage_type": "APN1-DataTransfer-Out-Bytes"
//	       },
//	       "data_source_id": "ds-fcba92ca73b1"
//	}
type CreateCostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalCost     float32 `protobuf:"fixed32,1,opt,name=original_cost,json=originalCost,proto3" json:"original_cost,omitempty"`
	OriginalCurrency string  `protobuf:"bytes,2,opt,name=original_currency,json=originalCurrency,proto3" json:"original_currency,omitempty"`
	// +optional
	UsdCost float32 `protobuf:"fixed32,3,opt,name=usd_cost,json=usdCost,proto3" json:"usd_cost,omitempty"`
	// +optional
	UsageQuantity float32 `protobuf:"fixed32,4,opt,name=usage_quantity,json=usageQuantity,proto3" json:"usage_quantity,omitempty"`
	// +optional
	Provider string `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
	// +optional
	RegionCode string `protobuf:"bytes,6,opt,name=region_code,json=regionCode,proto3" json:"region_code,omitempty"`
	// +optional
	Category string `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	// +optional
	Product string `protobuf:"bytes,8,opt,name=product,proto3" json:"product,omitempty"`
	// +optional
	Account string `protobuf:"bytes,9,opt,name=account,proto3" json:"account,omitempty"`
	// +optional
	UsageType string `protobuf:"bytes,10,opt,name=usage_type,json=usageType,proto3" json:"usage_type,omitempty"`
	// +optional
	ResourceGroup string `protobuf:"bytes,11,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	// +optional
	Resource string `protobuf:"bytes,12,opt,name=resource,proto3" json:"resource,omitempty"`
	// +optional
	Tags *_struct.Struct `protobuf:"bytes,21,opt,name=tags,proto3" json:"tags,omitempty"`
	// +optional
	AdditionalInfo *_struct.Struct `protobuf:"bytes,22,opt,name=additional_info,json=additionalInfo,proto3" json:"additional_info,omitempty"`
	// +optional
	ServiceAccountId string `protobuf:"bytes,31,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	// +optional
	ProjectId    string `protobuf:"bytes,32,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DataSourceId string `protobuf:"bytes,33,opt,name=data_source_id,json=dataSourceId,proto3" json:"data_source_id,omitempty"`
	DomainId     string `protobuf:"bytes,34,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	// +optional
	BilledAt string `protobuf:"bytes,41,opt,name=billed_at,json=billedAt,proto3" json:"billed_at,omitempty"`
}

func (x *CreateCostRequest) Reset() {
	*x = CreateCostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCostRequest) ProtoMessage() {}

func (x *CreateCostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCostRequest.ProtoReflect.Descriptor instead.
func (*CreateCostRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_cost_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCostRequest) GetOriginalCost() float32 {
	if x != nil {
		return x.OriginalCost
	}
	return 0
}

func (x *CreateCostRequest) GetOriginalCurrency() string {
	if x != nil {
		return x.OriginalCurrency
	}
	return ""
}

func (x *CreateCostRequest) GetUsdCost() float32 {
	if x != nil {
		return x.UsdCost
	}
	return 0
}

func (x *CreateCostRequest) GetUsageQuantity() float32 {
	if x != nil {
		return x.UsageQuantity
	}
	return 0
}

func (x *CreateCostRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *CreateCostRequest) GetRegionCode() string {
	if x != nil {
		return x.RegionCode
	}
	return ""
}

func (x *CreateCostRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *CreateCostRequest) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *CreateCostRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *CreateCostRequest) GetUsageType() string {
	if x != nil {
		return x.UsageType
	}
	return ""
}

func (x *CreateCostRequest) GetResourceGroup() string {
	if x != nil {
		return x.ResourceGroup
	}
	return ""
}

func (x *CreateCostRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *CreateCostRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateCostRequest) GetAdditionalInfo() *_struct.Struct {
	if x != nil {
		return x.AdditionalInfo
	}
	return nil
}

func (x *CreateCostRequest) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *CreateCostRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateCostRequest) GetDataSourceId() string {
	if x != nil {
		return x.DataSourceId
	}
	return ""
}

func (x *CreateCostRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *CreateCostRequest) GetBilledAt() string {
	if x != nil {
		return x.BilledAt
	}
	return ""
}

//	{
//	   "cost_id": "cost-2ad052ed03d7"
//	}
type CostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostId   string `protobuf:"bytes,1,opt,name=cost_id,json=costId,proto3" json:"cost_id,omitempty"`
	DomainId string `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *CostRequest) Reset() {
	*x = CostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostRequest) ProtoMessage() {}

func (x *CostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostRequest.ProtoReflect.Descriptor instead.
func (*CostRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_cost_proto_rawDescGZIP(), []int{1}
}

func (x *CostRequest) GetCostId() string {
	if x != nil {
		return x.CostId
	}
	return ""
}

func (x *CostRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

//	{
//	   "cost_id": "cost-2ad052ed03d7"
//	}
type GetCostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostId   string `protobuf:"bytes,1,opt,name=cost_id,json=costId,proto3" json:"cost_id,omitempty"`
	DomainId string `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	// +optional
	Only []string `protobuf:"bytes,3,rep,name=only,proto3" json:"only,omitempty"`
}

func (x *GetCostRequest) Reset() {
	*x = GetCostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCostRequest) ProtoMessage() {}

func (x *GetCostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCostRequest.ProtoReflect.Descriptor instead.
func (*GetCostRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_cost_proto_rawDescGZIP(), []int{2}
}

func (x *GetCostRequest) GetCostId() string {
	if x != nil {
		return x.CostId
	}
	return ""
}

func (x *GetCostRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *GetCostRequest) GetOnly() []string {
	if x != nil {
		return x.Only
	}
	return nil
}

//	{
//	   "query": {}
//	}
type CostQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// +optional
	Query *v1.Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// +optional
	CostId string `protobuf:"bytes,2,opt,name=cost_id,json=costId,proto3" json:"cost_id,omitempty"`
	// +optional
	OriginalCurrency string `protobuf:"bytes,3,opt,name=original_currency,json=originalCurrency,proto3" json:"original_currency,omitempty"`
	// +optional
	Provider string `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
	// +optional
	RegionCode string `protobuf:"bytes,5,opt,name=region_code,json=regionCode,proto3" json:"region_code,omitempty"`
	// +optional
	RegionKey string `protobuf:"bytes,6,opt,name=region_key,json=regionKey,proto3" json:"region_key,omitempty"`
	// +optional
	Category string `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	// +optional
	Product string `protobuf:"bytes,8,opt,name=product,proto3" json:"product,omitempty"`
	// +optional
	Account string `protobuf:"bytes,9,opt,name=account,proto3" json:"account,omitempty"`
	// +optional
	UsageType string `protobuf:"bytes,10,opt,name=usage_type,json=usageType,proto3" json:"usage_type,omitempty"`
	// +optional
	ResourceGroup string `protobuf:"bytes,11,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	// +optional
	Resource string `protobuf:"bytes,12,opt,name=resource,proto3" json:"resource,omitempty"`
	// +optional
	ServiceAccountId string `protobuf:"bytes,21,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	// +optional
	ProjectId string `protobuf:"bytes,22,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// +optional
	DataSourceId string `protobuf:"bytes,23,opt,name=data_source_id,json=dataSourceId,proto3" json:"data_source_id,omitempty"`
	DomainId     string `protobuf:"bytes,24,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *CostQuery) Reset() {
	*x = CostQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostQuery) ProtoMessage() {}

func (x *CostQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostQuery.ProtoReflect.Descriptor instead.
func (*CostQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_cost_proto_rawDescGZIP(), []int{3}
}

func (x *CostQuery) GetQuery() *v1.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *CostQuery) GetCostId() string {
	if x != nil {
		return x.CostId
	}
	return ""
}

func (x *CostQuery) GetOriginalCurrency() string {
	if x != nil {
		return x.OriginalCurrency
	}
	return ""
}

func (x *CostQuery) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *CostQuery) GetRegionCode() string {
	if x != nil {
		return x.RegionCode
	}
	return ""
}

func (x *CostQuery) GetRegionKey() string {
	if x != nil {
		return x.RegionKey
	}
	return ""
}

func (x *CostQuery) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *CostQuery) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *CostQuery) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *CostQuery) GetUsageType() string {
	if x != nil {
		return x.UsageType
	}
	return ""
}

func (x *CostQuery) GetResourceGroup() string {
	if x != nil {
		return x.ResourceGroup
	}
	return ""
}

func (x *CostQuery) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *CostQuery) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *CostQuery) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CostQuery) GetDataSourceId() string {
	if x != nil {
		return x.DataSourceId
	}
	return ""
}

func (x *CostQuery) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

//	{
//	       "cost_id": "cost-c5aae7712ec9",
//	       "usd_cost": 4.50528e-08,
//	       "original_currency": "USD",
//	       "original_cost": 4.50528e-08,
//	       "usage_quantity": 4.11e-07,
//	       "provider": "aws",
//	       "region_code": "ap-northeast-1",
//	       "product": "AWSDataTransfer",
//	       "account": "722069360300",
//	       "usage_type": "data-transfer.out",
//	       "tags": {},
//	       "additional_info": {
//	           "raw_usage_type": "APN1-DataTransfer-Out-Bytes"
//	       },
//	       "data_source_id": "ds-fcba92ca73b1",
//	       "domain_id": "domain-58010aa2e451",
//	       "billed_at": "2022-07-19T09:44:27.326Z",
//	       "created_at": "2022-07-19T09:44:27.373Z"
//	}
type CostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostId           string          `protobuf:"bytes,1,opt,name=cost_id,json=costId,proto3" json:"cost_id,omitempty"`
	UsdCost          float32         `protobuf:"fixed32,2,opt,name=usd_cost,json=usdCost,proto3" json:"usd_cost,omitempty"`
	OriginalCurrency string          `protobuf:"bytes,3,opt,name=original_currency,json=originalCurrency,proto3" json:"original_currency,omitempty"`
	OriginalCost     float32         `protobuf:"fixed32,4,opt,name=original_cost,json=originalCost,proto3" json:"original_cost,omitempty"`
	UsageQuantity    float32         `protobuf:"fixed32,5,opt,name=usage_quantity,json=usageQuantity,proto3" json:"usage_quantity,omitempty"`
	Provider         string          `protobuf:"bytes,6,opt,name=provider,proto3" json:"provider,omitempty"`
	RegionCode       string          `protobuf:"bytes,7,opt,name=region_code,json=regionCode,proto3" json:"region_code,omitempty"`
	RegionKey        string          `protobuf:"bytes,8,opt,name=region_key,json=regionKey,proto3" json:"region_key,omitempty"`
	Category         string          `protobuf:"bytes,9,opt,name=category,proto3" json:"category,omitempty"`
	Product          string          `protobuf:"bytes,10,opt,name=product,proto3" json:"product,omitempty"`
	Account          string          `protobuf:"bytes,11,opt,name=account,proto3" json:"account,omitempty"`
	UsageType        string          `protobuf:"bytes,12,opt,name=usage_type,json=usageType,proto3" json:"usage_type,omitempty"`
	ResourceGroup    string          `protobuf:"bytes,13,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	Resource         string          `protobuf:"bytes,14,opt,name=resource,proto3" json:"resource,omitempty"`
	Tags             *_struct.Struct `protobuf:"bytes,21,opt,name=tags,proto3" json:"tags,omitempty"`
	AdditionalInfo   *_struct.Struct `protobuf:"bytes,22,opt,name=additional_info,json=additionalInfo,proto3" json:"additional_info,omitempty"`
	ServiceAccountId string          `protobuf:"bytes,31,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	ProjectId        string          `protobuf:"bytes,32,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DataSourceId     string          `protobuf:"bytes,33,opt,name=data_source_id,json=dataSourceId,proto3" json:"data_source_id,omitempty"`
	DomainId         string          `protobuf:"bytes,34,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	BilledAt         string          `protobuf:"bytes,41,opt,name=billed_at,json=billedAt,proto3" json:"billed_at,omitempty"`
	CreatedAt        string          `protobuf:"bytes,42,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *CostInfo) Reset() {
	*x = CostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostInfo) ProtoMessage() {}

func (x *CostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostInfo.ProtoReflect.Descriptor instead.
func (*CostInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_cost_proto_rawDescGZIP(), []int{4}
}

func (x *CostInfo) GetCostId() string {
	if x != nil {
		return x.CostId
	}
	return ""
}

func (x *CostInfo) GetUsdCost() float32 {
	if x != nil {
		return x.UsdCost
	}
	return 0
}

func (x *CostInfo) GetOriginalCurrency() string {
	if x != nil {
		return x.OriginalCurrency
	}
	return ""
}

func (x *CostInfo) GetOriginalCost() float32 {
	if x != nil {
		return x.OriginalCost
	}
	return 0
}

func (x *CostInfo) GetUsageQuantity() float32 {
	if x != nil {
		return x.UsageQuantity
	}
	return 0
}

func (x *CostInfo) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *CostInfo) GetRegionCode() string {
	if x != nil {
		return x.RegionCode
	}
	return ""
}

func (x *CostInfo) GetRegionKey() string {
	if x != nil {
		return x.RegionKey
	}
	return ""
}

func (x *CostInfo) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *CostInfo) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *CostInfo) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *CostInfo) GetUsageType() string {
	if x != nil {
		return x.UsageType
	}
	return ""
}

func (x *CostInfo) GetResourceGroup() string {
	if x != nil {
		return x.ResourceGroup
	}
	return ""
}

func (x *CostInfo) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *CostInfo) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CostInfo) GetAdditionalInfo() *_struct.Struct {
	if x != nil {
		return x.AdditionalInfo
	}
	return nil
}

func (x *CostInfo) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *CostInfo) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CostInfo) GetDataSourceId() string {
	if x != nil {
		return x.DataSourceId
	}
	return ""
}

func (x *CostInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *CostInfo) GetBilledAt() string {
	if x != nil {
		return x.BilledAt
	}
	return ""
}

func (x *CostInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

//	{
//	       "results": [
//	           {
//	               "cost_id": "cost-2ad052ed03d7",
//	               "usd_cost": 4.50528e-08,
//	               "original_currency": "USD",
//	               "original_cost": 4.50528e-08,
//	               "usage_quantity": 4.11e-07,
//	               "provider": "aws",
//	               "region_code": "ap-northeast-1",
//	               "product": "AWSDataTransfer",
//	               "account": "722069360300",
//	               "usage_type": "data-transfer.out",
//	               "tags": {},
//	               "additional_info": {
//	                   "raw_usage_type": "APN1-DataTransfer-Out-Bytes"
//	               },
//	               "data_source_id": "ds-fcba92ca73b1",
//	               "domain_id": "domain-58010aa2e451",
//	               "billed_at": "2021-01-01T00:00:00.000Z",
//	               "created_at": "2022-04-06T13:49:39.669Z"
//	           },
//	           {
//	               "cost_id": "cost-1d5e1b0dbf82",
//	               "usd_cost": 1.04e-05,
//	               "original_currency": "USD",
//	               "original_cost": 1.04e-05,
//	               "usage_quantity": 26.0,
//	               "provider": "aws",
//	               "region_code": "ap-northeast-1",
//	               "product": "AWSQueueService",
//	               "account": "722069360300",
//	               "tags": {},
//	               "additional_info": {
//	                   "raw_usage_type": "APN1-Requests-Tier1"
//	               },
//	               "data_source_id": "ds-fcba92ca73b1",
//	               "domain_id": "domain-58010aa2e451",
//	               "billed_at": "2021-01-01T00:00:00.000Z",
//	               "created_at": "2022-04-06T13:49:39.675Z"
//	           }
//	       ],
//	       "total_count": 307066
//	}
type CostsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results    []*CostInfo `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	TotalCount int32       `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *CostsInfo) Reset() {
	*x = CostsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostsInfo) ProtoMessage() {}

func (x *CostsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostsInfo.ProtoReflect.Descriptor instead.
func (*CostsInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_cost_proto_rawDescGZIP(), []int{5}
}

func (x *CostsInfo) GetResults() []*CostInfo {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CostsInfo) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

//	{
//	   "granularity": "MONTHLY",
//	   "start": "2022-05",
//	   "end": "2022-07",
//	   "group_by": ["product"],
//	   "filter": [],
//	   "limit": 15,
//	   "include_others": true,
//	   "domain_id": "domain-58010aa2e451"
//	}
type CostAnalyzeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Granularity CostAnalyzeQuery_Granularity `protobuf:"varint,1,opt,name=granularity,proto3,enum=spaceone.api.cost_analysis.v1.CostAnalyzeQuery_Granularity" json:"granularity,omitempty"`
	Start       string                       `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End         string                       `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	// +optional
	GroupBy []string `protobuf:"bytes,4,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	// +optional
	Filter *_struct.ListValue `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	// +optional
	Limit int32 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	// +optional
	Page *v1.Page `protobuf:"bytes,7,opt,name=page,proto3" json:"page,omitempty"`
	// +optional
	Sort *v1.Sort `protobuf:"bytes,8,opt,name=sort,proto3" json:"sort,omitempty"`
	// +optional
	IncludeUsageQuantity bool `protobuf:"varint,9,opt,name=include_usage_quantity,json=includeUsageQuantity,proto3" json:"include_usage_quantity,omitempty"`
	// +optional
	IncludeOthers bool   `protobuf:"varint,10,opt,name=include_others,json=includeOthers,proto3" json:"include_others,omitempty"`
	DomainId      string `protobuf:"bytes,11,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *CostAnalyzeQuery) Reset() {
	*x = CostAnalyzeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostAnalyzeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostAnalyzeQuery) ProtoMessage() {}

func (x *CostAnalyzeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostAnalyzeQuery.ProtoReflect.Descriptor instead.
func (*CostAnalyzeQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_cost_proto_rawDescGZIP(), []int{6}
}

func (x *CostAnalyzeQuery) GetGranularity() CostAnalyzeQuery_Granularity {
	if x != nil {
		return x.Granularity
	}
	return CostAnalyzeQuery_UNIT_NONE
}

func (x *CostAnalyzeQuery) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *CostAnalyzeQuery) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *CostAnalyzeQuery) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *CostAnalyzeQuery) GetFilter() *_struct.ListValue {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *CostAnalyzeQuery) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CostAnalyzeQuery) GetPage() *v1.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *CostAnalyzeQuery) GetSort() *v1.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *CostAnalyzeQuery) GetIncludeUsageQuantity() bool {
	if x != nil {
		return x.IncludeUsageQuantity
	}
	return false
}

func (x *CostAnalyzeQuery) GetIncludeOthers() bool {
	if x != nil {
		return x.IncludeOthers
	}
	return false
}

func (x *CostAnalyzeQuery) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

type CostAnalyzeV2Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query    *v1.TimeSeriesAnalyzeQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	DomainId string                     `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *CostAnalyzeV2Query) Reset() {
	*x = CostAnalyzeV2Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostAnalyzeV2Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostAnalyzeV2Query) ProtoMessage() {}

func (x *CostAnalyzeV2Query) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostAnalyzeV2Query.ProtoReflect.Descriptor instead.
func (*CostAnalyzeV2Query) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_cost_proto_rawDescGZIP(), []int{7}
}

func (x *CostAnalyzeV2Query) GetQuery() *v1.TimeSeriesAnalyzeQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *CostAnalyzeV2Query) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

type CostStatQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query    *v1.StatisticsQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	DomainId string              `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *CostStatQuery) Reset() {
	*x = CostStatQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostStatQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostStatQuery) ProtoMessage() {}

func (x *CostStatQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostStatQuery.ProtoReflect.Descriptor instead.
func (*CostStatQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_cost_proto_rawDescGZIP(), []int{8}
}

func (x *CostStatQuery) GetQuery() *v1.StatisticsQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *CostStatQuery) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

var File_spaceone_api_cost_analysis_v1_cost_proto protoreflect.FileDescriptor

var file_spaceone_api_cost_analysis_v1_cost_proto_rawDesc = []byte{
	0x0a, 0x28, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x05, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x73, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x75, 0x73, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0e, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x22, 0x43, 0x0a, 0x0b, 0x43, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x5a,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x6e, 0x6c, 0x79, 0x22, 0xa2, 0x04, 0x0a, 0x09, 0x43,
	0x6f, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f,
	0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22,
	0x80, 0x06, 0x0a, 0x08, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x64, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x75, 0x73, 0x64, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x6f, 0x0a, 0x09, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x41, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xab, 0x04, 0x0a, 0x10, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x5d, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e,
	0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47,
	0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e,
	0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x51,
	0x0a, 0x0b, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0d, 0x0a,
	0x09, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x41, 0x43, 0x43, 0x55, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x4f, 0x4e, 0x54,
	0x48, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x59, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x10,
	0x04, 0x22, 0x75, 0x0a, 0x12, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x56, 0x32, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x0d, 0x43, 0x6f, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x32, 0x9a, 0x07, 0x0a, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x8d, 0x01, 0x0a,
	0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f,
	0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f,
	0x63, 0x6f, 0x73, 0x74, 0x2d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x76, 0x0a, 0x06,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2d, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x12, 0x2d, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74,
	0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22,
	0x1a, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x28,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x73, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20,
	0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2d, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x7e, 0x0a, 0x07, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x12, 0x2f, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x74,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a,
	0x22, 0x1e, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x12, 0x86, 0x01, 0x0a, 0x0a, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x5f, 0x76, 0x32, 0x12,
	0x31, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x56, 0x32, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x2c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2d, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2d, 0x76, 0x32, 0x12, 0x75, 0x0a, 0x04, 0x73, 0x74, 0x61,
	0x74, 0x12, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20,
	0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2d, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x42, 0x44, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x72, 0x65, 0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spaceone_api_cost_analysis_v1_cost_proto_rawDescOnce sync.Once
	file_spaceone_api_cost_analysis_v1_cost_proto_rawDescData = file_spaceone_api_cost_analysis_v1_cost_proto_rawDesc
)

func file_spaceone_api_cost_analysis_v1_cost_proto_rawDescGZIP() []byte {
	file_spaceone_api_cost_analysis_v1_cost_proto_rawDescOnce.Do(func() {
		file_spaceone_api_cost_analysis_v1_cost_proto_rawDescData = protoimpl.X.CompressGZIP(file_spaceone_api_cost_analysis_v1_cost_proto_rawDescData)
	})
	return file_spaceone_api_cost_analysis_v1_cost_proto_rawDescData
}

var file_spaceone_api_cost_analysis_v1_cost_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_spaceone_api_cost_analysis_v1_cost_proto_goTypes = []interface{}{
	(CostAnalyzeQuery_Granularity)(0), // 0: spaceone.api.cost_analysis.v1.CostAnalyzeQuery.Granularity
	(*CreateCostRequest)(nil),         // 1: spaceone.api.cost_analysis.v1.CreateCostRequest
	(*CostRequest)(nil),               // 2: spaceone.api.cost_analysis.v1.CostRequest
	(*GetCostRequest)(nil),            // 3: spaceone.api.cost_analysis.v1.GetCostRequest
	(*CostQuery)(nil),                 // 4: spaceone.api.cost_analysis.v1.CostQuery
	(*CostInfo)(nil),                  // 5: spaceone.api.cost_analysis.v1.CostInfo
	(*CostsInfo)(nil),                 // 6: spaceone.api.cost_analysis.v1.CostsInfo
	(*CostAnalyzeQuery)(nil),          // 7: spaceone.api.cost_analysis.v1.CostAnalyzeQuery
	(*CostAnalyzeV2Query)(nil),        // 8: spaceone.api.cost_analysis.v1.CostAnalyzeV2Query
	(*CostStatQuery)(nil),             // 9: spaceone.api.cost_analysis.v1.CostStatQuery
	(*_struct.Struct)(nil),            // 10: google.protobuf.Struct
	(*v1.Query)(nil),                  // 11: spaceone.api.core.v1.Query
	(*_struct.ListValue)(nil),         // 12: google.protobuf.ListValue
	(*v1.Page)(nil),                   // 13: spaceone.api.core.v1.Page
	(*v1.Sort)(nil),                   // 14: spaceone.api.core.v1.Sort
	(*v1.TimeSeriesAnalyzeQuery)(nil), // 15: spaceone.api.core.v1.TimeSeriesAnalyzeQuery
	(*v1.StatisticsQuery)(nil),        // 16: spaceone.api.core.v1.StatisticsQuery
	(*empty.Empty)(nil),               // 17: google.protobuf.Empty
}
var file_spaceone_api_cost_analysis_v1_cost_proto_depIdxs = []int32{
	10, // 0: spaceone.api.cost_analysis.v1.CreateCostRequest.tags:type_name -> google.protobuf.Struct
	10, // 1: spaceone.api.cost_analysis.v1.CreateCostRequest.additional_info:type_name -> google.protobuf.Struct
	11, // 2: spaceone.api.cost_analysis.v1.CostQuery.query:type_name -> spaceone.api.core.v1.Query
	10, // 3: spaceone.api.cost_analysis.v1.CostInfo.tags:type_name -> google.protobuf.Struct
	10, // 4: spaceone.api.cost_analysis.v1.CostInfo.additional_info:type_name -> google.protobuf.Struct
	5,  // 5: spaceone.api.cost_analysis.v1.CostsInfo.results:type_name -> spaceone.api.cost_analysis.v1.CostInfo
	0,  // 6: spaceone.api.cost_analysis.v1.CostAnalyzeQuery.granularity:type_name -> spaceone.api.cost_analysis.v1.CostAnalyzeQuery.Granularity
	12, // 7: spaceone.api.cost_analysis.v1.CostAnalyzeQuery.filter:type_name -> google.protobuf.ListValue
	13, // 8: spaceone.api.cost_analysis.v1.CostAnalyzeQuery.page:type_name -> spaceone.api.core.v1.Page
	14, // 9: spaceone.api.cost_analysis.v1.CostAnalyzeQuery.sort:type_name -> spaceone.api.core.v1.Sort
	15, // 10: spaceone.api.cost_analysis.v1.CostAnalyzeV2Query.query:type_name -> spaceone.api.core.v1.TimeSeriesAnalyzeQuery
	16, // 11: spaceone.api.cost_analysis.v1.CostStatQuery.query:type_name -> spaceone.api.core.v1.StatisticsQuery
	1,  // 12: spaceone.api.cost_analysis.v1.Cost.create:input_type -> spaceone.api.cost_analysis.v1.CreateCostRequest
	2,  // 13: spaceone.api.cost_analysis.v1.Cost.delete:input_type -> spaceone.api.cost_analysis.v1.CostRequest
	3,  // 14: spaceone.api.cost_analysis.v1.Cost.get:input_type -> spaceone.api.cost_analysis.v1.GetCostRequest
	4,  // 15: spaceone.api.cost_analysis.v1.Cost.list:input_type -> spaceone.api.cost_analysis.v1.CostQuery
	7,  // 16: spaceone.api.cost_analysis.v1.Cost.analyze:input_type -> spaceone.api.cost_analysis.v1.CostAnalyzeQuery
	8,  // 17: spaceone.api.cost_analysis.v1.Cost.analyze_v2:input_type -> spaceone.api.cost_analysis.v1.CostAnalyzeV2Query
	9,  // 18: spaceone.api.cost_analysis.v1.Cost.stat:input_type -> spaceone.api.cost_analysis.v1.CostStatQuery
	5,  // 19: spaceone.api.cost_analysis.v1.Cost.create:output_type -> spaceone.api.cost_analysis.v1.CostInfo
	17, // 20: spaceone.api.cost_analysis.v1.Cost.delete:output_type -> google.protobuf.Empty
	5,  // 21: spaceone.api.cost_analysis.v1.Cost.get:output_type -> spaceone.api.cost_analysis.v1.CostInfo
	6,  // 22: spaceone.api.cost_analysis.v1.Cost.list:output_type -> spaceone.api.cost_analysis.v1.CostsInfo
	10, // 23: spaceone.api.cost_analysis.v1.Cost.analyze:output_type -> google.protobuf.Struct
	10, // 24: spaceone.api.cost_analysis.v1.Cost.analyze_v2:output_type -> google.protobuf.Struct
	10, // 25: spaceone.api.cost_analysis.v1.Cost.stat:output_type -> google.protobuf.Struct
	19, // [19:26] is the sub-list for method output_type
	12, // [12:19] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_spaceone_api_cost_analysis_v1_cost_proto_init() }
func file_spaceone_api_cost_analysis_v1_cost_proto_init() {
	if File_spaceone_api_cost_analysis_v1_cost_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostAnalyzeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostAnalyzeV2Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostStatQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spaceone_api_cost_analysis_v1_cost_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spaceone_api_cost_analysis_v1_cost_proto_goTypes,
		DependencyIndexes: file_spaceone_api_cost_analysis_v1_cost_proto_depIdxs,
		EnumInfos:         file_spaceone_api_cost_analysis_v1_cost_proto_enumTypes,
		MessageInfos:      file_spaceone_api_cost_analysis_v1_cost_proto_msgTypes,
	}.Build()
	File_spaceone_api_cost_analysis_v1_cost_proto = out.File
	file_spaceone_api_cost_analysis_v1_cost_proto_rawDesc = nil
	file_spaceone_api_cost_analysis_v1_cost_proto_goTypes = nil
	file_spaceone_api_cost_analysis_v1_cost_proto_depIdxs = nil
}
