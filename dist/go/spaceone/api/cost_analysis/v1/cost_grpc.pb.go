// A Cost is a resource of raw cost data collected by the cost_analysis.DataSource.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: spaceone/api/cost_analysis/v1/cost.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cost_Create_FullMethodName    = "/spaceone.api.cost_analysis.v1.Cost/create"
	Cost_Delete_FullMethodName    = "/spaceone.api.cost_analysis.v1.Cost/delete"
	Cost_Get_FullMethodName       = "/spaceone.api.cost_analysis.v1.Cost/get"
	Cost_List_FullMethodName      = "/spaceone.api.cost_analysis.v1.Cost/list"
	Cost_Analyze_FullMethodName   = "/spaceone.api.cost_analysis.v1.Cost/analyze"
	Cost_AnalyzeV2_FullMethodName = "/spaceone.api.cost_analysis.v1.Cost/analyze_v2"
	Cost_Stat_FullMethodName      = "/spaceone.api.cost_analysis.v1.Cost/stat"
)

// CostClient is the client API for Cost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CostClient interface {
	// Creates a new Cost. When creating a Cost, if the parameter `provider` is not entered, the default value of the parameter will be the provider information of the DataSource which collected the raw data of the Cost from the provider. The parameter `billed_at` is the data of when the cost is billed. While the DataSource collects the cost data, if the `billed_at` data does not exist, the value will be replaced with the `created_at` data indicating when the Cost is created. If the cost data collected is based on USD, the Cost is created without the currency exchange.
	Create(ctx context.Context, in *CreateCostRequest, opts ...grpc.CallOption) (*CostInfo, error)
	// Deletes a specific Cost. You must specify the `cost_id` of the Cost to delete.
	Delete(ctx context.Context, in *CostRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Gets a specific Cost. Prints detailed information about the Cost, including  `region_code` and `account`.
	Get(ctx context.Context, in *GetCostRequest, opts ...grpc.CallOption) (*CostInfo, error)
	// Gets a list of all Costs. You can use a query to get a filtered list of Costs.
	List(ctx context.Context, in *CostQuery, opts ...grpc.CallOption) (*CostsInfo, error)
	// Gets the Cost information of specific `product`s based on the time granularity: `DAILY`, `MONTHLY`, or `ACCUMULATED`. For `DAILY` granularity, this method can get the Cost data of at most 31 days. For `MONTHLY` or `ACCUMULATED` granularity, this method can get the Cost data of at most 12 months.
	Analyze(ctx context.Context, in *CostAnalyzeQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
	AnalyzeV2(ctx context.Context, in *CostAnalyzeV2Query, opts ...grpc.CallOption) (*_struct.Struct, error)
	Stat(ctx context.Context, in *CostStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type costClient struct {
	cc grpc.ClientConnInterface
}

func NewCostClient(cc grpc.ClientConnInterface) CostClient {
	return &costClient{cc}
}

func (c *costClient) Create(ctx context.Context, in *CreateCostRequest, opts ...grpc.CallOption) (*CostInfo, error) {
	out := new(CostInfo)
	err := c.cc.Invoke(ctx, Cost_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) Delete(ctx context.Context, in *CostRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Cost_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) Get(ctx context.Context, in *GetCostRequest, opts ...grpc.CallOption) (*CostInfo, error) {
	out := new(CostInfo)
	err := c.cc.Invoke(ctx, Cost_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) List(ctx context.Context, in *CostQuery, opts ...grpc.CallOption) (*CostsInfo, error) {
	out := new(CostsInfo)
	err := c.cc.Invoke(ctx, Cost_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) Analyze(ctx context.Context, in *CostAnalyzeQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, Cost_Analyze_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) AnalyzeV2(ctx context.Context, in *CostAnalyzeV2Query, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, Cost_AnalyzeV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) Stat(ctx context.Context, in *CostStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, Cost_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CostServer is the server API for Cost service.
// All implementations must embed UnimplementedCostServer
// for forward compatibility
type CostServer interface {
	// Creates a new Cost. When creating a Cost, if the parameter `provider` is not entered, the default value of the parameter will be the provider information of the DataSource which collected the raw data of the Cost from the provider. The parameter `billed_at` is the data of when the cost is billed. While the DataSource collects the cost data, if the `billed_at` data does not exist, the value will be replaced with the `created_at` data indicating when the Cost is created. If the cost data collected is based on USD, the Cost is created without the currency exchange.
	Create(context.Context, *CreateCostRequest) (*CostInfo, error)
	// Deletes a specific Cost. You must specify the `cost_id` of the Cost to delete.
	Delete(context.Context, *CostRequest) (*empty.Empty, error)
	// Gets a specific Cost. Prints detailed information about the Cost, including  `region_code` and `account`.
	Get(context.Context, *GetCostRequest) (*CostInfo, error)
	// Gets a list of all Costs. You can use a query to get a filtered list of Costs.
	List(context.Context, *CostQuery) (*CostsInfo, error)
	// Gets the Cost information of specific `product`s based on the time granularity: `DAILY`, `MONTHLY`, or `ACCUMULATED`. For `DAILY` granularity, this method can get the Cost data of at most 31 days. For `MONTHLY` or `ACCUMULATED` granularity, this method can get the Cost data of at most 12 months.
	Analyze(context.Context, *CostAnalyzeQuery) (*_struct.Struct, error)
	AnalyzeV2(context.Context, *CostAnalyzeV2Query) (*_struct.Struct, error)
	Stat(context.Context, *CostStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedCostServer()
}

// UnimplementedCostServer must be embedded to have forward compatible implementations.
type UnimplementedCostServer struct {
}

func (UnimplementedCostServer) Create(context.Context, *CreateCostRequest) (*CostInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCostServer) Delete(context.Context, *CostRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCostServer) Get(context.Context, *GetCostRequest) (*CostInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCostServer) List(context.Context, *CostQuery) (*CostsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCostServer) Analyze(context.Context, *CostAnalyzeQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Analyze not implemented")
}
func (UnimplementedCostServer) AnalyzeV2(context.Context, *CostAnalyzeV2Query) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeV2 not implemented")
}
func (UnimplementedCostServer) Stat(context.Context, *CostStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedCostServer) mustEmbedUnimplementedCostServer() {}

// UnsafeCostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CostServer will
// result in compilation errors.
type UnsafeCostServer interface {
	mustEmbedUnimplementedCostServer()
}

func RegisterCostServer(s grpc.ServiceRegistrar, srv CostServer) {
	s.RegisterService(&Cost_ServiceDesc, srv)
}

func _Cost_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cost_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).Create(ctx, req.(*CreateCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cost_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).Delete(ctx, req.(*CostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cost_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).Get(ctx, req.(*GetCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CostQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cost_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).List(ctx, req.(*CostQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CostAnalyzeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cost_Analyze_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).Analyze(ctx, req.(*CostAnalyzeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_AnalyzeV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CostAnalyzeV2Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).AnalyzeV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cost_AnalyzeV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).AnalyzeV2(ctx, req.(*CostAnalyzeV2Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CostStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cost_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).Stat(ctx, req.(*CostStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Cost_ServiceDesc is the grpc.ServiceDesc for Cost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.cost_analysis.v1.Cost",
	HandlerType: (*CostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _Cost_Create_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _Cost_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Cost_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _Cost_List_Handler,
		},
		{
			MethodName: "analyze",
			Handler:    _Cost_Analyze_Handler,
		},
		{
			MethodName: "analyze_v2",
			Handler:    _Cost_AnalyzeV2_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _Cost_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/cost_analysis/v1/cost.proto",
}
