// A DataSource is a plugin instance collecting external cost data. External cost data consists of `raw data` and the plugin information used for collection.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: spaceone/api/cost_analysis/v1/data_source.proto

package v1

import (
	v1 "github.com/cloudforet-io/api/dist/go/spaceone/api/core/v1"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PluginInfo_UpgradeMode int32

const (
	PluginInfo_NONE   PluginInfo_UpgradeMode = 0
	PluginInfo_MANUAL PluginInfo_UpgradeMode = 1
	PluginInfo_AUTO   PluginInfo_UpgradeMode = 2
)

// Enum value maps for PluginInfo_UpgradeMode.
var (
	PluginInfo_UpgradeMode_name = map[int32]string{
		0: "NONE",
		1: "MANUAL",
		2: "AUTO",
	}
	PluginInfo_UpgradeMode_value = map[string]int32{
		"NONE":   0,
		"MANUAL": 1,
		"AUTO":   2,
	}
)

func (x PluginInfo_UpgradeMode) Enum() *PluginInfo_UpgradeMode {
	p := new(PluginInfo_UpgradeMode)
	*p = x
	return p
}

func (x PluginInfo_UpgradeMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PluginInfo_UpgradeMode) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_cost_analysis_v1_data_source_proto_enumTypes[0].Descriptor()
}

func (PluginInfo_UpgradeMode) Type() protoreflect.EnumType {
	return &file_spaceone_api_cost_analysis_v1_data_source_proto_enumTypes[0]
}

func (x PluginInfo_UpgradeMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PluginInfo_UpgradeMode.Descriptor instead.
func (PluginInfo_UpgradeMode) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_data_source_proto_rawDescGZIP(), []int{0, 0}
}

type RegisterDataSourceRequest_DataSourceType int32

const (
	RegisterDataSourceRequest_NONE     RegisterDataSourceRequest_DataSourceType = 0
	RegisterDataSourceRequest_LOCAL    RegisterDataSourceRequest_DataSourceType = 1
	RegisterDataSourceRequest_EXTERNAL RegisterDataSourceRequest_DataSourceType = 2
)

// Enum value maps for RegisterDataSourceRequest_DataSourceType.
var (
	RegisterDataSourceRequest_DataSourceType_name = map[int32]string{
		0: "NONE",
		1: "LOCAL",
		2: "EXTERNAL",
	}
	RegisterDataSourceRequest_DataSourceType_value = map[string]int32{
		"NONE":     0,
		"LOCAL":    1,
		"EXTERNAL": 2,
	}
)

func (x RegisterDataSourceRequest_DataSourceType) Enum() *RegisterDataSourceRequest_DataSourceType {
	p := new(RegisterDataSourceRequest_DataSourceType)
	*p = x
	return p
}

func (x RegisterDataSourceRequest_DataSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegisterDataSourceRequest_DataSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_cost_analysis_v1_data_source_proto_enumTypes[1].Descriptor()
}

func (RegisterDataSourceRequest_DataSourceType) Type() protoreflect.EnumType {
	return &file_spaceone_api_cost_analysis_v1_data_source_proto_enumTypes[1]
}

func (x RegisterDataSourceRequest_DataSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegisterDataSourceRequest_DataSourceType.Descriptor instead.
func (RegisterDataSourceRequest_DataSourceType) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_data_source_proto_rawDescGZIP(), []int{1, 0}
}

type UpdateDataSourcePluginRequest_UpgradeMode int32

const (
	UpdateDataSourcePluginRequest_NONE   UpdateDataSourcePluginRequest_UpgradeMode = 0
	UpdateDataSourcePluginRequest_MANUAL UpdateDataSourcePluginRequest_UpgradeMode = 1
	UpdateDataSourcePluginRequest_AUTO   UpdateDataSourcePluginRequest_UpgradeMode = 2
)

// Enum value maps for UpdateDataSourcePluginRequest_UpgradeMode.
var (
	UpdateDataSourcePluginRequest_UpgradeMode_name = map[int32]string{
		0: "NONE",
		1: "MANUAL",
		2: "AUTO",
	}
	UpdateDataSourcePluginRequest_UpgradeMode_value = map[string]int32{
		"NONE":   0,
		"MANUAL": 1,
		"AUTO":   2,
	}
)

func (x UpdateDataSourcePluginRequest_UpgradeMode) Enum() *UpdateDataSourcePluginRequest_UpgradeMode {
	p := new(UpdateDataSourcePluginRequest_UpgradeMode)
	*p = x
	return p
}

func (x UpdateDataSourcePluginRequest_UpgradeMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateDataSourcePluginRequest_UpgradeMode) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_cost_analysis_v1_data_source_proto_enumTypes[2].Descriptor()
}

func (UpdateDataSourcePluginRequest_UpgradeMode) Type() protoreflect.EnumType {
	return &file_spaceone_api_cost_analysis_v1_data_source_proto_enumTypes[2]
}

func (x UpdateDataSourcePluginRequest_UpgradeMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateDataSourcePluginRequest_UpgradeMode.Descriptor instead.
func (UpdateDataSourcePluginRequest_UpgradeMode) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_data_source_proto_rawDescGZIP(), []int{3, 0}
}

type DataSourceQuery_DataSourceType int32

const (
	DataSourceQuery_NONE     DataSourceQuery_DataSourceType = 0
	DataSourceQuery_LOCAL    DataSourceQuery_DataSourceType = 1
	DataSourceQuery_EXTERNAL DataSourceQuery_DataSourceType = 2
)

// Enum value maps for DataSourceQuery_DataSourceType.
var (
	DataSourceQuery_DataSourceType_name = map[int32]string{
		0: "NONE",
		1: "LOCAL",
		2: "EXTERNAL",
	}
	DataSourceQuery_DataSourceType_value = map[string]int32{
		"NONE":     0,
		"LOCAL":    1,
		"EXTERNAL": 2,
	}
)

func (x DataSourceQuery_DataSourceType) Enum() *DataSourceQuery_DataSourceType {
	p := new(DataSourceQuery_DataSourceType)
	*p = x
	return p
}

func (x DataSourceQuery_DataSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSourceQuery_DataSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_cost_analysis_v1_data_source_proto_enumTypes[3].Descriptor()
}

func (DataSourceQuery_DataSourceType) Type() protoreflect.EnumType {
	return &file_spaceone_api_cost_analysis_v1_data_source_proto_enumTypes[3]
}

func (x DataSourceQuery_DataSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSourceQuery_DataSourceType.Descriptor instead.
func (DataSourceQuery_DataSourceType) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_data_source_proto_rawDescGZIP(), []int{7, 0}
}

type DataSourceInfo_State int32

const (
	DataSourceInfo_STATE_NONE DataSourceInfo_State = 0
	DataSourceInfo_ENABLED    DataSourceInfo_State = 1
	DataSourceInfo_DISABLED   DataSourceInfo_State = 2
)

// Enum value maps for DataSourceInfo_State.
var (
	DataSourceInfo_State_name = map[int32]string{
		0: "STATE_NONE",
		1: "ENABLED",
		2: "DISABLED",
	}
	DataSourceInfo_State_value = map[string]int32{
		"STATE_NONE": 0,
		"ENABLED":    1,
		"DISABLED":   2,
	}
)

func (x DataSourceInfo_State) Enum() *DataSourceInfo_State {
	p := new(DataSourceInfo_State)
	*p = x
	return p
}

func (x DataSourceInfo_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSourceInfo_State) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_cost_analysis_v1_data_source_proto_enumTypes[4].Descriptor()
}

func (DataSourceInfo_State) Type() protoreflect.EnumType {
	return &file_spaceone_api_cost_analysis_v1_data_source_proto_enumTypes[4]
}

func (x DataSourceInfo_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSourceInfo_State.Descriptor instead.
func (DataSourceInfo_State) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_data_source_proto_rawDescGZIP(), []int{8, 0}
}

type DataSourceInfo_DataSourceType int32

const (
	DataSourceInfo_TYPE_NONE DataSourceInfo_DataSourceType = 0
	DataSourceInfo_LOCAL     DataSourceInfo_DataSourceType = 1
	DataSourceInfo_EXTERNAL  DataSourceInfo_DataSourceType = 2
)

// Enum value maps for DataSourceInfo_DataSourceType.
var (
	DataSourceInfo_DataSourceType_name = map[int32]string{
		0: "TYPE_NONE",
		1: "LOCAL",
		2: "EXTERNAL",
	}
	DataSourceInfo_DataSourceType_value = map[string]int32{
		"TYPE_NONE": 0,
		"LOCAL":     1,
		"EXTERNAL":  2,
	}
)

func (x DataSourceInfo_DataSourceType) Enum() *DataSourceInfo_DataSourceType {
	p := new(DataSourceInfo_DataSourceType)
	*p = x
	return p
}

func (x DataSourceInfo_DataSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSourceInfo_DataSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_cost_analysis_v1_data_source_proto_enumTypes[5].Descriptor()
}

func (DataSourceInfo_DataSourceType) Type() protoreflect.EnumType {
	return &file_spaceone_api_cost_analysis_v1_data_source_proto_enumTypes[5]
}

func (x DataSourceInfo_DataSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSourceInfo_DataSourceType.Descriptor instead.
func (DataSourceInfo_DataSourceType) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_data_source_proto_rawDescGZIP(), []int{8, 1}
}

type PluginInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PluginId    string                 `protobuf:"bytes,1,opt,name=plugin_id,json=pluginId,proto3" json:"plugin_id,omitempty"`
	Version     string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Options     *_struct.Struct        `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	Metadata    *_struct.Struct        `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	SecretData  *_struct.Struct        `protobuf:"bytes,5,opt,name=secret_data,json=secretData,proto3" json:"secret_data,omitempty"`
	Schema      string                 `protobuf:"bytes,6,opt,name=schema,proto3" json:"schema,omitempty"`
	SecretId    string                 `protobuf:"bytes,7,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
	UpgradeMode PluginInfo_UpgradeMode `protobuf:"varint,8,opt,name=upgrade_mode,json=upgradeMode,proto3,enum=spaceone.api.cost_analysis.v1.PluginInfo_UpgradeMode" json:"upgrade_mode,omitempty"`
}

func (x *PluginInfo) Reset() {
	*x = PluginInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginInfo) ProtoMessage() {}

func (x *PluginInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginInfo.ProtoReflect.Descriptor instead.
func (*PluginInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_data_source_proto_rawDescGZIP(), []int{0}
}

func (x *PluginInfo) GetPluginId() string {
	if x != nil {
		return x.PluginId
	}
	return ""
}

func (x *PluginInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PluginInfo) GetOptions() *_struct.Struct {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *PluginInfo) GetMetadata() *_struct.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PluginInfo) GetSecretData() *_struct.Struct {
	if x != nil {
		return x.SecretData
	}
	return nil
}

func (x *PluginInfo) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *PluginInfo) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

func (x *PluginInfo) GetUpgradeMode() PluginInfo_UpgradeMode {
	if x != nil {
		return x.UpgradeMode
	}
	return PluginInfo_NONE
}

//	{
//	   "name": "AWS HyperBilling Data Source test",
//	   "data_source_type": "EXTERNAL",
//	   "plugin_info": {
//	       "plugin_id": "plugin-aws-hyperbilling-cost-datasource",
//	       "version": "1.0.4",
//	       "options": {},
//	       "metadata": {
//	           "data_source_rules": [
//	               {
//	                   "conditions_policy": "ALWAYS",
//	                   "options": {
//	                       "stop_processing": true
//	                   },
//	                   "actions": {
//	                       "match_service_account": {
//	                           "source": "account",
//	                           "target": "data.account_id"
//	                       }
//	                   },
//	                   "conditions": [],
//	                   "tags": {},
//	                   "name": "match_service_account"
//	               }
//	           ]
//	       },
//	       "secret_id": "secret-ca134639483",
//	       "upgrade_mode": "AUTO"
//	   },
//	   "tags": {"a": "b"}
//	}
type RegisterDataSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DataSourceType RegisterDataSourceRequest_DataSourceType `protobuf:"varint,2,opt,name=data_source_type,json=dataSourceType,proto3,enum=spaceone.api.cost_analysis.v1.RegisterDataSourceRequest_DataSourceType" json:"data_source_type,omitempty"`
	// +optional
	Provider string `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	// +optional
	Template *_struct.Struct `protobuf:"bytes,4,opt,name=template,proto3" json:"template,omitempty"`
	// +optional
	PluginInfo *PluginInfo `protobuf:"bytes,5,opt,name=plugin_info,json=pluginInfo,proto3" json:"plugin_info,omitempty"`
	// +optional
	Tags     *_struct.Struct `protobuf:"bytes,6,opt,name=tags,proto3" json:"tags,omitempty"`
	DomainId string          `protobuf:"bytes,11,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *RegisterDataSourceRequest) Reset() {
	*x = RegisterDataSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterDataSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDataSourceRequest) ProtoMessage() {}

func (x *RegisterDataSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDataSourceRequest.ProtoReflect.Descriptor instead.
func (*RegisterDataSourceRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_data_source_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterDataSourceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterDataSourceRequest) GetDataSourceType() RegisterDataSourceRequest_DataSourceType {
	if x != nil {
		return x.DataSourceType
	}
	return RegisterDataSourceRequest_NONE
}

func (x *RegisterDataSourceRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *RegisterDataSourceRequest) GetTemplate() *_struct.Struct {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *RegisterDataSourceRequest) GetPluginInfo() *PluginInfo {
	if x != nil {
		return x.PluginInfo
	}
	return nil
}

func (x *RegisterDataSourceRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *RegisterDataSourceRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

//	{
//	       "data_source_id": "ds-085d1e872789",
//	       "name": "AWS HyperBilling Data Source test2",
//	       "tags": {
//	           "type": "test"
//	       }
//	}
type UpdateDataSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSourceId string `protobuf:"bytes,1,opt,name=data_source_id,json=dataSourceId,proto3" json:"data_source_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	Template *_struct.Struct `protobuf:"bytes,3,opt,name=template,proto3" json:"template,omitempty"`
	// +optional
	Tags     *_struct.Struct `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
	DomainId string          `protobuf:"bytes,11,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *UpdateDataSourceRequest) Reset() {
	*x = UpdateDataSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDataSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDataSourceRequest) ProtoMessage() {}

func (x *UpdateDataSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDataSourceRequest.ProtoReflect.Descriptor instead.
func (*UpdateDataSourceRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_data_source_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateDataSourceRequest) GetDataSourceId() string {
	if x != nil {
		return x.DataSourceId
	}
	return ""
}

func (x *UpdateDataSourceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDataSourceRequest) GetTemplate() *_struct.Struct {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *UpdateDataSourceRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateDataSourceRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

//	{
//	   "data_source_id": "ds-085d1e872789",
//	   "version": "1.0.4",
//	   "options": {},
//	   "upgrade_mode": "AUTO"
//	}
type UpdateDataSourcePluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSourceId string `protobuf:"bytes,1,opt,name=data_source_id,json=dataSourceId,proto3" json:"data_source_id,omitempty"`
	// +optional
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// +optional
	Options *_struct.Struct `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	// +optional
	UpgradeMode UpdateDataSourcePluginRequest_UpgradeMode `protobuf:"varint,4,opt,name=upgrade_mode,json=upgradeMode,proto3,enum=spaceone.api.cost_analysis.v1.UpdateDataSourcePluginRequest_UpgradeMode" json:"upgrade_mode,omitempty"`
	DomainId    string                                    `protobuf:"bytes,11,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *UpdateDataSourcePluginRequest) Reset() {
	*x = UpdateDataSourcePluginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDataSourcePluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDataSourcePluginRequest) ProtoMessage() {}

func (x *UpdateDataSourcePluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDataSourcePluginRequest.ProtoReflect.Descriptor instead.
func (*UpdateDataSourcePluginRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_data_source_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateDataSourcePluginRequest) GetDataSourceId() string {
	if x != nil {
		return x.DataSourceId
	}
	return ""
}

func (x *UpdateDataSourcePluginRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpdateDataSourcePluginRequest) GetOptions() *_struct.Struct {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *UpdateDataSourcePluginRequest) GetUpgradeMode() UpdateDataSourcePluginRequest_UpgradeMode {
	if x != nil {
		return x.UpgradeMode
	}
	return UpdateDataSourcePluginRequest_NONE
}

func (x *UpdateDataSourcePluginRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

type SyncDataSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSourceId string `protobuf:"bytes,1,opt,name=data_source_id,json=dataSourceId,proto3" json:"data_source_id,omitempty"`
	// +optional
	Start string `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	// +optional
	NoPreloadCache bool   `protobuf:"varint,3,opt,name=no_preload_cache,json=noPreloadCache,proto3" json:"no_preload_cache,omitempty"`
	DomainId       string `protobuf:"bytes,11,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *SyncDataSourceRequest) Reset() {
	*x = SyncDataSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncDataSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncDataSourceRequest) ProtoMessage() {}

func (x *SyncDataSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncDataSourceRequest.ProtoReflect.Descriptor instead.
func (*SyncDataSourceRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_data_source_proto_rawDescGZIP(), []int{4}
}

func (x *SyncDataSourceRequest) GetDataSourceId() string {
	if x != nil {
		return x.DataSourceId
	}
	return ""
}

func (x *SyncDataSourceRequest) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *SyncDataSourceRequest) GetNoPreloadCache() bool {
	if x != nil {
		return x.NoPreloadCache
	}
	return false
}

func (x *SyncDataSourceRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

//	{
//	   "data_source_id": "ds-085d1e872789"
//	}
type DataSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// is_required: true
	DataSourceId string `protobuf:"bytes,1,opt,name=data_source_id,json=dataSourceId,proto3" json:"data_source_id,omitempty"`
	DomainId     string `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *DataSourceRequest) Reset() {
	*x = DataSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceRequest) ProtoMessage() {}

func (x *DataSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceRequest.ProtoReflect.Descriptor instead.
func (*DataSourceRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_data_source_proto_rawDescGZIP(), []int{5}
}

func (x *DataSourceRequest) GetDataSourceId() string {
	if x != nil {
		return x.DataSourceId
	}
	return ""
}

func (x *DataSourceRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

type GetDataSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSourceId string `protobuf:"bytes,1,opt,name=data_source_id,json=dataSourceId,proto3" json:"data_source_id,omitempty"`
	DomainId     string `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	// +optional
	Only []string `protobuf:"bytes,3,rep,name=only,proto3" json:"only,omitempty"`
}

func (x *GetDataSourceRequest) Reset() {
	*x = GetDataSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataSourceRequest) ProtoMessage() {}

func (x *GetDataSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataSourceRequest.ProtoReflect.Descriptor instead.
func (*GetDataSourceRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_data_source_proto_rawDescGZIP(), []int{6}
}

func (x *GetDataSourceRequest) GetDataSourceId() string {
	if x != nil {
		return x.DataSourceId
	}
	return ""
}

func (x *GetDataSourceRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *GetDataSourceRequest) GetOnly() []string {
	if x != nil {
		return x.Only
	}
	return nil
}

//	{
//	   "query": {}
//	}
type DataSourceQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// +optional
	Query *v1.Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// +optional
	DataSourceId string `protobuf:"bytes,2,opt,name=data_source_id,json=dataSourceId,proto3" json:"data_source_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	State string `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	// +optional
	DataSourceType DataSourceQuery_DataSourceType `protobuf:"varint,5,opt,name=data_source_type,json=dataSourceType,proto3,enum=spaceone.api.cost_analysis.v1.DataSourceQuery_DataSourceType" json:"data_source_type,omitempty"`
	// +optional
	Provider string `protobuf:"bytes,6,opt,name=provider,proto3" json:"provider,omitempty"`
	DomainId string `protobuf:"bytes,11,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *DataSourceQuery) Reset() {
	*x = DataSourceQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceQuery) ProtoMessage() {}

func (x *DataSourceQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceQuery.ProtoReflect.Descriptor instead.
func (*DataSourceQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_data_source_proto_rawDescGZIP(), []int{7}
}

func (x *DataSourceQuery) GetQuery() *v1.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *DataSourceQuery) GetDataSourceId() string {
	if x != nil {
		return x.DataSourceId
	}
	return ""
}

func (x *DataSourceQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataSourceQuery) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *DataSourceQuery) GetDataSourceType() DataSourceQuery_DataSourceType {
	if x != nil {
		return x.DataSourceType
	}
	return DataSourceQuery_NONE
}

func (x *DataSourceQuery) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *DataSourceQuery) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

//	{
//	       "data_source_id": "ds-085d1e872789",
//	       "name": "AWS HyperBilling Data Source test",
//	       "state": "ENABLED",
//	       "data_source_type": "EXTERNAL",
//	       "plugin_info": {
//	           "plugin_id": "plugin-aws-hyperbilling-cost-datasource",
//	           "version": "1.0.4",
//	           "options": {},
//	           "metadata": {
//	               "data_source_rules": [
//	                   {
//	                       "options": {
//	                           "stop_processing": true
//	                       },
//	                       "actions": {
//	                           "match_service_account": {
//	                               "source": "account",
//	                               "target": "data.account_id"
//	                           }
//	                       },
//	                       "domain_id": "domain-58010aa2e451",
//	                       "conditions": [],
//	                       "name": "match_service_account",
//	                       "tags": {},
//	                       "data_source_id": "ds-085d1e872789",
//	                       "conditions_policy": "ALWAYS"
//	                   }
//	               ]
//	           },
//	           "secret_id": "secret-ca134639483",
//	           "upgrade_mode": "AUTO"
//	       },
//	       "template": {},
//	       "tags": {
//	           "a": "b"
//	       },
//	       "cost_tag_keys": [
//	           "Name",
//	           "Environment",
//	           "Role",
//	           "Service"
//	       ],
//	       "cost_additional_info_keys": [
//	           "raw_usage_type"
//	       ],
//	       "domain_id": "domain-58010aa2e451",
//	       "created_at": "2022-07-19T10:58:36.080Z"
//	}
type DataSourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSourceId           string                        `protobuf:"bytes,1,opt,name=data_source_id,json=dataSourceId,proto3" json:"data_source_id,omitempty"`
	Name                   string                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	State                  DataSourceInfo_State          `protobuf:"varint,3,opt,name=state,proto3,enum=spaceone.api.cost_analysis.v1.DataSourceInfo_State" json:"state,omitempty"`
	DataSourceType         DataSourceInfo_DataSourceType `protobuf:"varint,4,opt,name=data_source_type,json=dataSourceType,proto3,enum=spaceone.api.cost_analysis.v1.DataSourceInfo_DataSourceType" json:"data_source_type,omitempty"`
	Provider               string                        `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
	PluginInfo             *PluginInfo                   `protobuf:"bytes,6,opt,name=plugin_info,json=pluginInfo,proto3" json:"plugin_info,omitempty"`
	Template               *_struct.Struct               `protobuf:"bytes,7,opt,name=template,proto3" json:"template,omitempty"`
	Tags                   *_struct.Struct               `protobuf:"bytes,8,opt,name=tags,proto3" json:"tags,omitempty"`
	CostTagKeys            []string                      `protobuf:"bytes,9,rep,name=cost_tag_keys,json=costTagKeys,proto3" json:"cost_tag_keys,omitempty"`
	CostAdditionalInfoKeys []string                      `protobuf:"bytes,10,rep,name=cost_additional_info_keys,json=costAdditionalInfoKeys,proto3" json:"cost_additional_info_keys,omitempty"`
	DomainId               string                        `protobuf:"bytes,11,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	CreatedAt              string                        `protobuf:"bytes,21,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LastSynchronizedAt     string                        `protobuf:"bytes,22,opt,name=last_synchronized_at,json=lastSynchronizedAt,proto3" json:"last_synchronized_at,omitempty"`
}

func (x *DataSourceInfo) Reset() {
	*x = DataSourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceInfo) ProtoMessage() {}

func (x *DataSourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceInfo.ProtoReflect.Descriptor instead.
func (*DataSourceInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_data_source_proto_rawDescGZIP(), []int{8}
}

func (x *DataSourceInfo) GetDataSourceId() string {
	if x != nil {
		return x.DataSourceId
	}
	return ""
}

func (x *DataSourceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataSourceInfo) GetState() DataSourceInfo_State {
	if x != nil {
		return x.State
	}
	return DataSourceInfo_STATE_NONE
}

func (x *DataSourceInfo) GetDataSourceType() DataSourceInfo_DataSourceType {
	if x != nil {
		return x.DataSourceType
	}
	return DataSourceInfo_TYPE_NONE
}

func (x *DataSourceInfo) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *DataSourceInfo) GetPluginInfo() *PluginInfo {
	if x != nil {
		return x.PluginInfo
	}
	return nil
}

func (x *DataSourceInfo) GetTemplate() *_struct.Struct {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *DataSourceInfo) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DataSourceInfo) GetCostTagKeys() []string {
	if x != nil {
		return x.CostTagKeys
	}
	return nil
}

func (x *DataSourceInfo) GetCostAdditionalInfoKeys() []string {
	if x != nil {
		return x.CostAdditionalInfoKeys
	}
	return nil
}

func (x *DataSourceInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *DataSourceInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *DataSourceInfo) GetLastSynchronizedAt() string {
	if x != nil {
		return x.LastSynchronizedAt
	}
	return ""
}

//	{
//	       "results": [
//	           {
//	               "data_source_id": "ds-fcba92ca73b1",
//	               "name": "AWS HyperBilling Data Source",
//	               "state": "ENABLED",
//	               "data_source_type": "EXTERNAL",
//	               "plugin_info": {
//	                   "plugin_id": "plugin-aws-hyperbilling-cost-datasource",
//	                   "version": "1.0.4",
//	                   "options": {},
//	                   "metadata": {
//	                       "data_source_rules": [
//	                           {
//	                               "name": "match_service_account",
//	                               "conditions": [],
//	                               "actions": {
//	                                   "match_service_account": {
//	                                       "source": "account",
//	                                       "target": "data.account_id"
//	                                   }
//	                               },
//	                               "conditions_policy": "ALWAYS",
//	                               "tags": {},
//	                               "options": {
//	                                   "stop_processing": true
//	                               }
//	                           }
//	                       ]
//	                   },
//	                   "secret_id": "secret-dca385e85a27",
//	                   "upgrade_mode": "AUTO"
//	               },
//	               "template": {},
//	               "tags": {
//	                   "a": "b"
//	               },
//	               "cost_tag_keys": [
//	                   "Name",
//	                   "Environment",
//	                   "Role",
//	                   "Service"
//	               ],
//	               "cost_additional_info_keys": [
//	                   "raw_usage_type"
//	               ],
//	               "domain_id": "domain-58010aa2e451",
//	               "created_at": "2022-03-30T02:21:28.756Z",
//	               "last_synchronized_at": "2022-07-17T16:00:05.077Z"
//	           },
//	           {
//	               "data_source_id": "ds-c96609f5afeb",
//	               "name": "MZC HyperBilling Data Source",
//	               "state": "ENABLED",
//	               "data_source_type": "EXTERNAL",
//	               "plugin_info": {
//	                   "plugin_id": "plugin-mzc-hyperbilling-cost-datasource",
//	                   "version": "1.0.3",
//	                   "options": {},
//	                   "metadata": {
//	                       "data_source_rules": [
//	                           {
//	                               "conditions": [],
//	                               "options": {
//	                                   "stop_processing": true
//	                               },
//	                               "conditions_policy": "ALWAYS",
//	                               "name": "match_service_account",
//	                               "tags": {},
//	                               "actions": {
//	                                   "match_service_account": {
//	                                       "source": "account",
//	                                       "target": "data.project_id"
//	                                   }
//	                               }
//	                           }
//	                       ]
//	                   },
//	                   "secret_id": "secret-354d142229e5",
//	                   "upgrade_mode": "AUTO"
//	               },
//	               "template": {},
//	               "tags": {},
//	               "cost_tag_keys": [],
//	               "cost_additional_info_keys": [],
//	               "domain_id": "domain-58010aa2e451",
//	               "created_at": "2022-04-13T05:34:54.223Z",
//	               "last_synchronized_at": "2022-07-17T16:00:08.254Z"
//	           }
//	       ],
//	       "total_count": 2
//	}
type DataSourcesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results    []*DataSourceInfo `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	TotalCount int32             `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *DataSourcesInfo) Reset() {
	*x = DataSourcesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourcesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourcesInfo) ProtoMessage() {}

func (x *DataSourcesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourcesInfo.ProtoReflect.Descriptor instead.
func (*DataSourcesInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_data_source_proto_rawDescGZIP(), []int{9}
}

func (x *DataSourcesInfo) GetResults() []*DataSourceInfo {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *DataSourcesInfo) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type DataSourceStatQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query    *v1.StatisticsQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	DomainId string              `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *DataSourceStatQuery) Reset() {
	*x = DataSourceStatQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceStatQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceStatQuery) ProtoMessage() {}

func (x *DataSourceStatQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceStatQuery.ProtoReflect.Descriptor instead.
func (*DataSourceStatQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_data_source_proto_rawDescGZIP(), []int{10}
}

func (x *DataSourceStatQuery) GetQuery() *v1.StatisticsQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *DataSourceStatQuery) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

var File_spaceone_api_cost_analysis_v1_data_source_proto protoreflect.FileDescriptor

var file_spaceone_api_cost_analysis_v1_data_source_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x03, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x38, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x58, 0x0a, 0x0c, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f,
	0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x2d, 0x0a, 0x0b, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x02, 0x22, 0xbe, 0x03, 0x0a, 0x19, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x71, 0x0a, 0x10,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x08, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x4a, 0x0a, 0x0b, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x22, 0xd2, 0x01, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x33, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x22, 0xcb, 0x02, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6b, 0x0a, 0x0c, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22,
	0x2d, 0x0a, 0x0b, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x02, 0x22, 0x9a,
	0x01, 0x0a, 0x15, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x6e, 0x6f, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x11, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x6e,
	0x6c, 0x79, 0x22, 0xeb, 0x02, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x67, 0x0a, 0x10, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x0e, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02,
	0x22, 0x82, 0x06, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74,
	0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x66, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0b,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x39,
	0x0a, 0x19, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x16, 0x63, 0x6f, 0x73, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x74, 0x22, 0x32, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x22, 0x38, 0x0a, 0x0e, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x10, 0x02, 0x22, 0x7b, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x6f, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x32, 0xba, 0x0d, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0xa6, 0x01, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x38, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2d, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0xa0, 0x01, 0x0a, 0x06,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x36, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2d,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0xb4,
	0x01, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x12, 0x3c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x36, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2d,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x91, 0x01, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x30, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f,
	0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x63,
	0x6f, 0x73, 0x74, 0x2d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x9a, 0x01, 0x0a, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a,
	0x22, 0x24, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x30, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25,
	0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x0a, 0x64, 0x65, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x33,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x63, 0x6f, 0x73, 0x74,
	0x2d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x64, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x93, 0x01, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x34, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74,
	0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2d, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x97, 0x01, 0x0a, 0x03, 0x67, 0x65,
	0x74, 0x12, 0x33, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a,
	0x22, 0x21, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f,
	0x67, 0x65, 0x74, 0x12, 0x95, 0x01, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74,
	0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x2e, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74,
	0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2d, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x04,
	0x73, 0x74, 0x61, 0x74, 0x12, 0x32, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x63,
	0x6f, 0x73, 0x74, 0x2d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x42, 0x44, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x72, 0x65, 0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spaceone_api_cost_analysis_v1_data_source_proto_rawDescOnce sync.Once
	file_spaceone_api_cost_analysis_v1_data_source_proto_rawDescData = file_spaceone_api_cost_analysis_v1_data_source_proto_rawDesc
)

func file_spaceone_api_cost_analysis_v1_data_source_proto_rawDescGZIP() []byte {
	file_spaceone_api_cost_analysis_v1_data_source_proto_rawDescOnce.Do(func() {
		file_spaceone_api_cost_analysis_v1_data_source_proto_rawDescData = protoimpl.X.CompressGZIP(file_spaceone_api_cost_analysis_v1_data_source_proto_rawDescData)
	})
	return file_spaceone_api_cost_analysis_v1_data_source_proto_rawDescData
}

var file_spaceone_api_cost_analysis_v1_data_source_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_spaceone_api_cost_analysis_v1_data_source_proto_goTypes = []interface{}{
	(PluginInfo_UpgradeMode)(0),                    // 0: spaceone.api.cost_analysis.v1.PluginInfo.UpgradeMode
	(RegisterDataSourceRequest_DataSourceType)(0),  // 1: spaceone.api.cost_analysis.v1.RegisterDataSourceRequest.DataSourceType
	(UpdateDataSourcePluginRequest_UpgradeMode)(0), // 2: spaceone.api.cost_analysis.v1.UpdateDataSourcePluginRequest.UpgradeMode
	(DataSourceQuery_DataSourceType)(0),            // 3: spaceone.api.cost_analysis.v1.DataSourceQuery.DataSourceType
	(DataSourceInfo_State)(0),                      // 4: spaceone.api.cost_analysis.v1.DataSourceInfo.State
	(DataSourceInfo_DataSourceType)(0),             // 5: spaceone.api.cost_analysis.v1.DataSourceInfo.DataSourceType
	(*PluginInfo)(nil),                             // 6: spaceone.api.cost_analysis.v1.PluginInfo
	(*RegisterDataSourceRequest)(nil),              // 7: spaceone.api.cost_analysis.v1.RegisterDataSourceRequest
	(*UpdateDataSourceRequest)(nil),                // 8: spaceone.api.cost_analysis.v1.UpdateDataSourceRequest
	(*UpdateDataSourcePluginRequest)(nil),          // 9: spaceone.api.cost_analysis.v1.UpdateDataSourcePluginRequest
	(*SyncDataSourceRequest)(nil),                  // 10: spaceone.api.cost_analysis.v1.SyncDataSourceRequest
	(*DataSourceRequest)(nil),                      // 11: spaceone.api.cost_analysis.v1.DataSourceRequest
	(*GetDataSourceRequest)(nil),                   // 12: spaceone.api.cost_analysis.v1.GetDataSourceRequest
	(*DataSourceQuery)(nil),                        // 13: spaceone.api.cost_analysis.v1.DataSourceQuery
	(*DataSourceInfo)(nil),                         // 14: spaceone.api.cost_analysis.v1.DataSourceInfo
	(*DataSourcesInfo)(nil),                        // 15: spaceone.api.cost_analysis.v1.DataSourcesInfo
	(*DataSourceStatQuery)(nil),                    // 16: spaceone.api.cost_analysis.v1.DataSourceStatQuery
	(*_struct.Struct)(nil),                         // 17: google.protobuf.Struct
	(*v1.Query)(nil),                               // 18: spaceone.api.core.v1.Query
	(*v1.StatisticsQuery)(nil),                     // 19: spaceone.api.core.v1.StatisticsQuery
	(*empty.Empty)(nil),                            // 20: google.protobuf.Empty
	(*JobInfo)(nil),                                // 21: spaceone.api.cost_analysis.v1.JobInfo
}
var file_spaceone_api_cost_analysis_v1_data_source_proto_depIdxs = []int32{
	17, // 0: spaceone.api.cost_analysis.v1.PluginInfo.options:type_name -> google.protobuf.Struct
	17, // 1: spaceone.api.cost_analysis.v1.PluginInfo.metadata:type_name -> google.protobuf.Struct
	17, // 2: spaceone.api.cost_analysis.v1.PluginInfo.secret_data:type_name -> google.protobuf.Struct
	0,  // 3: spaceone.api.cost_analysis.v1.PluginInfo.upgrade_mode:type_name -> spaceone.api.cost_analysis.v1.PluginInfo.UpgradeMode
	1,  // 4: spaceone.api.cost_analysis.v1.RegisterDataSourceRequest.data_source_type:type_name -> spaceone.api.cost_analysis.v1.RegisterDataSourceRequest.DataSourceType
	17, // 5: spaceone.api.cost_analysis.v1.RegisterDataSourceRequest.template:type_name -> google.protobuf.Struct
	6,  // 6: spaceone.api.cost_analysis.v1.RegisterDataSourceRequest.plugin_info:type_name -> spaceone.api.cost_analysis.v1.PluginInfo
	17, // 7: spaceone.api.cost_analysis.v1.RegisterDataSourceRequest.tags:type_name -> google.protobuf.Struct
	17, // 8: spaceone.api.cost_analysis.v1.UpdateDataSourceRequest.template:type_name -> google.protobuf.Struct
	17, // 9: spaceone.api.cost_analysis.v1.UpdateDataSourceRequest.tags:type_name -> google.protobuf.Struct
	17, // 10: spaceone.api.cost_analysis.v1.UpdateDataSourcePluginRequest.options:type_name -> google.protobuf.Struct
	2,  // 11: spaceone.api.cost_analysis.v1.UpdateDataSourcePluginRequest.upgrade_mode:type_name -> spaceone.api.cost_analysis.v1.UpdateDataSourcePluginRequest.UpgradeMode
	18, // 12: spaceone.api.cost_analysis.v1.DataSourceQuery.query:type_name -> spaceone.api.core.v1.Query
	3,  // 13: spaceone.api.cost_analysis.v1.DataSourceQuery.data_source_type:type_name -> spaceone.api.cost_analysis.v1.DataSourceQuery.DataSourceType
	4,  // 14: spaceone.api.cost_analysis.v1.DataSourceInfo.state:type_name -> spaceone.api.cost_analysis.v1.DataSourceInfo.State
	5,  // 15: spaceone.api.cost_analysis.v1.DataSourceInfo.data_source_type:type_name -> spaceone.api.cost_analysis.v1.DataSourceInfo.DataSourceType
	6,  // 16: spaceone.api.cost_analysis.v1.DataSourceInfo.plugin_info:type_name -> spaceone.api.cost_analysis.v1.PluginInfo
	17, // 17: spaceone.api.cost_analysis.v1.DataSourceInfo.template:type_name -> google.protobuf.Struct
	17, // 18: spaceone.api.cost_analysis.v1.DataSourceInfo.tags:type_name -> google.protobuf.Struct
	14, // 19: spaceone.api.cost_analysis.v1.DataSourcesInfo.results:type_name -> spaceone.api.cost_analysis.v1.DataSourceInfo
	19, // 20: spaceone.api.cost_analysis.v1.DataSourceStatQuery.query:type_name -> spaceone.api.core.v1.StatisticsQuery
	7,  // 21: spaceone.api.cost_analysis.v1.DataSource.register:input_type -> spaceone.api.cost_analysis.v1.RegisterDataSourceRequest
	8,  // 22: spaceone.api.cost_analysis.v1.DataSource.update:input_type -> spaceone.api.cost_analysis.v1.UpdateDataSourceRequest
	9,  // 23: spaceone.api.cost_analysis.v1.DataSource.update_plugin:input_type -> spaceone.api.cost_analysis.v1.UpdateDataSourcePluginRequest
	11, // 24: spaceone.api.cost_analysis.v1.DataSource.verify_plugin:input_type -> spaceone.api.cost_analysis.v1.DataSourceRequest
	11, // 25: spaceone.api.cost_analysis.v1.DataSource.enable:input_type -> spaceone.api.cost_analysis.v1.DataSourceRequest
	11, // 26: spaceone.api.cost_analysis.v1.DataSource.disable:input_type -> spaceone.api.cost_analysis.v1.DataSourceRequest
	11, // 27: spaceone.api.cost_analysis.v1.DataSource.deregister:input_type -> spaceone.api.cost_analysis.v1.DataSourceRequest
	10, // 28: spaceone.api.cost_analysis.v1.DataSource.sync:input_type -> spaceone.api.cost_analysis.v1.SyncDataSourceRequest
	12, // 29: spaceone.api.cost_analysis.v1.DataSource.get:input_type -> spaceone.api.cost_analysis.v1.GetDataSourceRequest
	13, // 30: spaceone.api.cost_analysis.v1.DataSource.list:input_type -> spaceone.api.cost_analysis.v1.DataSourceQuery
	16, // 31: spaceone.api.cost_analysis.v1.DataSource.stat:input_type -> spaceone.api.cost_analysis.v1.DataSourceStatQuery
	14, // 32: spaceone.api.cost_analysis.v1.DataSource.register:output_type -> spaceone.api.cost_analysis.v1.DataSourceInfo
	14, // 33: spaceone.api.cost_analysis.v1.DataSource.update:output_type -> spaceone.api.cost_analysis.v1.DataSourceInfo
	14, // 34: spaceone.api.cost_analysis.v1.DataSource.update_plugin:output_type -> spaceone.api.cost_analysis.v1.DataSourceInfo
	20, // 35: spaceone.api.cost_analysis.v1.DataSource.verify_plugin:output_type -> google.protobuf.Empty
	14, // 36: spaceone.api.cost_analysis.v1.DataSource.enable:output_type -> spaceone.api.cost_analysis.v1.DataSourceInfo
	14, // 37: spaceone.api.cost_analysis.v1.DataSource.disable:output_type -> spaceone.api.cost_analysis.v1.DataSourceInfo
	20, // 38: spaceone.api.cost_analysis.v1.DataSource.deregister:output_type -> google.protobuf.Empty
	21, // 39: spaceone.api.cost_analysis.v1.DataSource.sync:output_type -> spaceone.api.cost_analysis.v1.JobInfo
	14, // 40: spaceone.api.cost_analysis.v1.DataSource.get:output_type -> spaceone.api.cost_analysis.v1.DataSourceInfo
	15, // 41: spaceone.api.cost_analysis.v1.DataSource.list:output_type -> spaceone.api.cost_analysis.v1.DataSourcesInfo
	17, // 42: spaceone.api.cost_analysis.v1.DataSource.stat:output_type -> google.protobuf.Struct
	32, // [32:43] is the sub-list for method output_type
	21, // [21:32] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_spaceone_api_cost_analysis_v1_data_source_proto_init() }
func file_spaceone_api_cost_analysis_v1_data_source_proto_init() {
	if File_spaceone_api_cost_analysis_v1_data_source_proto != nil {
		return
	}
	file_spaceone_api_cost_analysis_v1_job_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterDataSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDataSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDataSourcePluginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncDataSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourcesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceStatQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spaceone_api_cost_analysis_v1_data_source_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spaceone_api_cost_analysis_v1_data_source_proto_goTypes,
		DependencyIndexes: file_spaceone_api_cost_analysis_v1_data_source_proto_depIdxs,
		EnumInfos:         file_spaceone_api_cost_analysis_v1_data_source_proto_enumTypes,
		MessageInfos:      file_spaceone_api_cost_analysis_v1_data_source_proto_msgTypes,
	}.Build()
	File_spaceone_api_cost_analysis_v1_data_source_proto = out.File
	file_spaceone_api_cost_analysis_v1_data_source_proto_rawDesc = nil
	file_spaceone_api_cost_analysis_v1_data_source_proto_goTypes = nil
	file_spaceone_api_cost_analysis_v1_data_source_proto_depIdxs = nil
}
