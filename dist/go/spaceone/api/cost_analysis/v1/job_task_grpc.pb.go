// A JobTask is a task unit subdividing a Job. The division criteria are specified in each DataSource plugin.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: spaceone/api/cost_analysis/v1/job_task.proto

package v1

import (
	context "context"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JobTask_Get_FullMethodName  = "/spaceone.api.cost_analysis.v1.JobTask/get"
	JobTask_List_FullMethodName = "/spaceone.api.cost_analysis.v1.JobTask/list"
	JobTask_Stat_FullMethodName = "/spaceone.api.cost_analysis.v1.JobTask/stat"
)

// JobTaskClient is the client API for JobTask service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobTaskClient interface {
	// Gets a specific JobTask. Prints detailed information about the JobTask, including the relevant resources: DataSource and Job. The criteria used for dividing a Job into JobTasks can be found in the DataSource used, but the total count of divided JobTasks can be found by this method.
	Get(ctx context.Context, in *GetJobTaskRequest, opts ...grpc.CallOption) (*JobTaskInfo, error)
	// Gets a list of all JobTasks. You can use a query to get a filtered list of JobTasks.
	List(ctx context.Context, in *JobTaskQuery, opts ...grpc.CallOption) (*JobTasksInfo, error)
	Stat(ctx context.Context, in *JobTaskStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type jobTaskClient struct {
	cc grpc.ClientConnInterface
}

func NewJobTaskClient(cc grpc.ClientConnInterface) JobTaskClient {
	return &jobTaskClient{cc}
}

func (c *jobTaskClient) Get(ctx context.Context, in *GetJobTaskRequest, opts ...grpc.CallOption) (*JobTaskInfo, error) {
	out := new(JobTaskInfo)
	err := c.cc.Invoke(ctx, JobTask_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobTaskClient) List(ctx context.Context, in *JobTaskQuery, opts ...grpc.CallOption) (*JobTasksInfo, error) {
	out := new(JobTasksInfo)
	err := c.cc.Invoke(ctx, JobTask_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobTaskClient) Stat(ctx context.Context, in *JobTaskStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, JobTask_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobTaskServer is the server API for JobTask service.
// All implementations must embed UnimplementedJobTaskServer
// for forward compatibility
type JobTaskServer interface {
	// Gets a specific JobTask. Prints detailed information about the JobTask, including the relevant resources: DataSource and Job. The criteria used for dividing a Job into JobTasks can be found in the DataSource used, but the total count of divided JobTasks can be found by this method.
	Get(context.Context, *GetJobTaskRequest) (*JobTaskInfo, error)
	// Gets a list of all JobTasks. You can use a query to get a filtered list of JobTasks.
	List(context.Context, *JobTaskQuery) (*JobTasksInfo, error)
	Stat(context.Context, *JobTaskStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedJobTaskServer()
}

// UnimplementedJobTaskServer must be embedded to have forward compatible implementations.
type UnimplementedJobTaskServer struct {
}

func (UnimplementedJobTaskServer) Get(context.Context, *GetJobTaskRequest) (*JobTaskInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedJobTaskServer) List(context.Context, *JobTaskQuery) (*JobTasksInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedJobTaskServer) Stat(context.Context, *JobTaskStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedJobTaskServer) mustEmbedUnimplementedJobTaskServer() {}

// UnsafeJobTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobTaskServer will
// result in compilation errors.
type UnsafeJobTaskServer interface {
	mustEmbedUnimplementedJobTaskServer()
}

func RegisterJobTaskServer(s grpc.ServiceRegistrar, srv JobTaskServer) {
	s.RegisterService(&JobTask_ServiceDesc, srv)
}

func _JobTask_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobTaskServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobTask_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobTaskServer).Get(ctx, req.(*GetJobTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobTask_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobTaskQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobTaskServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobTask_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobTaskServer).List(ctx, req.(*JobTaskQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobTask_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobTaskStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobTaskServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobTask_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobTaskServer).Stat(ctx, req.(*JobTaskStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// JobTask_ServiceDesc is the grpc.ServiceDesc for JobTask service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobTask_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.cost_analysis.v1.JobTask",
	HandlerType: (*JobTaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get",
			Handler:    _JobTask_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _JobTask_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _JobTask_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/cost_analysis/v1/job_task.proto",
}
