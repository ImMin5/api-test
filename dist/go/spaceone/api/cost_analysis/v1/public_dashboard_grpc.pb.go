// A PublicDashboard is a cost data dashboard provided to all users by default.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: spaceone/api/cost_analysis/v1/public_dashboard.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PublicDashboard_Create_FullMethodName = "/spaceone.api.cost_analysis.v1.PublicDashboard/create"
	PublicDashboard_Update_FullMethodName = "/spaceone.api.cost_analysis.v1.PublicDashboard/update"
	PublicDashboard_Delete_FullMethodName = "/spaceone.api.cost_analysis.v1.PublicDashboard/delete"
	PublicDashboard_Get_FullMethodName    = "/spaceone.api.cost_analysis.v1.PublicDashboard/get"
	PublicDashboard_List_FullMethodName   = "/spaceone.api.cost_analysis.v1.PublicDashboard/list"
	PublicDashboard_Stat_FullMethodName   = "/spaceone.api.cost_analysis.v1.PublicDashboard/stat"
)

// PublicDashboardClient is the client API for PublicDashboard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicDashboardClient interface {
	// Creates a new PublicDashboard. This method is used for creating the default dashboard . `Admin` type Users can use the method to add a new dashboard with customized widgets.
	Create(ctx context.Context, in *CreatePublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardInfo, error)
	// Updates a specific PublicDashboard. Changes the widgets of the PublicDashboard with default widgets and customized widgets. Only `Admin` type Users can use the method.
	Update(ctx context.Context, in *UpdatePublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardInfo, error)
	// Deletes a specific PublicDashboard. You must specify the `public_dashboard_id` of the PublicDashboard to delete.
	Delete(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Gets a specific PublicDashboard. Prints detailed information about the PublicDashboard, including `custom_layouts` and `period_type`.
	Get(ctx context.Context, in *GetPublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardInfo, error)
	// Gets a list of all PublicDashboards. You can use a query to get a filtered list of PublicDashboards.
	List(ctx context.Context, in *PublicDashboardQuery, opts ...grpc.CallOption) (*PublicDashboardsInfo, error)
	Stat(ctx context.Context, in *PublicDashboardStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type publicDashboardClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicDashboardClient(cc grpc.ClientConnInterface) PublicDashboardClient {
	return &publicDashboardClient{cc}
}

func (c *publicDashboardClient) Create(ctx context.Context, in *CreatePublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardInfo, error) {
	out := new(PublicDashboardInfo)
	err := c.cc.Invoke(ctx, PublicDashboard_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicDashboardClient) Update(ctx context.Context, in *UpdatePublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardInfo, error) {
	out := new(PublicDashboardInfo)
	err := c.cc.Invoke(ctx, PublicDashboard_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicDashboardClient) Delete(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, PublicDashboard_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicDashboardClient) Get(ctx context.Context, in *GetPublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardInfo, error) {
	out := new(PublicDashboardInfo)
	err := c.cc.Invoke(ctx, PublicDashboard_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicDashboardClient) List(ctx context.Context, in *PublicDashboardQuery, opts ...grpc.CallOption) (*PublicDashboardsInfo, error) {
	out := new(PublicDashboardsInfo)
	err := c.cc.Invoke(ctx, PublicDashboard_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicDashboardClient) Stat(ctx context.Context, in *PublicDashboardStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, PublicDashboard_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicDashboardServer is the server API for PublicDashboard service.
// All implementations must embed UnimplementedPublicDashboardServer
// for forward compatibility
type PublicDashboardServer interface {
	// Creates a new PublicDashboard. This method is used for creating the default dashboard . `Admin` type Users can use the method to add a new dashboard with customized widgets.
	Create(context.Context, *CreatePublicDashboardRequest) (*PublicDashboardInfo, error)
	// Updates a specific PublicDashboard. Changes the widgets of the PublicDashboard with default widgets and customized widgets. Only `Admin` type Users can use the method.
	Update(context.Context, *UpdatePublicDashboardRequest) (*PublicDashboardInfo, error)
	// Deletes a specific PublicDashboard. You must specify the `public_dashboard_id` of the PublicDashboard to delete.
	Delete(context.Context, *PublicDashboardRequest) (*empty.Empty, error)
	// Gets a specific PublicDashboard. Prints detailed information about the PublicDashboard, including `custom_layouts` and `period_type`.
	Get(context.Context, *GetPublicDashboardRequest) (*PublicDashboardInfo, error)
	// Gets a list of all PublicDashboards. You can use a query to get a filtered list of PublicDashboards.
	List(context.Context, *PublicDashboardQuery) (*PublicDashboardsInfo, error)
	Stat(context.Context, *PublicDashboardStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedPublicDashboardServer()
}

// UnimplementedPublicDashboardServer must be embedded to have forward compatible implementations.
type UnimplementedPublicDashboardServer struct {
}

func (UnimplementedPublicDashboardServer) Create(context.Context, *CreatePublicDashboardRequest) (*PublicDashboardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPublicDashboardServer) Update(context.Context, *UpdatePublicDashboardRequest) (*PublicDashboardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPublicDashboardServer) Delete(context.Context, *PublicDashboardRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPublicDashboardServer) Get(context.Context, *GetPublicDashboardRequest) (*PublicDashboardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPublicDashboardServer) List(context.Context, *PublicDashboardQuery) (*PublicDashboardsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPublicDashboardServer) Stat(context.Context, *PublicDashboardStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedPublicDashboardServer) mustEmbedUnimplementedPublicDashboardServer() {}

// UnsafePublicDashboardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicDashboardServer will
// result in compilation errors.
type UnsafePublicDashboardServer interface {
	mustEmbedUnimplementedPublicDashboardServer()
}

func RegisterPublicDashboardServer(s grpc.ServiceRegistrar, srv PublicDashboardServer) {
	s.RegisterService(&PublicDashboard_ServiceDesc, srv)
}

func _PublicDashboard_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePublicDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicDashboardServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicDashboard_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicDashboardServer).Create(ctx, req.(*CreatePublicDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicDashboard_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePublicDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicDashboardServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicDashboard_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicDashboardServer).Update(ctx, req.(*UpdatePublicDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicDashboard_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicDashboardServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicDashboard_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicDashboardServer).Delete(ctx, req.(*PublicDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicDashboard_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicDashboardServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicDashboard_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicDashboardServer).Get(ctx, req.(*GetPublicDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicDashboard_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDashboardQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicDashboardServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicDashboard_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicDashboardServer).List(ctx, req.(*PublicDashboardQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicDashboard_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDashboardStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicDashboardServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicDashboard_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicDashboardServer).Stat(ctx, req.(*PublicDashboardStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicDashboard_ServiceDesc is the grpc.ServiceDesc for PublicDashboard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicDashboard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.cost_analysis.v1.PublicDashboard",
	HandlerType: (*PublicDashboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _PublicDashboard_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _PublicDashboard_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _PublicDashboard_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _PublicDashboard_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _PublicDashboard_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _PublicDashboard_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/cost_analysis/v1/public_dashboard.proto",
}
