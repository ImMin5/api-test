// A UserDashboard is a cost data dashboard customized with a combination of widgets a User want.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: spaceone/api/cost_analysis/v1/user_dashboard.proto

package v1

import (
	v1 "github.com/cloudforet-io/api/dist/go/spaceone/api/core/v1"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateUserDashboardRequest_PeriodType int32

const (
	CreateUserDashboardRequest_NONE  CreateUserDashboardRequest_PeriodType = 0
	CreateUserDashboardRequest_AUTO  CreateUserDashboardRequest_PeriodType = 1
	CreateUserDashboardRequest_FIXED CreateUserDashboardRequest_PeriodType = 2
)

// Enum value maps for CreateUserDashboardRequest_PeriodType.
var (
	CreateUserDashboardRequest_PeriodType_name = map[int32]string{
		0: "NONE",
		1: "AUTO",
		2: "FIXED",
	}
	CreateUserDashboardRequest_PeriodType_value = map[string]int32{
		"NONE":  0,
		"AUTO":  1,
		"FIXED": 2,
	}
)

func (x CreateUserDashboardRequest_PeriodType) Enum() *CreateUserDashboardRequest_PeriodType {
	p := new(CreateUserDashboardRequest_PeriodType)
	*p = x
	return p
}

func (x CreateUserDashboardRequest_PeriodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateUserDashboardRequest_PeriodType) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_cost_analysis_v1_user_dashboard_proto_enumTypes[0].Descriptor()
}

func (CreateUserDashboardRequest_PeriodType) Type() protoreflect.EnumType {
	return &file_spaceone_api_cost_analysis_v1_user_dashboard_proto_enumTypes[0]
}

func (x CreateUserDashboardRequest_PeriodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateUserDashboardRequest_PeriodType.Descriptor instead.
func (CreateUserDashboardRequest_PeriodType) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_user_dashboard_proto_rawDescGZIP(), []int{1, 0}
}

type UpdateUserDashboardRequest_PeriodType int32

const (
	UpdateUserDashboardRequest_NONE  UpdateUserDashboardRequest_PeriodType = 0
	UpdateUserDashboardRequest_AUTO  UpdateUserDashboardRequest_PeriodType = 1
	UpdateUserDashboardRequest_FIXED UpdateUserDashboardRequest_PeriodType = 2
)

// Enum value maps for UpdateUserDashboardRequest_PeriodType.
var (
	UpdateUserDashboardRequest_PeriodType_name = map[int32]string{
		0: "NONE",
		1: "AUTO",
		2: "FIXED",
	}
	UpdateUserDashboardRequest_PeriodType_value = map[string]int32{
		"NONE":  0,
		"AUTO":  1,
		"FIXED": 2,
	}
)

func (x UpdateUserDashboardRequest_PeriodType) Enum() *UpdateUserDashboardRequest_PeriodType {
	p := new(UpdateUserDashboardRequest_PeriodType)
	*p = x
	return p
}

func (x UpdateUserDashboardRequest_PeriodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateUserDashboardRequest_PeriodType) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_cost_analysis_v1_user_dashboard_proto_enumTypes[1].Descriptor()
}

func (UpdateUserDashboardRequest_PeriodType) Type() protoreflect.EnumType {
	return &file_spaceone_api_cost_analysis_v1_user_dashboard_proto_enumTypes[1]
}

func (x UpdateUserDashboardRequest_PeriodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateUserDashboardRequest_PeriodType.Descriptor instead.
func (UpdateUserDashboardRequest_PeriodType) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_user_dashboard_proto_rawDescGZIP(), []int{2, 0}
}

type UserDashboardQuery_PeriodType int32

const (
	UserDashboardQuery_NONE  UserDashboardQuery_PeriodType = 0
	UserDashboardQuery_AUTO  UserDashboardQuery_PeriodType = 1
	UserDashboardQuery_FIXED UserDashboardQuery_PeriodType = 2
)

// Enum value maps for UserDashboardQuery_PeriodType.
var (
	UserDashboardQuery_PeriodType_name = map[int32]string{
		0: "NONE",
		1: "AUTO",
		2: "FIXED",
	}
	UserDashboardQuery_PeriodType_value = map[string]int32{
		"NONE":  0,
		"AUTO":  1,
		"FIXED": 2,
	}
)

func (x UserDashboardQuery_PeriodType) Enum() *UserDashboardQuery_PeriodType {
	p := new(UserDashboardQuery_PeriodType)
	*p = x
	return p
}

func (x UserDashboardQuery_PeriodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserDashboardQuery_PeriodType) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_cost_analysis_v1_user_dashboard_proto_enumTypes[2].Descriptor()
}

func (UserDashboardQuery_PeriodType) Type() protoreflect.EnumType {
	return &file_spaceone_api_cost_analysis_v1_user_dashboard_proto_enumTypes[2]
}

func (x UserDashboardQuery_PeriodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserDashboardQuery_PeriodType.Descriptor instead.
func (UserDashboardQuery_PeriodType) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_user_dashboard_proto_rawDescGZIP(), []int{5, 0}
}

type UserDashboardInfo_PeriodType int32

const (
	UserDashboardInfo_NONE  UserDashboardInfo_PeriodType = 0
	UserDashboardInfo_AUTO  UserDashboardInfo_PeriodType = 1
	UserDashboardInfo_FIXED UserDashboardInfo_PeriodType = 2
)

// Enum value maps for UserDashboardInfo_PeriodType.
var (
	UserDashboardInfo_PeriodType_name = map[int32]string{
		0: "NONE",
		1: "AUTO",
		2: "FIXED",
	}
	UserDashboardInfo_PeriodType_value = map[string]int32{
		"NONE":  0,
		"AUTO":  1,
		"FIXED": 2,
	}
)

func (x UserDashboardInfo_PeriodType) Enum() *UserDashboardInfo_PeriodType {
	p := new(UserDashboardInfo_PeriodType)
	*p = x
	return p
}

func (x UserDashboardInfo_PeriodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserDashboardInfo_PeriodType) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_cost_analysis_v1_user_dashboard_proto_enumTypes[3].Descriptor()
}

func (UserDashboardInfo_PeriodType) Type() protoreflect.EnumType {
	return &file_spaceone_api_cost_analysis_v1_user_dashboard_proto_enumTypes[3]
}

func (x UserDashboardInfo_PeriodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserDashboardInfo_PeriodType.Descriptor instead.
func (UserDashboardInfo_PeriodType) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_user_dashboard_proto_rawDescGZIP(), []int{6, 0}
}

type UserDashboardPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start string `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   string `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *UserDashboardPeriod) Reset() {
	*x = UserDashboardPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDashboardPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDashboardPeriod) ProtoMessage() {}

func (x *UserDashboardPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDashboardPeriod.ProtoReflect.Descriptor instead.
func (*UserDashboardPeriod) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_user_dashboard_proto_rawDescGZIP(), []int{0}
}

func (x *UserDashboardPeriod) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *UserDashboardPeriod) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

//	{
//	   "name": "Untitled Dashboard",
//	   "custom_layouts": [
//	       [
//	           {
//	               "name": "AWS Data-Transfer Cost Trend",
//	               "widget_id": "linegraph-lg-02",
//	               "options": {
//	                   "layout": 100.0,
//	                   "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_DATA_TRANSFER_COST_TREND_DESC",
//	                   "chart_type": "LINE",
//	                   "chart_img": "AWS_Data-Transfer_Cost_Trend"
//	               }
//	           }
//	       ],
//	       [
//	           {
//	               "options": {
//	                   "chart_type": "MAP",
//	                   "chart_img": "AWS_Data-Transfer_By_Region",
//	                   "layout": 100.0,
//	                   "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_DATA_TRANSFER_BY_REGION_DESC"
//	               },
//	               "name": "AWS Data-Transfer by Region",
//	               "widget_id": "map-lg-02"
//	           }
//	       ],
//	       [
//	           {
//	               "options": {
//	                   "group_by": "project_id",
//	                   "layout": 100.0,
//	                   "chart_type": "STACKED_COLUMN",
//	                   "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_CLOUDFRONT_COST_DESC",
//	                   "chart_img": "AWS_CloudFront_Cost"
//	               },
//	               "name": "AWS CloudFront Cost by Project",
//	               "widget_id": "stackedcol-lg-03"
//	           }
//	       ]
//	   ],
//	   "default_filter": {},
//	   "period_type": "AUTO"
//	}
type CreateUserDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	DefaultLayoutId string `protobuf:"bytes,2,opt,name=default_layout_id,json=defaultLayoutId,proto3" json:"default_layout_id,omitempty"`
	// +optional
	CustomLayouts *_struct.ListValue `protobuf:"bytes,3,opt,name=custom_layouts,json=customLayouts,proto3" json:"custom_layouts,omitempty"`
	// +optional
	DefaultFilter *_struct.Struct `protobuf:"bytes,4,opt,name=default_filter,json=defaultFilter,proto3" json:"default_filter,omitempty"`
	// +optional
	PeriodType CreateUserDashboardRequest_PeriodType `protobuf:"varint,5,opt,name=period_type,json=periodType,proto3,enum=spaceone.api.cost_analysis.v1.CreateUserDashboardRequest_PeriodType" json:"period_type,omitempty"`
	// +optional
	Period *UserDashboardPeriod `protobuf:"bytes,6,opt,name=period,proto3" json:"period,omitempty"`
	// +optional
	Tags     *_struct.Struct `protobuf:"bytes,7,opt,name=tags,proto3" json:"tags,omitempty"`
	DomainId string          `protobuf:"bytes,11,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *CreateUserDashboardRequest) Reset() {
	*x = CreateUserDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserDashboardRequest) ProtoMessage() {}

func (x *CreateUserDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserDashboardRequest.ProtoReflect.Descriptor instead.
func (*CreateUserDashboardRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_user_dashboard_proto_rawDescGZIP(), []int{1}
}

func (x *CreateUserDashboardRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateUserDashboardRequest) GetDefaultLayoutId() string {
	if x != nil {
		return x.DefaultLayoutId
	}
	return ""
}

func (x *CreateUserDashboardRequest) GetCustomLayouts() *_struct.ListValue {
	if x != nil {
		return x.CustomLayouts
	}
	return nil
}

func (x *CreateUserDashboardRequest) GetDefaultFilter() *_struct.Struct {
	if x != nil {
		return x.DefaultFilter
	}
	return nil
}

func (x *CreateUserDashboardRequest) GetPeriodType() CreateUserDashboardRequest_PeriodType {
	if x != nil {
		return x.PeriodType
	}
	return CreateUserDashboardRequest_NONE
}

func (x *CreateUserDashboardRequest) GetPeriod() *UserDashboardPeriod {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *CreateUserDashboardRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateUserDashboardRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

//	{
//	   "user_dashboard_id": "user-dash-bf3f5f5ffa03",
//	   "name": "Untitled Dashboard2",
//	   "custom_layouts": [
//	       [{
//	           "options": {
//	               "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_DATA_TRANSFER_COST_TREND_DESC",
//	               "chart_type": "LINE", "chart_img": "AWS_Data-Transfer_Cost_Trend", "layout": 100.0},
//	           "name": "AWS Data-Transfer Cost Trend",
//	           "widget_id": "linegraph-lg-02"}],
//	       [{
//	           "name": "AWS Data-Transfer by Region",
//	           "options": {
//	               "chart_type": "MAP",
//	               "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_DATA_TRANSFER_BY_REGION_DESC",
//	               "layout": 100.0,
//	               "chart_img": "AWS_Data-Transfer_By_Region"},
//	           "widget_id": "map-lg-02"}],
//	       [{
//	           "name": "AWS CloudFront Cost by Project",
//	           "widget_id": "stackedcol-lg-03",
//	           "options": {
//	               "layout": 100.0,
//	               "chart_img": "AWS_CloudFront_Cost",
//	               "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_CLOUDFRONT_COST_DESC",
//	               "chart_type": "STACKED_COLUMN",
//	               "group_by": "project_id"}
//	       }]
//	   ]
//	}
type UpdateUserDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserDashboardId string `protobuf:"bytes,1,opt,name=user_dashboard_id,json=userDashboardId,proto3" json:"user_dashboard_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	DefaultLayoutId string `protobuf:"bytes,3,opt,name=default_layout_id,json=defaultLayoutId,proto3" json:"default_layout_id,omitempty"`
	// +optional
	CustomLayouts *_struct.ListValue `protobuf:"bytes,4,opt,name=custom_layouts,json=customLayouts,proto3" json:"custom_layouts,omitempty"`
	// +optional
	DefaultFilter *_struct.Struct `protobuf:"bytes,5,opt,name=default_filter,json=defaultFilter,proto3" json:"default_filter,omitempty"`
	// +optional
	PeriodType UpdateUserDashboardRequest_PeriodType `protobuf:"varint,6,opt,name=period_type,json=periodType,proto3,enum=spaceone.api.cost_analysis.v1.UpdateUserDashboardRequest_PeriodType" json:"period_type,omitempty"`
	// +optional
	Period *UserDashboardPeriod `protobuf:"bytes,7,opt,name=period,proto3" json:"period,omitempty"`
	// +optional
	Tags     *_struct.Struct `protobuf:"bytes,8,opt,name=tags,proto3" json:"tags,omitempty"`
	DomainId string          `protobuf:"bytes,11,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *UpdateUserDashboardRequest) Reset() {
	*x = UpdateUserDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserDashboardRequest) ProtoMessage() {}

func (x *UpdateUserDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserDashboardRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserDashboardRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_user_dashboard_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateUserDashboardRequest) GetUserDashboardId() string {
	if x != nil {
		return x.UserDashboardId
	}
	return ""
}

func (x *UpdateUserDashboardRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateUserDashboardRequest) GetDefaultLayoutId() string {
	if x != nil {
		return x.DefaultLayoutId
	}
	return ""
}

func (x *UpdateUserDashboardRequest) GetCustomLayouts() *_struct.ListValue {
	if x != nil {
		return x.CustomLayouts
	}
	return nil
}

func (x *UpdateUserDashboardRequest) GetDefaultFilter() *_struct.Struct {
	if x != nil {
		return x.DefaultFilter
	}
	return nil
}

func (x *UpdateUserDashboardRequest) GetPeriodType() UpdateUserDashboardRequest_PeriodType {
	if x != nil {
		return x.PeriodType
	}
	return UpdateUserDashboardRequest_NONE
}

func (x *UpdateUserDashboardRequest) GetPeriod() *UserDashboardPeriod {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *UpdateUserDashboardRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateUserDashboardRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

//	{
//	   "user_dashboard_id": "user-dash-d1bd5d8cb6d7"
//	}
type UserDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserDashboardId string `protobuf:"bytes,1,opt,name=user_dashboard_id,json=userDashboardId,proto3" json:"user_dashboard_id,omitempty"`
	DomainId        string `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *UserDashboardRequest) Reset() {
	*x = UserDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDashboardRequest) ProtoMessage() {}

func (x *UserDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDashboardRequest.ProtoReflect.Descriptor instead.
func (*UserDashboardRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_user_dashboard_proto_rawDescGZIP(), []int{3}
}

func (x *UserDashboardRequest) GetUserDashboardId() string {
	if x != nil {
		return x.UserDashboardId
	}
	return ""
}

func (x *UserDashboardRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

//	{
//	   "user_dashboard_id": "user-dash-d1bd5d8cb6d7"
//	}
type GetUserDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserDashboardId string `protobuf:"bytes,1,opt,name=user_dashboard_id,json=userDashboardId,proto3" json:"user_dashboard_id,omitempty"`
	DomainId        string `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	// +optional
	Only []string `protobuf:"bytes,3,rep,name=only,proto3" json:"only,omitempty"`
}

func (x *GetUserDashboardRequest) Reset() {
	*x = GetUserDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserDashboardRequest) ProtoMessage() {}

func (x *GetUserDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserDashboardRequest.ProtoReflect.Descriptor instead.
func (*GetUserDashboardRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_user_dashboard_proto_rawDescGZIP(), []int{4}
}

func (x *GetUserDashboardRequest) GetUserDashboardId() string {
	if x != nil {
		return x.UserDashboardId
	}
	return ""
}

func (x *GetUserDashboardRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *GetUserDashboardRequest) GetOnly() []string {
	if x != nil {
		return x.Only
	}
	return nil
}

type UserDashboardQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// +optional
	Query *v1.Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// +optional
	UserDashboardId string `protobuf:"bytes,2,opt,name=user_dashboard_id,json=userDashboardId,proto3" json:"user_dashboard_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	PeriodType UserDashboardQuery_PeriodType `protobuf:"varint,4,opt,name=period_type,json=periodType,proto3,enum=spaceone.api.cost_analysis.v1.UserDashboardQuery_PeriodType" json:"period_type,omitempty"`
	// +optional
	UserId   string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DomainId string `protobuf:"bytes,11,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *UserDashboardQuery) Reset() {
	*x = UserDashboardQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDashboardQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDashboardQuery) ProtoMessage() {}

func (x *UserDashboardQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDashboardQuery.ProtoReflect.Descriptor instead.
func (*UserDashboardQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_user_dashboard_proto_rawDescGZIP(), []int{5}
}

func (x *UserDashboardQuery) GetQuery() *v1.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *UserDashboardQuery) GetUserDashboardId() string {
	if x != nil {
		return x.UserDashboardId
	}
	return ""
}

func (x *UserDashboardQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserDashboardQuery) GetPeriodType() UserDashboardQuery_PeriodType {
	if x != nil {
		return x.PeriodType
	}
	return UserDashboardQuery_NONE
}

func (x *UserDashboardQuery) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserDashboardQuery) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

//	{
//	   "user_dashboard_id": "user-dash-bf3f5f5ffa03",
//	   "name": "Untitled Dashboard",
//	   "custom_layouts": [
//	       [
//	           {
//	               "options": {
//	                   "chart_type": "LINE",
//	                   "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_DATA_TRANSFER_COST_TREND_DESC",
//	                   "layout": 100.0,
//	                   "chart_img": "AWS_Data-Transfer_Cost_Trend"
//	               },
//	               "widget_id": "linegraph-lg-02",
//	               "name": "AWS Data-Transfer Cost Trend"
//	           }
//	       ],
//	       [
//	           {
//	               "name": "AWS Data-Transfer by Region",
//	               "widget_id": "map-lg-02",
//	               "options": {
//	                   "chart_img": "AWS_Data-Transfer_By_Region",
//	                   "chart_type": "MAP",
//	                   "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_DATA_TRANSFER_BY_REGION_DESC",
//	                   "layout": 100.0
//	               }
//	           }
//	       ],
//	       [
//	           {
//	               "widget_id": "stackedcol-lg-03",
//	               "name": "AWS CloudFront Cost by Project",
//	               "options": {
//	                   "layout": 100.0,
//	                   "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_CLOUDFRONT_COST_DESC",
//	                   "chart_img": "AWS_CloudFront_Cost",
//	                   "group_by": "project_id",
//	                   "chart_type": "STACKED_COLUMN"
//	               }
//	           }
//	       ]
//	   ],
//	   "default_filter": {},
//	   "period_type": "AUTO",
//	   "tags": {},
//	   "user_id": "seolmin@mz.co.kr",
//	   "domain_id": "domain-58010aa2e451",
//	   "created_at": "2022-07-19T05:58:52.065Z",
//	   "updated_at": "2022-07-19T05:58:52.065Z"
//	}
type UserDashboardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserDashboardId string                       `protobuf:"bytes,1,opt,name=user_dashboard_id,json=userDashboardId,proto3" json:"user_dashboard_id,omitempty"`
	Name            string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DefaultLayoutId string                       `protobuf:"bytes,3,opt,name=default_layout_id,json=defaultLayoutId,proto3" json:"default_layout_id,omitempty"`
	CustomLayouts   *_struct.ListValue           `protobuf:"bytes,4,opt,name=custom_layouts,json=customLayouts,proto3" json:"custom_layouts,omitempty"`
	DefaultFilter   *_struct.Struct              `protobuf:"bytes,5,opt,name=default_filter,json=defaultFilter,proto3" json:"default_filter,omitempty"`
	PeriodType      UserDashboardInfo_PeriodType `protobuf:"varint,6,opt,name=period_type,json=periodType,proto3,enum=spaceone.api.cost_analysis.v1.UserDashboardInfo_PeriodType" json:"period_type,omitempty"`
	Period          *UserDashboardPeriod         `protobuf:"bytes,7,opt,name=period,proto3" json:"period,omitempty"`
	Tags            *_struct.Struct              `protobuf:"bytes,8,opt,name=tags,proto3" json:"tags,omitempty"`
	UserId          string                       `protobuf:"bytes,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DomainId        string                       `protobuf:"bytes,12,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	CreatedAt       string                       `protobuf:"bytes,21,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       string                       `protobuf:"bytes,22,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *UserDashboardInfo) Reset() {
	*x = UserDashboardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDashboardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDashboardInfo) ProtoMessage() {}

func (x *UserDashboardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDashboardInfo.ProtoReflect.Descriptor instead.
func (*UserDashboardInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_user_dashboard_proto_rawDescGZIP(), []int{6}
}

func (x *UserDashboardInfo) GetUserDashboardId() string {
	if x != nil {
		return x.UserDashboardId
	}
	return ""
}

func (x *UserDashboardInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserDashboardInfo) GetDefaultLayoutId() string {
	if x != nil {
		return x.DefaultLayoutId
	}
	return ""
}

func (x *UserDashboardInfo) GetCustomLayouts() *_struct.ListValue {
	if x != nil {
		return x.CustomLayouts
	}
	return nil
}

func (x *UserDashboardInfo) GetDefaultFilter() *_struct.Struct {
	if x != nil {
		return x.DefaultFilter
	}
	return nil
}

func (x *UserDashboardInfo) GetPeriodType() UserDashboardInfo_PeriodType {
	if x != nil {
		return x.PeriodType
	}
	return UserDashboardInfo_NONE
}

func (x *UserDashboardInfo) GetPeriod() *UserDashboardPeriod {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *UserDashboardInfo) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UserDashboardInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserDashboardInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *UserDashboardInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *UserDashboardInfo) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

//	{
//	   "results": [
//	       {
//	           "user_dashboard_id": "user-dash-d1bd5d8cb6d7",
//	           "name": "11 Months Public Cloud Cost Summary",
//	           "custom_layouts": [
//	               [
//	                   {
//	                       "options": {
//	                           "layout": 100.0,
//	                           "chart_type": "CARD"
//	                       },
//	                       "widget_id": "card-lg-01",
//	                       "name": "Budget Usage Summary"
//	                   }
//	               ],
//	               [
//	                   {
//	                       "name": "Project-wise Budget Usage Summary@@",
//	                       "options": {
//	                           "chart_type": "TABLE",
//	                           "layout": 100.0
//	                       },
//	                       "widget_id": "table-lg-01"
//	                   }
//	               ],
//	               [
//	                   {
//	                       "widget_id": "stackedcol-lg-02",
//	                       "options": {
//	                           "layout": 100.0,
//	                           "group_by": "product",
//	                           "chart_type": "STACKED_COLUMN"
//	                       },
//	                       "name": "Cost Trend By Product"
//	                   }
//	               ]
//	           ],
//	           "default_filter": {
//	               "project_id": []
//	           },
//	           "period_type": "FIXED",
//	           "period": {
//	               "start": "2021-04-01",
//	               "end": "2022-02-28"
//	           },
//	           "tags": {},
//	           "user_id": "wanzargen@mz.co.kr",
//	           "domain_id": "domain-58010aa2e451",
//	           "created_at": "2022-03-03T03:36:35.396Z",
//	           "updated_at": "2022-03-03T03:36:35.396Z"
//	       },
//	       {
//	           "user_dashboard_id": "user-dash-965b03793d5b",
//	           "name": "AWS CloudFront Cost by Project",
//	           "custom_layouts": [
//	               [
//	                   {
//	                       "name": "AWS CloudFront Cost by Project",
//	                       "widget_id": "stackedcol-lg-03",
//	                       "options": {
//	                           "chart_type": "STACKED_COLUMN",
//	                           "layout": 100.0
//	                       }
//	                   }
//	               ],
//	               [
//	                   {
//	                       "widget_id": "stackedcol-lg-03",
//	                       "options": {
//	                           "layout": 100.0,
//	                           "chart_type": "STACKED_COLUMN",
//	                           "group_by": "service_account_id"
//	                       },
//	                       "name": "AWS CloudFront Cost by Service Account"
//	                   }
//	               ],
//	               [
//	                   {
//	                       "options": {
//	                           "layout": 100.0,
//	                           "chart_type": "LINE"
//	                       },
//	                       "name": "AWS Data-Transfer Cost Trend",
//	                       "widget_id": "linegraph-lg-02"
//	                   }
//	               ]
//	           ],
//	           "default_filter": {},
//	           "period_type": "FIXED",
//	           "period": {
//	               "start": "2021-05-01",
//	               "end": "2022-04-30"
//	           },
//	           "tags": {},
//	           "user_id": "wanzargen@mz.co.kr",
//	           "domain_id": "domain-58010aa2e451",
//	           "created_at": "2022-04-07T01:13:28.494Z",
//	           "updated_at": "2022-04-07T01:13:28.494Z"
//	       }
//	   ],
//	   "total_count": 48
//	}
type UserDashboardsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results    []*UserDashboardInfo `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	TotalCount int32                `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *UserDashboardsInfo) Reset() {
	*x = UserDashboardsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDashboardsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDashboardsInfo) ProtoMessage() {}

func (x *UserDashboardsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDashboardsInfo.ProtoReflect.Descriptor instead.
func (*UserDashboardsInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_user_dashboard_proto_rawDescGZIP(), []int{7}
}

func (x *UserDashboardsInfo) GetResults() []*UserDashboardInfo {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *UserDashboardsInfo) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type UserDashboardStatQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query    *v1.StatisticsQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	DomainId string              `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *UserDashboardStatQuery) Reset() {
	*x = UserDashboardStatQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDashboardStatQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDashboardStatQuery) ProtoMessage() {}

func (x *UserDashboardStatQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDashboardStatQuery.ProtoReflect.Descriptor instead.
func (*UserDashboardStatQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_user_dashboard_proto_rawDescGZIP(), []int{8}
}

func (x *UserDashboardStatQuery) GetQuery() *v1.StatisticsQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *UserDashboardStatQuery) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

var File_spaceone_api_cost_analysis_v1_user_dashboard_proto protoreflect.FileDescriptor

var file_spaceone_api_cost_analysis_v1_user_dashboard_proto_rawDesc = []byte{
	0x0a, 0x32, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3d,
	0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x89, 0x04,
	0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x12,
	0x3e, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x65, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x0a,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x46, 0x49, 0x58, 0x45, 0x44, 0x10, 0x02, 0x22, 0xb5, 0x04, 0x0a, 0x1a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74,
	0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x41, 0x55, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x58, 0x45, 0x44, 0x10,
	0x02, 0x22, 0x5f, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x22, 0x76, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x6e, 0x6c, 0x79, 0x22, 0xc9, 0x02, 0x0a, 0x12, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x31, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x0a, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x49, 0x58, 0x45, 0x44, 0x10, 0x02, 0x22, 0xfa, 0x04, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3b, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x2b, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x58, 0x45,
	0x44, 0x10, 0x02, 0x22, 0x81, 0x01, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x72, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x3b, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x32, 0xc2, 0x07, 0x0a, 0x0d,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0xa9, 0x01,
	0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x39, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a,
	0x22, 0x27, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x06, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x39, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x63,
	0x6f, 0x73, 0x74, 0x2d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x33, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x32, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2d,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0xa0, 0x01, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x12, 0x36, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24,
	0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2f, 0x67, 0x65, 0x74, 0x12, 0x9e, 0x01, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x1a, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25,
	0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x74, 0x12, 0x35,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x30,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x63, 0x6f, 0x73, 0x74,
	0x2d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x42, 0x44, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x72, 0x65, 0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spaceone_api_cost_analysis_v1_user_dashboard_proto_rawDescOnce sync.Once
	file_spaceone_api_cost_analysis_v1_user_dashboard_proto_rawDescData = file_spaceone_api_cost_analysis_v1_user_dashboard_proto_rawDesc
)

func file_spaceone_api_cost_analysis_v1_user_dashboard_proto_rawDescGZIP() []byte {
	file_spaceone_api_cost_analysis_v1_user_dashboard_proto_rawDescOnce.Do(func() {
		file_spaceone_api_cost_analysis_v1_user_dashboard_proto_rawDescData = protoimpl.X.CompressGZIP(file_spaceone_api_cost_analysis_v1_user_dashboard_proto_rawDescData)
	})
	return file_spaceone_api_cost_analysis_v1_user_dashboard_proto_rawDescData
}

var file_spaceone_api_cost_analysis_v1_user_dashboard_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_spaceone_api_cost_analysis_v1_user_dashboard_proto_goTypes = []interface{}{
	(CreateUserDashboardRequest_PeriodType)(0), // 0: spaceone.api.cost_analysis.v1.CreateUserDashboardRequest.PeriodType
	(UpdateUserDashboardRequest_PeriodType)(0), // 1: spaceone.api.cost_analysis.v1.UpdateUserDashboardRequest.PeriodType
	(UserDashboardQuery_PeriodType)(0),         // 2: spaceone.api.cost_analysis.v1.UserDashboardQuery.PeriodType
	(UserDashboardInfo_PeriodType)(0),          // 3: spaceone.api.cost_analysis.v1.UserDashboardInfo.PeriodType
	(*UserDashboardPeriod)(nil),                // 4: spaceone.api.cost_analysis.v1.UserDashboardPeriod
	(*CreateUserDashboardRequest)(nil),         // 5: spaceone.api.cost_analysis.v1.CreateUserDashboardRequest
	(*UpdateUserDashboardRequest)(nil),         // 6: spaceone.api.cost_analysis.v1.UpdateUserDashboardRequest
	(*UserDashboardRequest)(nil),               // 7: spaceone.api.cost_analysis.v1.UserDashboardRequest
	(*GetUserDashboardRequest)(nil),            // 8: spaceone.api.cost_analysis.v1.GetUserDashboardRequest
	(*UserDashboardQuery)(nil),                 // 9: spaceone.api.cost_analysis.v1.UserDashboardQuery
	(*UserDashboardInfo)(nil),                  // 10: spaceone.api.cost_analysis.v1.UserDashboardInfo
	(*UserDashboardsInfo)(nil),                 // 11: spaceone.api.cost_analysis.v1.UserDashboardsInfo
	(*UserDashboardStatQuery)(nil),             // 12: spaceone.api.cost_analysis.v1.UserDashboardStatQuery
	(*_struct.ListValue)(nil),                  // 13: google.protobuf.ListValue
	(*_struct.Struct)(nil),                     // 14: google.protobuf.Struct
	(*v1.Query)(nil),                           // 15: spaceone.api.core.v1.Query
	(*v1.StatisticsQuery)(nil),                 // 16: spaceone.api.core.v1.StatisticsQuery
	(*empty.Empty)(nil),                        // 17: google.protobuf.Empty
}
var file_spaceone_api_cost_analysis_v1_user_dashboard_proto_depIdxs = []int32{
	13, // 0: spaceone.api.cost_analysis.v1.CreateUserDashboardRequest.custom_layouts:type_name -> google.protobuf.ListValue
	14, // 1: spaceone.api.cost_analysis.v1.CreateUserDashboardRequest.default_filter:type_name -> google.protobuf.Struct
	0,  // 2: spaceone.api.cost_analysis.v1.CreateUserDashboardRequest.period_type:type_name -> spaceone.api.cost_analysis.v1.CreateUserDashboardRequest.PeriodType
	4,  // 3: spaceone.api.cost_analysis.v1.CreateUserDashboardRequest.period:type_name -> spaceone.api.cost_analysis.v1.UserDashboardPeriod
	14, // 4: spaceone.api.cost_analysis.v1.CreateUserDashboardRequest.tags:type_name -> google.protobuf.Struct
	13, // 5: spaceone.api.cost_analysis.v1.UpdateUserDashboardRequest.custom_layouts:type_name -> google.protobuf.ListValue
	14, // 6: spaceone.api.cost_analysis.v1.UpdateUserDashboardRequest.default_filter:type_name -> google.protobuf.Struct
	1,  // 7: spaceone.api.cost_analysis.v1.UpdateUserDashboardRequest.period_type:type_name -> spaceone.api.cost_analysis.v1.UpdateUserDashboardRequest.PeriodType
	4,  // 8: spaceone.api.cost_analysis.v1.UpdateUserDashboardRequest.period:type_name -> spaceone.api.cost_analysis.v1.UserDashboardPeriod
	14, // 9: spaceone.api.cost_analysis.v1.UpdateUserDashboardRequest.tags:type_name -> google.protobuf.Struct
	15, // 10: spaceone.api.cost_analysis.v1.UserDashboardQuery.query:type_name -> spaceone.api.core.v1.Query
	2,  // 11: spaceone.api.cost_analysis.v1.UserDashboardQuery.period_type:type_name -> spaceone.api.cost_analysis.v1.UserDashboardQuery.PeriodType
	13, // 12: spaceone.api.cost_analysis.v1.UserDashboardInfo.custom_layouts:type_name -> google.protobuf.ListValue
	14, // 13: spaceone.api.cost_analysis.v1.UserDashboardInfo.default_filter:type_name -> google.protobuf.Struct
	3,  // 14: spaceone.api.cost_analysis.v1.UserDashboardInfo.period_type:type_name -> spaceone.api.cost_analysis.v1.UserDashboardInfo.PeriodType
	4,  // 15: spaceone.api.cost_analysis.v1.UserDashboardInfo.period:type_name -> spaceone.api.cost_analysis.v1.UserDashboardPeriod
	14, // 16: spaceone.api.cost_analysis.v1.UserDashboardInfo.tags:type_name -> google.protobuf.Struct
	10, // 17: spaceone.api.cost_analysis.v1.UserDashboardsInfo.results:type_name -> spaceone.api.cost_analysis.v1.UserDashboardInfo
	16, // 18: spaceone.api.cost_analysis.v1.UserDashboardStatQuery.query:type_name -> spaceone.api.core.v1.StatisticsQuery
	5,  // 19: spaceone.api.cost_analysis.v1.UserDashboard.create:input_type -> spaceone.api.cost_analysis.v1.CreateUserDashboardRequest
	6,  // 20: spaceone.api.cost_analysis.v1.UserDashboard.update:input_type -> spaceone.api.cost_analysis.v1.UpdateUserDashboardRequest
	7,  // 21: spaceone.api.cost_analysis.v1.UserDashboard.delete:input_type -> spaceone.api.cost_analysis.v1.UserDashboardRequest
	8,  // 22: spaceone.api.cost_analysis.v1.UserDashboard.get:input_type -> spaceone.api.cost_analysis.v1.GetUserDashboardRequest
	9,  // 23: spaceone.api.cost_analysis.v1.UserDashboard.list:input_type -> spaceone.api.cost_analysis.v1.UserDashboardQuery
	12, // 24: spaceone.api.cost_analysis.v1.UserDashboard.stat:input_type -> spaceone.api.cost_analysis.v1.UserDashboardStatQuery
	10, // 25: spaceone.api.cost_analysis.v1.UserDashboard.create:output_type -> spaceone.api.cost_analysis.v1.UserDashboardInfo
	10, // 26: spaceone.api.cost_analysis.v1.UserDashboard.update:output_type -> spaceone.api.cost_analysis.v1.UserDashboardInfo
	17, // 27: spaceone.api.cost_analysis.v1.UserDashboard.delete:output_type -> google.protobuf.Empty
	10, // 28: spaceone.api.cost_analysis.v1.UserDashboard.get:output_type -> spaceone.api.cost_analysis.v1.UserDashboardInfo
	11, // 29: spaceone.api.cost_analysis.v1.UserDashboard.list:output_type -> spaceone.api.cost_analysis.v1.UserDashboardsInfo
	14, // 30: spaceone.api.cost_analysis.v1.UserDashboard.stat:output_type -> google.protobuf.Struct
	25, // [25:31] is the sub-list for method output_type
	19, // [19:25] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_spaceone_api_cost_analysis_v1_user_dashboard_proto_init() }
func file_spaceone_api_cost_analysis_v1_user_dashboard_proto_init() {
	if File_spaceone_api_cost_analysis_v1_user_dashboard_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDashboardPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDashboardQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDashboardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDashboardsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDashboardStatQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spaceone_api_cost_analysis_v1_user_dashboard_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spaceone_api_cost_analysis_v1_user_dashboard_proto_goTypes,
		DependencyIndexes: file_spaceone_api_cost_analysis_v1_user_dashboard_proto_depIdxs,
		EnumInfos:         file_spaceone_api_cost_analysis_v1_user_dashboard_proto_enumTypes,
		MessageInfos:      file_spaceone_api_cost_analysis_v1_user_dashboard_proto_msgTypes,
	}.Build()
	File_spaceone_api_cost_analysis_v1_user_dashboard_proto = out.File
	file_spaceone_api_cost_analysis_v1_user_dashboard_proto_rawDesc = nil
	file_spaceone_api_cost_analysis_v1_user_dashboard_proto_goTypes = nil
	file_spaceone_api_cost_analysis_v1_user_dashboard_proto_depIdxs = nil
}
