// description of dashboard

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: spaceone/api/dashboard/v1/domain_dashboard.proto

package v1

import (
	v1 "github.com/cloudforet-io/api/dist/go/spaceone/api/core/v1"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateDomainDashboardRequest_Viewers int32

const (
	CreateDomainDashboardRequest_VIEWERS_NONE CreateDomainDashboardRequest_Viewers = 0
	CreateDomainDashboardRequest_PUBLIC       CreateDomainDashboardRequest_Viewers = 1
	CreateDomainDashboardRequest_PRIVATE      CreateDomainDashboardRequest_Viewers = 2
)

// Enum value maps for CreateDomainDashboardRequest_Viewers.
var (
	CreateDomainDashboardRequest_Viewers_name = map[int32]string{
		0: "VIEWERS_NONE",
		1: "PUBLIC",
		2: "PRIVATE",
	}
	CreateDomainDashboardRequest_Viewers_value = map[string]int32{
		"VIEWERS_NONE": 0,
		"PUBLIC":       1,
		"PRIVATE":      2,
	}
)

func (x CreateDomainDashboardRequest_Viewers) Enum() *CreateDomainDashboardRequest_Viewers {
	p := new(CreateDomainDashboardRequest_Viewers)
	*p = x
	return p
}

func (x CreateDomainDashboardRequest_Viewers) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateDomainDashboardRequest_Viewers) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_dashboard_v1_domain_dashboard_proto_enumTypes[0].Descriptor()
}

func (CreateDomainDashboardRequest_Viewers) Type() protoreflect.EnumType {
	return &file_spaceone_api_dashboard_v1_domain_dashboard_proto_enumTypes[0]
}

func (x CreateDomainDashboardRequest_Viewers) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateDomainDashboardRequest_Viewers.Descriptor instead.
func (CreateDomainDashboardRequest_Viewers) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDescGZIP(), []int{0, 0}
}

type DomainDashboardQuery_Viewers int32

const (
	DomainDashboardQuery_VIEWERS_NONE DomainDashboardQuery_Viewers = 0
	DomainDashboardQuery_PUBLIC       DomainDashboardQuery_Viewers = 1
	DomainDashboardQuery_PRIVATE      DomainDashboardQuery_Viewers = 2
)

// Enum value maps for DomainDashboardQuery_Viewers.
var (
	DomainDashboardQuery_Viewers_name = map[int32]string{
		0: "VIEWERS_NONE",
		1: "PUBLIC",
		2: "PRIVATE",
	}
	DomainDashboardQuery_Viewers_value = map[string]int32{
		"VIEWERS_NONE": 0,
		"PUBLIC":       1,
		"PRIVATE":      2,
	}
)

func (x DomainDashboardQuery_Viewers) Enum() *DomainDashboardQuery_Viewers {
	p := new(DomainDashboardQuery_Viewers)
	*p = x
	return p
}

func (x DomainDashboardQuery_Viewers) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DomainDashboardQuery_Viewers) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_dashboard_v1_domain_dashboard_proto_enumTypes[1].Descriptor()
}

func (DomainDashboardQuery_Viewers) Type() protoreflect.EnumType {
	return &file_spaceone_api_dashboard_v1_domain_dashboard_proto_enumTypes[1]
}

func (x DomainDashboardQuery_Viewers) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DomainDashboardQuery_Viewers.Descriptor instead.
func (DomainDashboardQuery_Viewers) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDescGZIP(), []int{7, 0}
}

type DomainDashboardInfo_Viewers int32

const (
	DomainDashboardInfo_VIEWERS_NONE DomainDashboardInfo_Viewers = 0
	DomainDashboardInfo_PUBLIC       DomainDashboardInfo_Viewers = 1
	DomainDashboardInfo_PRIVATE      DomainDashboardInfo_Viewers = 2
)

// Enum value maps for DomainDashboardInfo_Viewers.
var (
	DomainDashboardInfo_Viewers_name = map[int32]string{
		0: "VIEWERS_NONE",
		1: "PUBLIC",
		2: "PRIVATE",
	}
	DomainDashboardInfo_Viewers_value = map[string]int32{
		"VIEWERS_NONE": 0,
		"PUBLIC":       1,
		"PRIVATE":      2,
	}
)

func (x DomainDashboardInfo_Viewers) Enum() *DomainDashboardInfo_Viewers {
	p := new(DomainDashboardInfo_Viewers)
	*p = x
	return p
}

func (x DomainDashboardInfo_Viewers) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DomainDashboardInfo_Viewers) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_dashboard_v1_domain_dashboard_proto_enumTypes[2].Descriptor()
}

func (DomainDashboardInfo_Viewers) Type() protoreflect.EnumType {
	return &file_spaceone_api_dashboard_v1_domain_dashboard_proto_enumTypes[2]
}

func (x DomainDashboardInfo_Viewers) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DomainDashboardInfo_Viewers.Descriptor instead.
func (DomainDashboardInfo_Viewers) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDescGZIP(), []int{8, 0}
}

type CreateDomainDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string                               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Viewers CreateDomainDashboardRequest_Viewers `protobuf:"varint,2,opt,name=viewers,proto3,enum=spaceone.api.dashboard.v1.CreateDomainDashboardRequest_Viewers" json:"viewers,omitempty"`
	// +optional
	Layouts *_struct.ListValue `protobuf:"bytes,3,opt,name=layouts,proto3" json:"layouts,omitempty"`
	// +optional
	Variables *_struct.Struct `protobuf:"bytes,5,opt,name=variables,proto3" json:"variables,omitempty"`
	// +optional
	Settings *_struct.Struct `protobuf:"bytes,6,opt,name=settings,proto3" json:"settings,omitempty"`
	// +optional
	VariablesSchema *_struct.Struct `protobuf:"bytes,7,opt,name=variables_schema,json=variablesSchema,proto3" json:"variables_schema,omitempty"`
	// +optional
	Labels *_struct.ListValue `protobuf:"bytes,10,opt,name=labels,proto3" json:"labels,omitempty"`
	// +optional
	Tags     *_struct.Struct `protobuf:"bytes,11,opt,name=tags,proto3" json:"tags,omitempty"`
	DomainId string          `protobuf:"bytes,21,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *CreateDomainDashboardRequest) Reset() {
	*x = CreateDomainDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDomainDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDomainDashboardRequest) ProtoMessage() {}

func (x *CreateDomainDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDomainDashboardRequest.ProtoReflect.Descriptor instead.
func (*CreateDomainDashboardRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDomainDashboardRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDomainDashboardRequest) GetViewers() CreateDomainDashboardRequest_Viewers {
	if x != nil {
		return x.Viewers
	}
	return CreateDomainDashboardRequest_VIEWERS_NONE
}

func (x *CreateDomainDashboardRequest) GetLayouts() *_struct.ListValue {
	if x != nil {
		return x.Layouts
	}
	return nil
}

func (x *CreateDomainDashboardRequest) GetVariables() *_struct.Struct {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *CreateDomainDashboardRequest) GetSettings() *_struct.Struct {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *CreateDomainDashboardRequest) GetVariablesSchema() *_struct.Struct {
	if x != nil {
		return x.VariablesSchema
	}
	return nil
}

func (x *CreateDomainDashboardRequest) GetLabels() *_struct.ListValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateDomainDashboardRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateDomainDashboardRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

type UpdateDomainDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainDashboardId string `protobuf:"bytes,1,opt,name=domain_dashboard_id,json=domainDashboardId,proto3" json:"domain_dashboard_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	Layouts *_struct.ListValue `protobuf:"bytes,3,opt,name=layouts,proto3" json:"layouts,omitempty"`
	// +optional
	Variables *_struct.Struct `protobuf:"bytes,5,opt,name=variables,proto3" json:"variables,omitempty"`
	// +optional
	Settings *_struct.Struct `protobuf:"bytes,6,opt,name=settings,proto3" json:"settings,omitempty"`
	// +optional
	VariablesSchema *_struct.Struct `protobuf:"bytes,7,opt,name=variables_schema,json=variablesSchema,proto3" json:"variables_schema,omitempty"`
	// +optional
	Labels *_struct.ListValue `protobuf:"bytes,10,opt,name=labels,proto3" json:"labels,omitempty"`
	// +optional
	Tags     *_struct.Struct `protobuf:"bytes,11,opt,name=tags,proto3" json:"tags,omitempty"`
	DomainId string          `protobuf:"bytes,21,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *UpdateDomainDashboardRequest) Reset() {
	*x = UpdateDomainDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDomainDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDomainDashboardRequest) ProtoMessage() {}

func (x *UpdateDomainDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDomainDashboardRequest.ProtoReflect.Descriptor instead.
func (*UpdateDomainDashboardRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateDomainDashboardRequest) GetDomainDashboardId() string {
	if x != nil {
		return x.DomainDashboardId
	}
	return ""
}

func (x *UpdateDomainDashboardRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDomainDashboardRequest) GetLayouts() *_struct.ListValue {
	if x != nil {
		return x.Layouts
	}
	return nil
}

func (x *UpdateDomainDashboardRequest) GetVariables() *_struct.Struct {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *UpdateDomainDashboardRequest) GetSettings() *_struct.Struct {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *UpdateDomainDashboardRequest) GetVariablesSchema() *_struct.Struct {
	if x != nil {
		return x.VariablesSchema
	}
	return nil
}

func (x *UpdateDomainDashboardRequest) GetLabels() *_struct.ListValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateDomainDashboardRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateDomainDashboardRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

type DomainDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainDashboardId string `protobuf:"bytes,1,opt,name=domain_dashboard_id,json=domainDashboardId,proto3" json:"domain_dashboard_id,omitempty"`
	DomainId          string `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *DomainDashboardRequest) Reset() {
	*x = DomainDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainDashboardRequest) ProtoMessage() {}

func (x *DomainDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainDashboardRequest.ProtoReflect.Descriptor instead.
func (*DomainDashboardRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDescGZIP(), []int{2}
}

func (x *DomainDashboardRequest) GetDomainDashboardId() string {
	if x != nil {
		return x.DomainDashboardId
	}
	return ""
}

func (x *DomainDashboardRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

type GetDomainDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainDashboardId string `protobuf:"bytes,1,opt,name=domain_dashboard_id,json=domainDashboardId,proto3" json:"domain_dashboard_id,omitempty"`
	DomainId          string `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	// +optional
	Only []string `protobuf:"bytes,3,rep,name=only,proto3" json:"only,omitempty"`
}

func (x *GetDomainDashboardRequest) Reset() {
	*x = GetDomainDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDomainDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDomainDashboardRequest) ProtoMessage() {}

func (x *GetDomainDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDomainDashboardRequest.ProtoReflect.Descriptor instead.
func (*GetDomainDashboardRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDescGZIP(), []int{3}
}

func (x *GetDomainDashboardRequest) GetDomainDashboardId() string {
	if x != nil {
		return x.DomainDashboardId
	}
	return ""
}

func (x *GetDomainDashboardRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *GetDomainDashboardRequest) GetOnly() []string {
	if x != nil {
		return x.Only
	}
	return nil
}

type DomainDashboardVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainDashboardId string `protobuf:"bytes,1,opt,name=domain_dashboard_id,json=domainDashboardId,proto3" json:"domain_dashboard_id,omitempty"`
	Version           int32  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	DomainId          string `protobuf:"bytes,21,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *DomainDashboardVersionRequest) Reset() {
	*x = DomainDashboardVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainDashboardVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainDashboardVersionRequest) ProtoMessage() {}

func (x *DomainDashboardVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainDashboardVersionRequest.ProtoReflect.Descriptor instead.
func (*DomainDashboardVersionRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDescGZIP(), []int{4}
}

func (x *DomainDashboardVersionRequest) GetDomainDashboardId() string {
	if x != nil {
		return x.DomainDashboardId
	}
	return ""
}

func (x *DomainDashboardVersionRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DomainDashboardVersionRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

type GetDomainDashboardVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainDashboardId string `protobuf:"bytes,1,opt,name=domain_dashboard_id,json=domainDashboardId,proto3" json:"domain_dashboard_id,omitempty"`
	Version           int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	DomainId          string `protobuf:"bytes,10,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	// +optional
	Only []string `protobuf:"bytes,11,rep,name=only,proto3" json:"only,omitempty"`
}

func (x *GetDomainDashboardVersionRequest) Reset() {
	*x = GetDomainDashboardVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDomainDashboardVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDomainDashboardVersionRequest) ProtoMessage() {}

func (x *GetDomainDashboardVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDomainDashboardVersionRequest.ProtoReflect.Descriptor instead.
func (*GetDomainDashboardVersionRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDescGZIP(), []int{5}
}

func (x *GetDomainDashboardVersionRequest) GetDomainDashboardId() string {
	if x != nil {
		return x.DomainDashboardId
	}
	return ""
}

func (x *GetDomainDashboardVersionRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GetDomainDashboardVersionRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *GetDomainDashboardVersionRequest) GetOnly() []string {
	if x != nil {
		return x.Only
	}
	return nil
}

type DomainDashboardVersionQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// +optional
	Query             *v1.Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	DomainDashboardId string    `protobuf:"bytes,2,opt,name=domain_dashboard_id,json=domainDashboardId,proto3" json:"domain_dashboard_id,omitempty"`
	// +optional
	Version  int32  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	DomainId string `protobuf:"bytes,10,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *DomainDashboardVersionQuery) Reset() {
	*x = DomainDashboardVersionQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainDashboardVersionQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainDashboardVersionQuery) ProtoMessage() {}

func (x *DomainDashboardVersionQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainDashboardVersionQuery.ProtoReflect.Descriptor instead.
func (*DomainDashboardVersionQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDescGZIP(), []int{6}
}

func (x *DomainDashboardVersionQuery) GetQuery() *v1.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *DomainDashboardVersionQuery) GetDomainDashboardId() string {
	if x != nil {
		return x.DomainDashboardId
	}
	return ""
}

func (x *DomainDashboardVersionQuery) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DomainDashboardVersionQuery) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

type DomainDashboardQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// +optional
	Query *v1.Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// +optional
	DomainDashboardId string `protobuf:"bytes,2,opt,name=domain_dashboard_id,json=domainDashboardId,proto3" json:"domain_dashboard_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	Viewers DomainDashboardQuery_Viewers `protobuf:"varint,4,opt,name=viewers,proto3,enum=spaceone.api.dashboard.v1.DomainDashboardQuery_Viewers" json:"viewers,omitempty"`
	// +optional
	UserId   string `protobuf:"bytes,10,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DomainId string `protobuf:"bytes,11,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *DomainDashboardQuery) Reset() {
	*x = DomainDashboardQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainDashboardQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainDashboardQuery) ProtoMessage() {}

func (x *DomainDashboardQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainDashboardQuery.ProtoReflect.Descriptor instead.
func (*DomainDashboardQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDescGZIP(), []int{7}
}

func (x *DomainDashboardQuery) GetQuery() *v1.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *DomainDashboardQuery) GetDomainDashboardId() string {
	if x != nil {
		return x.DomainDashboardId
	}
	return ""
}

func (x *DomainDashboardQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainDashboardQuery) GetViewers() DomainDashboardQuery_Viewers {
	if x != nil {
		return x.Viewers
	}
	return DomainDashboardQuery_VIEWERS_NONE
}

func (x *DomainDashboardQuery) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DomainDashboardQuery) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

type DomainDashboardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainDashboardId string                      `protobuf:"bytes,1,opt,name=domain_dashboard_id,json=domainDashboardId,proto3" json:"domain_dashboard_id,omitempty"`
	Name              string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Viewers           DomainDashboardInfo_Viewers `protobuf:"varint,3,opt,name=viewers,proto3,enum=spaceone.api.dashboard.v1.DomainDashboardInfo_Viewers" json:"viewers,omitempty"`
	Version           int32                       `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	Layouts           *_struct.ListValue          `protobuf:"bytes,5,opt,name=layouts,proto3" json:"layouts,omitempty"`
	Variables         *_struct.Struct             `protobuf:"bytes,6,opt,name=variables,proto3" json:"variables,omitempty"`
	Settings          *_struct.Struct             `protobuf:"bytes,7,opt,name=settings,proto3" json:"settings,omitempty"`
	VariablesSchema   *_struct.Struct             `protobuf:"bytes,8,opt,name=variables_schema,json=variablesSchema,proto3" json:"variables_schema,omitempty"`
	Labels            *_struct.ListValue          `protobuf:"bytes,10,opt,name=labels,proto3" json:"labels,omitempty"`
	Tags              *_struct.Struct             `protobuf:"bytes,11,opt,name=tags,proto3" json:"tags,omitempty"`
	UserId            string                      `protobuf:"bytes,20,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DomainId          string                      `protobuf:"bytes,21,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	CreatedAt         string                      `protobuf:"bytes,22,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         string                      `protobuf:"bytes,23,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *DomainDashboardInfo) Reset() {
	*x = DomainDashboardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainDashboardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainDashboardInfo) ProtoMessage() {}

func (x *DomainDashboardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainDashboardInfo.ProtoReflect.Descriptor instead.
func (*DomainDashboardInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDescGZIP(), []int{8}
}

func (x *DomainDashboardInfo) GetDomainDashboardId() string {
	if x != nil {
		return x.DomainDashboardId
	}
	return ""
}

func (x *DomainDashboardInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainDashboardInfo) GetViewers() DomainDashboardInfo_Viewers {
	if x != nil {
		return x.Viewers
	}
	return DomainDashboardInfo_VIEWERS_NONE
}

func (x *DomainDashboardInfo) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DomainDashboardInfo) GetLayouts() *_struct.ListValue {
	if x != nil {
		return x.Layouts
	}
	return nil
}

func (x *DomainDashboardInfo) GetVariables() *_struct.Struct {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *DomainDashboardInfo) GetSettings() *_struct.Struct {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *DomainDashboardInfo) GetVariablesSchema() *_struct.Struct {
	if x != nil {
		return x.VariablesSchema
	}
	return nil
}

func (x *DomainDashboardInfo) GetLabels() *_struct.ListValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DomainDashboardInfo) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DomainDashboardInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DomainDashboardInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *DomainDashboardInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *DomainDashboardInfo) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type DomainDashboardsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results    []*DomainDashboardInfo `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	TotalCount int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *DomainDashboardsInfo) Reset() {
	*x = DomainDashboardsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainDashboardsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainDashboardsInfo) ProtoMessage() {}

func (x *DomainDashboardsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainDashboardsInfo.ProtoReflect.Descriptor instead.
func (*DomainDashboardsInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDescGZIP(), []int{9}
}

func (x *DomainDashboardsInfo) GetResults() []*DomainDashboardInfo {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *DomainDashboardsInfo) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type DomainDashboardStatQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query    *v1.StatisticsQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	DomainId string              `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *DomainDashboardStatQuery) Reset() {
	*x = DomainDashboardStatQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainDashboardStatQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainDashboardStatQuery) ProtoMessage() {}

func (x *DomainDashboardStatQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainDashboardStatQuery.ProtoReflect.Descriptor instead.
func (*DomainDashboardStatQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDescGZIP(), []int{10}
}

func (x *DomainDashboardStatQuery) GetQuery() *v1.StatisticsQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *DomainDashboardStatQuery) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

type DomainDashboardVersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainDashboardId string             `protobuf:"bytes,1,opt,name=domain_dashboard_id,json=domainDashboardId,proto3" json:"domain_dashboard_id,omitempty"`
	Version           int32              `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Latest            bool               `protobuf:"varint,3,opt,name=latest,proto3" json:"latest,omitempty"`
	Layouts           *_struct.ListValue `protobuf:"bytes,5,opt,name=layouts,proto3" json:"layouts,omitempty"`
	Variables         *_struct.Struct    `protobuf:"bytes,6,opt,name=variables,proto3" json:"variables,omitempty"`
	Settings          *_struct.Struct    `protobuf:"bytes,7,opt,name=settings,proto3" json:"settings,omitempty"`
	VariablesSchema   *_struct.Struct    `protobuf:"bytes,8,opt,name=variables_schema,json=variablesSchema,proto3" json:"variables_schema,omitempty"`
	DomainId          string             `protobuf:"bytes,21,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	CreatedAt         string             `protobuf:"bytes,22,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *DomainDashboardVersionInfo) Reset() {
	*x = DomainDashboardVersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainDashboardVersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainDashboardVersionInfo) ProtoMessage() {}

func (x *DomainDashboardVersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainDashboardVersionInfo.ProtoReflect.Descriptor instead.
func (*DomainDashboardVersionInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDescGZIP(), []int{11}
}

func (x *DomainDashboardVersionInfo) GetDomainDashboardId() string {
	if x != nil {
		return x.DomainDashboardId
	}
	return ""
}

func (x *DomainDashboardVersionInfo) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DomainDashboardVersionInfo) GetLatest() bool {
	if x != nil {
		return x.Latest
	}
	return false
}

func (x *DomainDashboardVersionInfo) GetLayouts() *_struct.ListValue {
	if x != nil {
		return x.Layouts
	}
	return nil
}

func (x *DomainDashboardVersionInfo) GetVariables() *_struct.Struct {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *DomainDashboardVersionInfo) GetSettings() *_struct.Struct {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *DomainDashboardVersionInfo) GetVariablesSchema() *_struct.Struct {
	if x != nil {
		return x.VariablesSchema
	}
	return nil
}

func (x *DomainDashboardVersionInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *DomainDashboardVersionInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type DomainDashboardVersionsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results    []*DomainDashboardVersionInfo `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	TotalCount int32                         `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *DomainDashboardVersionsInfo) Reset() {
	*x = DomainDashboardVersionsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainDashboardVersionsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainDashboardVersionsInfo) ProtoMessage() {}

func (x *DomainDashboardVersionsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainDashboardVersionsInfo.ProtoReflect.Descriptor instead.
func (*DomainDashboardVersionsInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDescGZIP(), []int{12}
}

func (x *DomainDashboardVersionsInfo) GetResults() []*DomainDashboardVersionInfo {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *DomainDashboardVersionsInfo) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

var File_spaceone_api_dashboard_v1_domain_dashboard_proto protoreflect.FileDescriptor

var file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDesc = []byte{
	0x0a, 0x30, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x19, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x04, 0x0a, 0x1c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a,
	0x07, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x52,
	0x07, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x35,
	0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x32,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x07,
	0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x49, 0x45, 0x57, 0x45,
	0x52, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x10, 0x02, 0x22, 0xc6, 0x03, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x6c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x35, 0x0a,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0f, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x32, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x16, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x22, 0x7c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x6e, 0x6c, 0x79,
	0x22, 0x86, 0x01, 0x0a, 0x1d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x20, 0x47, 0x65,
	0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x6e, 0x6c, 0x79, 0x22, 0xb7, 0x01, 0x0a, 0x1b, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x13,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x22, 0xcc, 0x02, 0x0a, 0x14, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x2e, 0x0a, 0x13, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x52, 0x07, 0x76,
	0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x07,
	0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x49, 0x45, 0x57, 0x45,
	0x52, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x10, 0x02, 0x22, 0xb6, 0x05, 0x0a, 0x13, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50,
	0x0a, 0x07, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x36, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x52, 0x07, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x6c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73,
	0x12, 0x35, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x10,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x0f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x32, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x34, 0x0a, 0x07, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73,
	0x12, 0x10, 0x0a, 0x0c, 0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x02, 0x22, 0x81, 0x01, 0x0a, 0x14,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x74, 0x0a, 0x18, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0xa0, 0x03, 0x0a, 0x1a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x09,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0f, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x1b, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xf0, 0x0c, 0x0a, 0x0f, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0xa3,
	0x01, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x37, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x37, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a,
	0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x06, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x12, 0x34, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x67, 0x65, 0x74, 0x12,
	0x9c, 0x01, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22,
	0x2d, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xb4,
	0x01, 0x0a, 0x0e, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x38, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2d, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x2d, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xb8, 0x01, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2d, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0xb8, 0x01, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x36, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x36, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x2f, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01,
	0x2a, 0x22, 0x23, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x74, 0x12,
	0x33, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2d, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x42, 0x40, 0x5a,
	0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x66, 0x6f, 0x72, 0x65, 0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69,
	0x73, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDescOnce sync.Once
	file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDescData = file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDesc
)

func file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDescGZIP() []byte {
	file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDescOnce.Do(func() {
		file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDescData = protoimpl.X.CompressGZIP(file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDescData)
	})
	return file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDescData
}

var file_spaceone_api_dashboard_v1_domain_dashboard_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_spaceone_api_dashboard_v1_domain_dashboard_proto_goTypes = []interface{}{
	(CreateDomainDashboardRequest_Viewers)(0), // 0: spaceone.api.dashboard.v1.CreateDomainDashboardRequest.Viewers
	(DomainDashboardQuery_Viewers)(0),         // 1: spaceone.api.dashboard.v1.DomainDashboardQuery.Viewers
	(DomainDashboardInfo_Viewers)(0),          // 2: spaceone.api.dashboard.v1.DomainDashboardInfo.Viewers
	(*CreateDomainDashboardRequest)(nil),      // 3: spaceone.api.dashboard.v1.CreateDomainDashboardRequest
	(*UpdateDomainDashboardRequest)(nil),      // 4: spaceone.api.dashboard.v1.UpdateDomainDashboardRequest
	(*DomainDashboardRequest)(nil),            // 5: spaceone.api.dashboard.v1.DomainDashboardRequest
	(*GetDomainDashboardRequest)(nil),         // 6: spaceone.api.dashboard.v1.GetDomainDashboardRequest
	(*DomainDashboardVersionRequest)(nil),     // 7: spaceone.api.dashboard.v1.DomainDashboardVersionRequest
	(*GetDomainDashboardVersionRequest)(nil),  // 8: spaceone.api.dashboard.v1.GetDomainDashboardVersionRequest
	(*DomainDashboardVersionQuery)(nil),       // 9: spaceone.api.dashboard.v1.DomainDashboardVersionQuery
	(*DomainDashboardQuery)(nil),              // 10: spaceone.api.dashboard.v1.DomainDashboardQuery
	(*DomainDashboardInfo)(nil),               // 11: spaceone.api.dashboard.v1.DomainDashboardInfo
	(*DomainDashboardsInfo)(nil),              // 12: spaceone.api.dashboard.v1.DomainDashboardsInfo
	(*DomainDashboardStatQuery)(nil),          // 13: spaceone.api.dashboard.v1.DomainDashboardStatQuery
	(*DomainDashboardVersionInfo)(nil),        // 14: spaceone.api.dashboard.v1.DomainDashboardVersionInfo
	(*DomainDashboardVersionsInfo)(nil),       // 15: spaceone.api.dashboard.v1.DomainDashboardVersionsInfo
	(*_struct.ListValue)(nil),                 // 16: google.protobuf.ListValue
	(*_struct.Struct)(nil),                    // 17: google.protobuf.Struct
	(*v1.Query)(nil),                          // 18: spaceone.api.core.v1.Query
	(*v1.StatisticsQuery)(nil),                // 19: spaceone.api.core.v1.StatisticsQuery
	(*empty.Empty)(nil),                       // 20: google.protobuf.Empty
}
var file_spaceone_api_dashboard_v1_domain_dashboard_proto_depIdxs = []int32{
	0,  // 0: spaceone.api.dashboard.v1.CreateDomainDashboardRequest.viewers:type_name -> spaceone.api.dashboard.v1.CreateDomainDashboardRequest.Viewers
	16, // 1: spaceone.api.dashboard.v1.CreateDomainDashboardRequest.layouts:type_name -> google.protobuf.ListValue
	17, // 2: spaceone.api.dashboard.v1.CreateDomainDashboardRequest.variables:type_name -> google.protobuf.Struct
	17, // 3: spaceone.api.dashboard.v1.CreateDomainDashboardRequest.settings:type_name -> google.protobuf.Struct
	17, // 4: spaceone.api.dashboard.v1.CreateDomainDashboardRequest.variables_schema:type_name -> google.protobuf.Struct
	16, // 5: spaceone.api.dashboard.v1.CreateDomainDashboardRequest.labels:type_name -> google.protobuf.ListValue
	17, // 6: spaceone.api.dashboard.v1.CreateDomainDashboardRequest.tags:type_name -> google.protobuf.Struct
	16, // 7: spaceone.api.dashboard.v1.UpdateDomainDashboardRequest.layouts:type_name -> google.protobuf.ListValue
	17, // 8: spaceone.api.dashboard.v1.UpdateDomainDashboardRequest.variables:type_name -> google.protobuf.Struct
	17, // 9: spaceone.api.dashboard.v1.UpdateDomainDashboardRequest.settings:type_name -> google.protobuf.Struct
	17, // 10: spaceone.api.dashboard.v1.UpdateDomainDashboardRequest.variables_schema:type_name -> google.protobuf.Struct
	16, // 11: spaceone.api.dashboard.v1.UpdateDomainDashboardRequest.labels:type_name -> google.protobuf.ListValue
	17, // 12: spaceone.api.dashboard.v1.UpdateDomainDashboardRequest.tags:type_name -> google.protobuf.Struct
	18, // 13: spaceone.api.dashboard.v1.DomainDashboardVersionQuery.query:type_name -> spaceone.api.core.v1.Query
	18, // 14: spaceone.api.dashboard.v1.DomainDashboardQuery.query:type_name -> spaceone.api.core.v1.Query
	1,  // 15: spaceone.api.dashboard.v1.DomainDashboardQuery.viewers:type_name -> spaceone.api.dashboard.v1.DomainDashboardQuery.Viewers
	2,  // 16: spaceone.api.dashboard.v1.DomainDashboardInfo.viewers:type_name -> spaceone.api.dashboard.v1.DomainDashboardInfo.Viewers
	16, // 17: spaceone.api.dashboard.v1.DomainDashboardInfo.layouts:type_name -> google.protobuf.ListValue
	17, // 18: spaceone.api.dashboard.v1.DomainDashboardInfo.variables:type_name -> google.protobuf.Struct
	17, // 19: spaceone.api.dashboard.v1.DomainDashboardInfo.settings:type_name -> google.protobuf.Struct
	17, // 20: spaceone.api.dashboard.v1.DomainDashboardInfo.variables_schema:type_name -> google.protobuf.Struct
	16, // 21: spaceone.api.dashboard.v1.DomainDashboardInfo.labels:type_name -> google.protobuf.ListValue
	17, // 22: spaceone.api.dashboard.v1.DomainDashboardInfo.tags:type_name -> google.protobuf.Struct
	11, // 23: spaceone.api.dashboard.v1.DomainDashboardsInfo.results:type_name -> spaceone.api.dashboard.v1.DomainDashboardInfo
	19, // 24: spaceone.api.dashboard.v1.DomainDashboardStatQuery.query:type_name -> spaceone.api.core.v1.StatisticsQuery
	16, // 25: spaceone.api.dashboard.v1.DomainDashboardVersionInfo.layouts:type_name -> google.protobuf.ListValue
	17, // 26: spaceone.api.dashboard.v1.DomainDashboardVersionInfo.variables:type_name -> google.protobuf.Struct
	17, // 27: spaceone.api.dashboard.v1.DomainDashboardVersionInfo.settings:type_name -> google.protobuf.Struct
	17, // 28: spaceone.api.dashboard.v1.DomainDashboardVersionInfo.variables_schema:type_name -> google.protobuf.Struct
	14, // 29: spaceone.api.dashboard.v1.DomainDashboardVersionsInfo.results:type_name -> spaceone.api.dashboard.v1.DomainDashboardVersionInfo
	3,  // 30: spaceone.api.dashboard.v1.DomainDashboard.create:input_type -> spaceone.api.dashboard.v1.CreateDomainDashboardRequest
	4,  // 31: spaceone.api.dashboard.v1.DomainDashboard.update:input_type -> spaceone.api.dashboard.v1.UpdateDomainDashboardRequest
	5,  // 32: spaceone.api.dashboard.v1.DomainDashboard.delete:input_type -> spaceone.api.dashboard.v1.DomainDashboardRequest
	6,  // 33: spaceone.api.dashboard.v1.DomainDashboard.get:input_type -> spaceone.api.dashboard.v1.GetDomainDashboardRequest
	7,  // 34: spaceone.api.dashboard.v1.DomainDashboard.delete_version:input_type -> spaceone.api.dashboard.v1.DomainDashboardVersionRequest
	7,  // 35: spaceone.api.dashboard.v1.DomainDashboard.revert_version:input_type -> spaceone.api.dashboard.v1.DomainDashboardVersionRequest
	8,  // 36: spaceone.api.dashboard.v1.DomainDashboard.get_version:input_type -> spaceone.api.dashboard.v1.GetDomainDashboardVersionRequest
	9,  // 37: spaceone.api.dashboard.v1.DomainDashboard.list_versions:input_type -> spaceone.api.dashboard.v1.DomainDashboardVersionQuery
	10, // 38: spaceone.api.dashboard.v1.DomainDashboard.list:input_type -> spaceone.api.dashboard.v1.DomainDashboardQuery
	13, // 39: spaceone.api.dashboard.v1.DomainDashboard.stat:input_type -> spaceone.api.dashboard.v1.DomainDashboardStatQuery
	11, // 40: spaceone.api.dashboard.v1.DomainDashboard.create:output_type -> spaceone.api.dashboard.v1.DomainDashboardInfo
	11, // 41: spaceone.api.dashboard.v1.DomainDashboard.update:output_type -> spaceone.api.dashboard.v1.DomainDashboardInfo
	20, // 42: spaceone.api.dashboard.v1.DomainDashboard.delete:output_type -> google.protobuf.Empty
	11, // 43: spaceone.api.dashboard.v1.DomainDashboard.get:output_type -> spaceone.api.dashboard.v1.DomainDashboardInfo
	20, // 44: spaceone.api.dashboard.v1.DomainDashboard.delete_version:output_type -> google.protobuf.Empty
	11, // 45: spaceone.api.dashboard.v1.DomainDashboard.revert_version:output_type -> spaceone.api.dashboard.v1.DomainDashboardInfo
	14, // 46: spaceone.api.dashboard.v1.DomainDashboard.get_version:output_type -> spaceone.api.dashboard.v1.DomainDashboardVersionInfo
	15, // 47: spaceone.api.dashboard.v1.DomainDashboard.list_versions:output_type -> spaceone.api.dashboard.v1.DomainDashboardVersionsInfo
	12, // 48: spaceone.api.dashboard.v1.DomainDashboard.list:output_type -> spaceone.api.dashboard.v1.DomainDashboardsInfo
	17, // 49: spaceone.api.dashboard.v1.DomainDashboard.stat:output_type -> google.protobuf.Struct
	40, // [40:50] is the sub-list for method output_type
	30, // [30:40] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_spaceone_api_dashboard_v1_domain_dashboard_proto_init() }
func file_spaceone_api_dashboard_v1_domain_dashboard_proto_init() {
	if File_spaceone_api_dashboard_v1_domain_dashboard_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDomainDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDomainDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDomainDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainDashboardVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDomainDashboardVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainDashboardVersionQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainDashboardQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainDashboardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainDashboardsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainDashboardStatQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainDashboardVersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainDashboardVersionsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spaceone_api_dashboard_v1_domain_dashboard_proto_goTypes,
		DependencyIndexes: file_spaceone_api_dashboard_v1_domain_dashboard_proto_depIdxs,
		EnumInfos:         file_spaceone_api_dashboard_v1_domain_dashboard_proto_enumTypes,
		MessageInfos:      file_spaceone_api_dashboard_v1_domain_dashboard_proto_msgTypes,
	}.Build()
	File_spaceone_api_dashboard_v1_domain_dashboard_proto = out.File
	file_spaceone_api_dashboard_v1_domain_dashboard_proto_rawDesc = nil
	file_spaceone_api_dashboard_v1_domain_dashboard_proto_goTypes = nil
	file_spaceone_api_dashboard_v1_domain_dashboard_proto_depIdxs = nil
}
