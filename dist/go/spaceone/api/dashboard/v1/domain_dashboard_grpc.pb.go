// description of dashboard

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: spaceone/api/dashboard/v1/domain_dashboard.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DomainDashboard_Create_FullMethodName        = "/spaceone.api.dashboard.v1.DomainDashboard/create"
	DomainDashboard_Update_FullMethodName        = "/spaceone.api.dashboard.v1.DomainDashboard/update"
	DomainDashboard_Delete_FullMethodName        = "/spaceone.api.dashboard.v1.DomainDashboard/delete"
	DomainDashboard_Get_FullMethodName           = "/spaceone.api.dashboard.v1.DomainDashboard/get"
	DomainDashboard_DeleteVersion_FullMethodName = "/spaceone.api.dashboard.v1.DomainDashboard/delete_version"
	DomainDashboard_RevertVersion_FullMethodName = "/spaceone.api.dashboard.v1.DomainDashboard/revert_version"
	DomainDashboard_GetVersion_FullMethodName    = "/spaceone.api.dashboard.v1.DomainDashboard/get_version"
	DomainDashboard_ListVersions_FullMethodName  = "/spaceone.api.dashboard.v1.DomainDashboard/list_versions"
	DomainDashboard_List_FullMethodName          = "/spaceone.api.dashboard.v1.DomainDashboard/list"
	DomainDashboard_Stat_FullMethodName          = "/spaceone.api.dashboard.v1.DomainDashboard/stat"
)

// DomainDashboardClient is the client API for DomainDashboard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DomainDashboardClient interface {
	Create(ctx context.Context, in *CreateDomainDashboardRequest, opts ...grpc.CallOption) (*DomainDashboardInfo, error)
	Update(ctx context.Context, in *UpdateDomainDashboardRequest, opts ...grpc.CallOption) (*DomainDashboardInfo, error)
	Delete(ctx context.Context, in *DomainDashboardRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *GetDomainDashboardRequest, opts ...grpc.CallOption) (*DomainDashboardInfo, error)
	DeleteVersion(ctx context.Context, in *DomainDashboardVersionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RevertVersion(ctx context.Context, in *DomainDashboardVersionRequest, opts ...grpc.CallOption) (*DomainDashboardInfo, error)
	GetVersion(ctx context.Context, in *GetDomainDashboardVersionRequest, opts ...grpc.CallOption) (*DomainDashboardVersionInfo, error)
	ListVersions(ctx context.Context, in *DomainDashboardVersionQuery, opts ...grpc.CallOption) (*DomainDashboardVersionsInfo, error)
	List(ctx context.Context, in *DomainDashboardQuery, opts ...grpc.CallOption) (*DomainDashboardsInfo, error)
	Stat(ctx context.Context, in *DomainDashboardStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type domainDashboardClient struct {
	cc grpc.ClientConnInterface
}

func NewDomainDashboardClient(cc grpc.ClientConnInterface) DomainDashboardClient {
	return &domainDashboardClient{cc}
}

func (c *domainDashboardClient) Create(ctx context.Context, in *CreateDomainDashboardRequest, opts ...grpc.CallOption) (*DomainDashboardInfo, error) {
	out := new(DomainDashboardInfo)
	err := c.cc.Invoke(ctx, DomainDashboard_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainDashboardClient) Update(ctx context.Context, in *UpdateDomainDashboardRequest, opts ...grpc.CallOption) (*DomainDashboardInfo, error) {
	out := new(DomainDashboardInfo)
	err := c.cc.Invoke(ctx, DomainDashboard_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainDashboardClient) Delete(ctx context.Context, in *DomainDashboardRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, DomainDashboard_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainDashboardClient) Get(ctx context.Context, in *GetDomainDashboardRequest, opts ...grpc.CallOption) (*DomainDashboardInfo, error) {
	out := new(DomainDashboardInfo)
	err := c.cc.Invoke(ctx, DomainDashboard_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainDashboardClient) DeleteVersion(ctx context.Context, in *DomainDashboardVersionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, DomainDashboard_DeleteVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainDashboardClient) RevertVersion(ctx context.Context, in *DomainDashboardVersionRequest, opts ...grpc.CallOption) (*DomainDashboardInfo, error) {
	out := new(DomainDashboardInfo)
	err := c.cc.Invoke(ctx, DomainDashboard_RevertVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainDashboardClient) GetVersion(ctx context.Context, in *GetDomainDashboardVersionRequest, opts ...grpc.CallOption) (*DomainDashboardVersionInfo, error) {
	out := new(DomainDashboardVersionInfo)
	err := c.cc.Invoke(ctx, DomainDashboard_GetVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainDashboardClient) ListVersions(ctx context.Context, in *DomainDashboardVersionQuery, opts ...grpc.CallOption) (*DomainDashboardVersionsInfo, error) {
	out := new(DomainDashboardVersionsInfo)
	err := c.cc.Invoke(ctx, DomainDashboard_ListVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainDashboardClient) List(ctx context.Context, in *DomainDashboardQuery, opts ...grpc.CallOption) (*DomainDashboardsInfo, error) {
	out := new(DomainDashboardsInfo)
	err := c.cc.Invoke(ctx, DomainDashboard_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainDashboardClient) Stat(ctx context.Context, in *DomainDashboardStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, DomainDashboard_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DomainDashboardServer is the server API for DomainDashboard service.
// All implementations must embed UnimplementedDomainDashboardServer
// for forward compatibility
type DomainDashboardServer interface {
	Create(context.Context, *CreateDomainDashboardRequest) (*DomainDashboardInfo, error)
	Update(context.Context, *UpdateDomainDashboardRequest) (*DomainDashboardInfo, error)
	Delete(context.Context, *DomainDashboardRequest) (*empty.Empty, error)
	Get(context.Context, *GetDomainDashboardRequest) (*DomainDashboardInfo, error)
	DeleteVersion(context.Context, *DomainDashboardVersionRequest) (*empty.Empty, error)
	RevertVersion(context.Context, *DomainDashboardVersionRequest) (*DomainDashboardInfo, error)
	GetVersion(context.Context, *GetDomainDashboardVersionRequest) (*DomainDashboardVersionInfo, error)
	ListVersions(context.Context, *DomainDashboardVersionQuery) (*DomainDashboardVersionsInfo, error)
	List(context.Context, *DomainDashboardQuery) (*DomainDashboardsInfo, error)
	Stat(context.Context, *DomainDashboardStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedDomainDashboardServer()
}

// UnimplementedDomainDashboardServer must be embedded to have forward compatible implementations.
type UnimplementedDomainDashboardServer struct {
}

func (UnimplementedDomainDashboardServer) Create(context.Context, *CreateDomainDashboardRequest) (*DomainDashboardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDomainDashboardServer) Update(context.Context, *UpdateDomainDashboardRequest) (*DomainDashboardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDomainDashboardServer) Delete(context.Context, *DomainDashboardRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDomainDashboardServer) Get(context.Context, *GetDomainDashboardRequest) (*DomainDashboardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDomainDashboardServer) DeleteVersion(context.Context, *DomainDashboardVersionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVersion not implemented")
}
func (UnimplementedDomainDashboardServer) RevertVersion(context.Context, *DomainDashboardVersionRequest) (*DomainDashboardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertVersion not implemented")
}
func (UnimplementedDomainDashboardServer) GetVersion(context.Context, *GetDomainDashboardVersionRequest) (*DomainDashboardVersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedDomainDashboardServer) ListVersions(context.Context, *DomainDashboardVersionQuery) (*DomainDashboardVersionsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVersions not implemented")
}
func (UnimplementedDomainDashboardServer) List(context.Context, *DomainDashboardQuery) (*DomainDashboardsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDomainDashboardServer) Stat(context.Context, *DomainDashboardStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedDomainDashboardServer) mustEmbedUnimplementedDomainDashboardServer() {}

// UnsafeDomainDashboardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DomainDashboardServer will
// result in compilation errors.
type UnsafeDomainDashboardServer interface {
	mustEmbedUnimplementedDomainDashboardServer()
}

func RegisterDomainDashboardServer(s grpc.ServiceRegistrar, srv DomainDashboardServer) {
	s.RegisterService(&DomainDashboard_ServiceDesc, srv)
}

func _DomainDashboard_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainDashboardServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainDashboard_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainDashboardServer).Create(ctx, req.(*CreateDomainDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainDashboard_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDomainDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainDashboardServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainDashboard_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainDashboardServer).Update(ctx, req.(*UpdateDomainDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainDashboard_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainDashboardServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainDashboard_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainDashboardServer).Delete(ctx, req.(*DomainDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainDashboard_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainDashboardServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainDashboard_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainDashboardServer).Get(ctx, req.(*GetDomainDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainDashboard_DeleteVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainDashboardVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainDashboardServer).DeleteVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainDashboard_DeleteVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainDashboardServer).DeleteVersion(ctx, req.(*DomainDashboardVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainDashboard_RevertVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainDashboardVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainDashboardServer).RevertVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainDashboard_RevertVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainDashboardServer).RevertVersion(ctx, req.(*DomainDashboardVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainDashboard_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainDashboardVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainDashboardServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainDashboard_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainDashboardServer).GetVersion(ctx, req.(*GetDomainDashboardVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainDashboard_ListVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainDashboardVersionQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainDashboardServer).ListVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainDashboard_ListVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainDashboardServer).ListVersions(ctx, req.(*DomainDashboardVersionQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainDashboard_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainDashboardQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainDashboardServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainDashboard_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainDashboardServer).List(ctx, req.(*DomainDashboardQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainDashboard_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainDashboardStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainDashboardServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainDashboard_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainDashboardServer).Stat(ctx, req.(*DomainDashboardStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// DomainDashboard_ServiceDesc is the grpc.ServiceDesc for DomainDashboard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DomainDashboard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.dashboard.v1.DomainDashboard",
	HandlerType: (*DomainDashboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _DomainDashboard_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _DomainDashboard_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _DomainDashboard_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _DomainDashboard_Get_Handler,
		},
		{
			MethodName: "delete_version",
			Handler:    _DomainDashboard_DeleteVersion_Handler,
		},
		{
			MethodName: "revert_version",
			Handler:    _DomainDashboard_RevertVersion_Handler,
		},
		{
			MethodName: "get_version",
			Handler:    _DomainDashboard_GetVersion_Handler,
		},
		{
			MethodName: "list_versions",
			Handler:    _DomainDashboard_ListVersions_Handler,
		},
		{
			MethodName: "list",
			Handler:    _DomainDashboard_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _DomainDashboard_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/dashboard/v1/domain_dashboard.proto",
}
