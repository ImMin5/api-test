// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: spaceone/api/identity/v1/domain.proto

package v1

import (
	context "context"
	v1 "github.com/cloudforet-io/api/dist/go/spaceone/api/core/v1"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Domain_Create_FullMethodName           = "/spaceone.api.identity.v1.Domain/create"
	Domain_Update_FullMethodName           = "/spaceone.api.identity.v1.Domain/update"
	Domain_ChangeAuthPlugin_FullMethodName = "/spaceone.api.identity.v1.Domain/change_auth_plugin"
	Domain_UpdatePlugin_FullMethodName     = "/spaceone.api.identity.v1.Domain/update_plugin"
	Domain_VerifyPlugin_FullMethodName     = "/spaceone.api.identity.v1.Domain/verify_plugin"
	Domain_Delete_FullMethodName           = "/spaceone.api.identity.v1.Domain/delete"
	Domain_Enable_FullMethodName           = "/spaceone.api.identity.v1.Domain/enable"
	Domain_Disable_FullMethodName          = "/spaceone.api.identity.v1.Domain/disable"
	Domain_Get_FullMethodName              = "/spaceone.api.identity.v1.Domain/get"
	Domain_List_FullMethodName             = "/spaceone.api.identity.v1.Domain/list"
	Domain_Stat_FullMethodName             = "/spaceone.api.identity.v1.Domain/stat"
	Domain_GetPublicKey_FullMethodName     = "/spaceone.api.identity.v1.Domain/get_public_key"
)

// DomainClient is the client API for Domain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DomainClient interface {
	Create(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*DomainInfo, error)
	Update(ctx context.Context, in *UpdateDomainRequest, opts ...grpc.CallOption) (*DomainInfo, error)
	ChangeAuthPlugin(ctx context.Context, in *ChangeAuthRequest, opts ...grpc.CallOption) (*DomainInfo, error)
	UpdatePlugin(ctx context.Context, in *UpdatePluginRequest, opts ...grpc.CallOption) (*DomainInfo, error)
	VerifyPlugin(ctx context.Context, in *DomainRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *DomainRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Enable(ctx context.Context, in *DomainRequest, opts ...grpc.CallOption) (*DomainInfo, error)
	Disable(ctx context.Context, in *DomainRequest, opts ...grpc.CallOption) (*DomainInfo, error)
	Get(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*DomainInfo, error)
	List(ctx context.Context, in *DomainQuery, opts ...grpc.CallOption) (*DomainsInfo, error)
	Stat(ctx context.Context, in *DomainStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
	GetPublicKey(ctx context.Context, in *v1.AuthenticationRequest, opts ...grpc.CallOption) (*v1.AuthenticationResponse, error)
}

type domainClient struct {
	cc grpc.ClientConnInterface
}

func NewDomainClient(cc grpc.ClientConnInterface) DomainClient {
	return &domainClient{cc}
}

func (c *domainClient) Create(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*DomainInfo, error) {
	out := new(DomainInfo)
	err := c.cc.Invoke(ctx, Domain_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) Update(ctx context.Context, in *UpdateDomainRequest, opts ...grpc.CallOption) (*DomainInfo, error) {
	out := new(DomainInfo)
	err := c.cc.Invoke(ctx, Domain_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) ChangeAuthPlugin(ctx context.Context, in *ChangeAuthRequest, opts ...grpc.CallOption) (*DomainInfo, error) {
	out := new(DomainInfo)
	err := c.cc.Invoke(ctx, Domain_ChangeAuthPlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) UpdatePlugin(ctx context.Context, in *UpdatePluginRequest, opts ...grpc.CallOption) (*DomainInfo, error) {
	out := new(DomainInfo)
	err := c.cc.Invoke(ctx, Domain_UpdatePlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) VerifyPlugin(ctx context.Context, in *DomainRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Domain_VerifyPlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) Delete(ctx context.Context, in *DomainRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Domain_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) Enable(ctx context.Context, in *DomainRequest, opts ...grpc.CallOption) (*DomainInfo, error) {
	out := new(DomainInfo)
	err := c.cc.Invoke(ctx, Domain_Enable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) Disable(ctx context.Context, in *DomainRequest, opts ...grpc.CallOption) (*DomainInfo, error) {
	out := new(DomainInfo)
	err := c.cc.Invoke(ctx, Domain_Disable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) Get(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*DomainInfo, error) {
	out := new(DomainInfo)
	err := c.cc.Invoke(ctx, Domain_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) List(ctx context.Context, in *DomainQuery, opts ...grpc.CallOption) (*DomainsInfo, error) {
	out := new(DomainsInfo)
	err := c.cc.Invoke(ctx, Domain_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) Stat(ctx context.Context, in *DomainStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, Domain_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) GetPublicKey(ctx context.Context, in *v1.AuthenticationRequest, opts ...grpc.CallOption) (*v1.AuthenticationResponse, error) {
	out := new(v1.AuthenticationResponse)
	err := c.cc.Invoke(ctx, Domain_GetPublicKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DomainServer is the server API for Domain service.
// All implementations must embed UnimplementedDomainServer
// for forward compatibility
type DomainServer interface {
	Create(context.Context, *CreateDomainRequest) (*DomainInfo, error)
	Update(context.Context, *UpdateDomainRequest) (*DomainInfo, error)
	ChangeAuthPlugin(context.Context, *ChangeAuthRequest) (*DomainInfo, error)
	UpdatePlugin(context.Context, *UpdatePluginRequest) (*DomainInfo, error)
	VerifyPlugin(context.Context, *DomainRequest) (*empty.Empty, error)
	Delete(context.Context, *DomainRequest) (*empty.Empty, error)
	Enable(context.Context, *DomainRequest) (*DomainInfo, error)
	Disable(context.Context, *DomainRequest) (*DomainInfo, error)
	Get(context.Context, *GetDomainRequest) (*DomainInfo, error)
	List(context.Context, *DomainQuery) (*DomainsInfo, error)
	Stat(context.Context, *DomainStatQuery) (*_struct.Struct, error)
	GetPublicKey(context.Context, *v1.AuthenticationRequest) (*v1.AuthenticationResponse, error)
	mustEmbedUnimplementedDomainServer()
}

// UnimplementedDomainServer must be embedded to have forward compatible implementations.
type UnimplementedDomainServer struct {
}

func (UnimplementedDomainServer) Create(context.Context, *CreateDomainRequest) (*DomainInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDomainServer) Update(context.Context, *UpdateDomainRequest) (*DomainInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDomainServer) ChangeAuthPlugin(context.Context, *ChangeAuthRequest) (*DomainInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAuthPlugin not implemented")
}
func (UnimplementedDomainServer) UpdatePlugin(context.Context, *UpdatePluginRequest) (*DomainInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlugin not implemented")
}
func (UnimplementedDomainServer) VerifyPlugin(context.Context, *DomainRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPlugin not implemented")
}
func (UnimplementedDomainServer) Delete(context.Context, *DomainRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDomainServer) Enable(context.Context, *DomainRequest) (*DomainInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (UnimplementedDomainServer) Disable(context.Context, *DomainRequest) (*DomainInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedDomainServer) Get(context.Context, *GetDomainRequest) (*DomainInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDomainServer) List(context.Context, *DomainQuery) (*DomainsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDomainServer) Stat(context.Context, *DomainStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedDomainServer) GetPublicKey(context.Context, *v1.AuthenticationRequest) (*v1.AuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicKey not implemented")
}
func (UnimplementedDomainServer) mustEmbedUnimplementedDomainServer() {}

// UnsafeDomainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DomainServer will
// result in compilation errors.
type UnsafeDomainServer interface {
	mustEmbedUnimplementedDomainServer()
}

func RegisterDomainServer(s grpc.ServiceRegistrar, srv DomainServer) {
	s.RegisterService(&Domain_ServiceDesc, srv)
}

func _Domain_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Domain_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).Create(ctx, req.(*CreateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Domain_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).Update(ctx, req.(*UpdateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_ChangeAuthPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).ChangeAuthPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Domain_ChangeAuthPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).ChangeAuthPlugin(ctx, req.(*ChangeAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_UpdatePlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).UpdatePlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Domain_UpdatePlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).UpdatePlugin(ctx, req.(*UpdatePluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_VerifyPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).VerifyPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Domain_VerifyPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).VerifyPlugin(ctx, req.(*DomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Domain_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).Delete(ctx, req.(*DomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Domain_Enable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).Enable(ctx, req.(*DomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Domain_Disable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).Disable(ctx, req.(*DomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Domain_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).Get(ctx, req.(*GetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Domain_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).List(ctx, req.(*DomainQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Domain_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).Stat(ctx, req.(*DomainStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_GetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.AuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).GetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Domain_GetPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).GetPublicKey(ctx, req.(*v1.AuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Domain_ServiceDesc is the grpc.ServiceDesc for Domain service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Domain_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.identity.v1.Domain",
	HandlerType: (*DomainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _Domain_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _Domain_Update_Handler,
		},
		{
			MethodName: "change_auth_plugin",
			Handler:    _Domain_ChangeAuthPlugin_Handler,
		},
		{
			MethodName: "update_plugin",
			Handler:    _Domain_UpdatePlugin_Handler,
		},
		{
			MethodName: "verify_plugin",
			Handler:    _Domain_VerifyPlugin_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _Domain_Delete_Handler,
		},
		{
			MethodName: "enable",
			Handler:    _Domain_Enable_Handler,
		},
		{
			MethodName: "disable",
			Handler:    _Domain_Disable_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Domain_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _Domain_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _Domain_Stat_Handler,
		},
		{
			MethodName: "get_public_key",
			Handler:    _Domain_GetPublicKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/identity/v1/domain.proto",
}
