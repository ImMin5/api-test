// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: spaceone/api/identity/v1/project_group.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProjectGroup_Create_FullMethodName       = "/spaceone.api.identity.v1.ProjectGroup/create"
	ProjectGroup_Update_FullMethodName       = "/spaceone.api.identity.v1.ProjectGroup/update"
	ProjectGroup_Delete_FullMethodName       = "/spaceone.api.identity.v1.ProjectGroup/delete"
	ProjectGroup_Get_FullMethodName          = "/spaceone.api.identity.v1.ProjectGroup/get"
	ProjectGroup_List_FullMethodName         = "/spaceone.api.identity.v1.ProjectGroup/list"
	ProjectGroup_Stat_FullMethodName         = "/spaceone.api.identity.v1.ProjectGroup/stat"
	ProjectGroup_AddMember_FullMethodName    = "/spaceone.api.identity.v1.ProjectGroup/add_member"
	ProjectGroup_ModifyMember_FullMethodName = "/spaceone.api.identity.v1.ProjectGroup/modify_member"
	ProjectGroup_RemoveMember_FullMethodName = "/spaceone.api.identity.v1.ProjectGroup/remove_member"
	ProjectGroup_ListMembers_FullMethodName  = "/spaceone.api.identity.v1.ProjectGroup/list_members"
	ProjectGroup_ListProjects_FullMethodName = "/spaceone.api.identity.v1.ProjectGroup/list_projects"
)

// ProjectGroupClient is the client API for ProjectGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectGroupClient interface {
	Create(ctx context.Context, in *CreateProjectGroupRequest, opts ...grpc.CallOption) (*ProjectGroupInfo, error)
	Update(ctx context.Context, in *UpdateProjectGroupRequest, opts ...grpc.CallOption) (*ProjectGroupInfo, error)
	Delete(ctx context.Context, in *ProjectGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *GetProjectGroupRequest, opts ...grpc.CallOption) (*ProjectGroupInfo, error)
	List(ctx context.Context, in *ProjectGroupQuery, opts ...grpc.CallOption) (*ProjectGroupsInfo, error)
	Stat(ctx context.Context, in *ProjectGroupStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
	AddMember(ctx context.Context, in *AddProjectGroupMemberRequest, opts ...grpc.CallOption) (*ProjectGroupRoleBindingInfo, error)
	ModifyMember(ctx context.Context, in *ModifyProjectGroupMemberRequest, opts ...grpc.CallOption) (*ProjectGroupRoleBindingInfo, error)
	RemoveMember(ctx context.Context, in *RemoveProjectGroupMemberRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListMembers(ctx context.Context, in *ProjectGroupMemberQuery, opts ...grpc.CallOption) (*ProjectGroupRoleBindingsInfo, error)
	ListProjects(ctx context.Context, in *ProjectGroupProjectQuery, opts ...grpc.CallOption) (*ProjectGroupProjectsInfo, error)
}

type projectGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectGroupClient(cc grpc.ClientConnInterface) ProjectGroupClient {
	return &projectGroupClient{cc}
}

func (c *projectGroupClient) Create(ctx context.Context, in *CreateProjectGroupRequest, opts ...grpc.CallOption) (*ProjectGroupInfo, error) {
	out := new(ProjectGroupInfo)
	err := c.cc.Invoke(ctx, ProjectGroup_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectGroupClient) Update(ctx context.Context, in *UpdateProjectGroupRequest, opts ...grpc.CallOption) (*ProjectGroupInfo, error) {
	out := new(ProjectGroupInfo)
	err := c.cc.Invoke(ctx, ProjectGroup_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectGroupClient) Delete(ctx context.Context, in *ProjectGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ProjectGroup_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectGroupClient) Get(ctx context.Context, in *GetProjectGroupRequest, opts ...grpc.CallOption) (*ProjectGroupInfo, error) {
	out := new(ProjectGroupInfo)
	err := c.cc.Invoke(ctx, ProjectGroup_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectGroupClient) List(ctx context.Context, in *ProjectGroupQuery, opts ...grpc.CallOption) (*ProjectGroupsInfo, error) {
	out := new(ProjectGroupsInfo)
	err := c.cc.Invoke(ctx, ProjectGroup_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectGroupClient) Stat(ctx context.Context, in *ProjectGroupStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, ProjectGroup_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectGroupClient) AddMember(ctx context.Context, in *AddProjectGroupMemberRequest, opts ...grpc.CallOption) (*ProjectGroupRoleBindingInfo, error) {
	out := new(ProjectGroupRoleBindingInfo)
	err := c.cc.Invoke(ctx, ProjectGroup_AddMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectGroupClient) ModifyMember(ctx context.Context, in *ModifyProjectGroupMemberRequest, opts ...grpc.CallOption) (*ProjectGroupRoleBindingInfo, error) {
	out := new(ProjectGroupRoleBindingInfo)
	err := c.cc.Invoke(ctx, ProjectGroup_ModifyMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectGroupClient) RemoveMember(ctx context.Context, in *RemoveProjectGroupMemberRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ProjectGroup_RemoveMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectGroupClient) ListMembers(ctx context.Context, in *ProjectGroupMemberQuery, opts ...grpc.CallOption) (*ProjectGroupRoleBindingsInfo, error) {
	out := new(ProjectGroupRoleBindingsInfo)
	err := c.cc.Invoke(ctx, ProjectGroup_ListMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectGroupClient) ListProjects(ctx context.Context, in *ProjectGroupProjectQuery, opts ...grpc.CallOption) (*ProjectGroupProjectsInfo, error) {
	out := new(ProjectGroupProjectsInfo)
	err := c.cc.Invoke(ctx, ProjectGroup_ListProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectGroupServer is the server API for ProjectGroup service.
// All implementations must embed UnimplementedProjectGroupServer
// for forward compatibility
type ProjectGroupServer interface {
	Create(context.Context, *CreateProjectGroupRequest) (*ProjectGroupInfo, error)
	Update(context.Context, *UpdateProjectGroupRequest) (*ProjectGroupInfo, error)
	Delete(context.Context, *ProjectGroupRequest) (*empty.Empty, error)
	Get(context.Context, *GetProjectGroupRequest) (*ProjectGroupInfo, error)
	List(context.Context, *ProjectGroupQuery) (*ProjectGroupsInfo, error)
	Stat(context.Context, *ProjectGroupStatQuery) (*_struct.Struct, error)
	AddMember(context.Context, *AddProjectGroupMemberRequest) (*ProjectGroupRoleBindingInfo, error)
	ModifyMember(context.Context, *ModifyProjectGroupMemberRequest) (*ProjectGroupRoleBindingInfo, error)
	RemoveMember(context.Context, *RemoveProjectGroupMemberRequest) (*empty.Empty, error)
	ListMembers(context.Context, *ProjectGroupMemberQuery) (*ProjectGroupRoleBindingsInfo, error)
	ListProjects(context.Context, *ProjectGroupProjectQuery) (*ProjectGroupProjectsInfo, error)
	mustEmbedUnimplementedProjectGroupServer()
}

// UnimplementedProjectGroupServer must be embedded to have forward compatible implementations.
type UnimplementedProjectGroupServer struct {
}

func (UnimplementedProjectGroupServer) Create(context.Context, *CreateProjectGroupRequest) (*ProjectGroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProjectGroupServer) Update(context.Context, *UpdateProjectGroupRequest) (*ProjectGroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProjectGroupServer) Delete(context.Context, *ProjectGroupRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedProjectGroupServer) Get(context.Context, *GetProjectGroupRequest) (*ProjectGroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProjectGroupServer) List(context.Context, *ProjectGroupQuery) (*ProjectGroupsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProjectGroupServer) Stat(context.Context, *ProjectGroupStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedProjectGroupServer) AddMember(context.Context, *AddProjectGroupMemberRequest) (*ProjectGroupRoleBindingInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMember not implemented")
}
func (UnimplementedProjectGroupServer) ModifyMember(context.Context, *ModifyProjectGroupMemberRequest) (*ProjectGroupRoleBindingInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyMember not implemented")
}
func (UnimplementedProjectGroupServer) RemoveMember(context.Context, *RemoveProjectGroupMemberRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMember not implemented")
}
func (UnimplementedProjectGroupServer) ListMembers(context.Context, *ProjectGroupMemberQuery) (*ProjectGroupRoleBindingsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}
func (UnimplementedProjectGroupServer) ListProjects(context.Context, *ProjectGroupProjectQuery) (*ProjectGroupProjectsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedProjectGroupServer) mustEmbedUnimplementedProjectGroupServer() {}

// UnsafeProjectGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectGroupServer will
// result in compilation errors.
type UnsafeProjectGroupServer interface {
	mustEmbedUnimplementedProjectGroupServer()
}

func RegisterProjectGroupServer(s grpc.ServiceRegistrar, srv ProjectGroupServer) {
	s.RegisterService(&ProjectGroup_ServiceDesc, srv)
}

func _ProjectGroup_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectGroupServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectGroup_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectGroupServer).Create(ctx, req.(*CreateProjectGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectGroup_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectGroupServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectGroup_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectGroupServer).Update(ctx, req.(*UpdateProjectGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectGroup_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectGroupServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectGroup_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectGroupServer).Delete(ctx, req.(*ProjectGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectGroup_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectGroupServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectGroup_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectGroupServer).Get(ctx, req.(*GetProjectGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectGroup_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectGroupQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectGroupServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectGroup_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectGroupServer).List(ctx, req.(*ProjectGroupQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectGroup_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectGroupStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectGroupServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectGroup_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectGroupServer).Stat(ctx, req.(*ProjectGroupStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectGroup_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectGroupServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectGroup_AddMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectGroupServer).AddMember(ctx, req.(*AddProjectGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectGroup_ModifyMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyProjectGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectGroupServer).ModifyMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectGroup_ModifyMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectGroupServer).ModifyMember(ctx, req.(*ModifyProjectGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectGroup_RemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProjectGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectGroupServer).RemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectGroup_RemoveMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectGroupServer).RemoveMember(ctx, req.(*RemoveProjectGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectGroup_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectGroupMemberQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectGroupServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectGroup_ListMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectGroupServer).ListMembers(ctx, req.(*ProjectGroupMemberQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectGroup_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectGroupProjectQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectGroupServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectGroup_ListProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectGroupServer).ListProjects(ctx, req.(*ProjectGroupProjectQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectGroup_ServiceDesc is the grpc.ServiceDesc for ProjectGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.identity.v1.ProjectGroup",
	HandlerType: (*ProjectGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _ProjectGroup_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _ProjectGroup_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _ProjectGroup_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _ProjectGroup_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _ProjectGroup_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _ProjectGroup_Stat_Handler,
		},
		{
			MethodName: "add_member",
			Handler:    _ProjectGroup_AddMember_Handler,
		},
		{
			MethodName: "modify_member",
			Handler:    _ProjectGroup_ModifyMember_Handler,
		},
		{
			MethodName: "remove_member",
			Handler:    _ProjectGroup_RemoveMember_Handler,
		},
		{
			MethodName: "list_members",
			Handler:    _ProjectGroup_ListMembers_Handler,
		},
		{
			MethodName: "list_projects",
			Handler:    _ProjectGroup_ListProjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/identity/v1/project_group.proto",
}
