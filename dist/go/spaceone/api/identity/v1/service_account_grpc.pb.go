// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: spaceone/api/identity/v1/service_account.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServiceAccount_Create_FullMethodName = "/spaceone.api.identity.v1.ServiceAccount/create"
	ServiceAccount_Update_FullMethodName = "/spaceone.api.identity.v1.ServiceAccount/update"
	ServiceAccount_Delete_FullMethodName = "/spaceone.api.identity.v1.ServiceAccount/delete"
	ServiceAccount_Get_FullMethodName    = "/spaceone.api.identity.v1.ServiceAccount/get"
	ServiceAccount_List_FullMethodName   = "/spaceone.api.identity.v1.ServiceAccount/list"
	ServiceAccount_Stat_FullMethodName   = "/spaceone.api.identity.v1.ServiceAccount/stat"
)

// ServiceAccountClient is the client API for ServiceAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceAccountClient interface {
	Create(ctx context.Context, in *CreateServiceAccountRequest, opts ...grpc.CallOption) (*ServiceAccountInfo, error)
	Update(ctx context.Context, in *UpdateServiceAccountRequest, opts ...grpc.CallOption) (*ServiceAccountInfo, error)
	Delete(ctx context.Context, in *ServiceAccountRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *GetServiceAccountRequest, opts ...grpc.CallOption) (*ServiceAccountInfo, error)
	List(ctx context.Context, in *ServiceAccountQuery, opts ...grpc.CallOption) (*ServiceAccountsInfo, error)
	Stat(ctx context.Context, in *ServiceAccountStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type serviceAccountClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceAccountClient(cc grpc.ClientConnInterface) ServiceAccountClient {
	return &serviceAccountClient{cc}
}

func (c *serviceAccountClient) Create(ctx context.Context, in *CreateServiceAccountRequest, opts ...grpc.CallOption) (*ServiceAccountInfo, error) {
	out := new(ServiceAccountInfo)
	err := c.cc.Invoke(ctx, ServiceAccount_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountClient) Update(ctx context.Context, in *UpdateServiceAccountRequest, opts ...grpc.CallOption) (*ServiceAccountInfo, error) {
	out := new(ServiceAccountInfo)
	err := c.cc.Invoke(ctx, ServiceAccount_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountClient) Delete(ctx context.Context, in *ServiceAccountRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ServiceAccount_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountClient) Get(ctx context.Context, in *GetServiceAccountRequest, opts ...grpc.CallOption) (*ServiceAccountInfo, error) {
	out := new(ServiceAccountInfo)
	err := c.cc.Invoke(ctx, ServiceAccount_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountClient) List(ctx context.Context, in *ServiceAccountQuery, opts ...grpc.CallOption) (*ServiceAccountsInfo, error) {
	out := new(ServiceAccountsInfo)
	err := c.cc.Invoke(ctx, ServiceAccount_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountClient) Stat(ctx context.Context, in *ServiceAccountStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, ServiceAccount_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceAccountServer is the server API for ServiceAccount service.
// All implementations must embed UnimplementedServiceAccountServer
// for forward compatibility
type ServiceAccountServer interface {
	Create(context.Context, *CreateServiceAccountRequest) (*ServiceAccountInfo, error)
	Update(context.Context, *UpdateServiceAccountRequest) (*ServiceAccountInfo, error)
	Delete(context.Context, *ServiceAccountRequest) (*empty.Empty, error)
	Get(context.Context, *GetServiceAccountRequest) (*ServiceAccountInfo, error)
	List(context.Context, *ServiceAccountQuery) (*ServiceAccountsInfo, error)
	Stat(context.Context, *ServiceAccountStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedServiceAccountServer()
}

// UnimplementedServiceAccountServer must be embedded to have forward compatible implementations.
type UnimplementedServiceAccountServer struct {
}

func (UnimplementedServiceAccountServer) Create(context.Context, *CreateServiceAccountRequest) (*ServiceAccountInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedServiceAccountServer) Update(context.Context, *UpdateServiceAccountRequest) (*ServiceAccountInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedServiceAccountServer) Delete(context.Context, *ServiceAccountRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedServiceAccountServer) Get(context.Context, *GetServiceAccountRequest) (*ServiceAccountInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedServiceAccountServer) List(context.Context, *ServiceAccountQuery) (*ServiceAccountsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedServiceAccountServer) Stat(context.Context, *ServiceAccountStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedServiceAccountServer) mustEmbedUnimplementedServiceAccountServer() {}

// UnsafeServiceAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceAccountServer will
// result in compilation errors.
type UnsafeServiceAccountServer interface {
	mustEmbedUnimplementedServiceAccountServer()
}

func RegisterServiceAccountServer(s grpc.ServiceRegistrar, srv ServiceAccountServer) {
	s.RegisterService(&ServiceAccount_ServiceDesc, srv)
}

func _ServiceAccount_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAccount_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountServer).Create(ctx, req.(*CreateServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccount_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAccount_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountServer).Update(ctx, req.(*UpdateServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccount_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAccount_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountServer).Delete(ctx, req.(*ServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccount_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAccount_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountServer).Get(ctx, req.(*GetServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccount_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceAccountQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAccount_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountServer).List(ctx, req.(*ServiceAccountQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccount_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceAccountStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAccount_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountServer).Stat(ctx, req.(*ServiceAccountStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceAccount_ServiceDesc is the grpc.ServiceDesc for ServiceAccount service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceAccount_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.identity.v1.ServiceAccount",
	HandlerType: (*ServiceAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _ServiceAccount_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _ServiceAccount_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _ServiceAccount_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _ServiceAccount_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _ServiceAccount_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _ServiceAccount_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/identity/v1/service_account.proto",
}
