// A CloudServiceType is a classification with hierarchical information of `CloudService`. A CloudServiceType provides information about which `group` a specific `Resource` belongs to and which `Services` are in it.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: spaceone/api/inventory/v1/cloud_service_type.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CloudServiceType_Create_FullMethodName = "/spaceone.api.inventory.v1.CloudServiceType/create"
	CloudServiceType_Update_FullMethodName = "/spaceone.api.inventory.v1.CloudServiceType/update"
	CloudServiceType_Delete_FullMethodName = "/spaceone.api.inventory.v1.CloudServiceType/delete"
	CloudServiceType_Get_FullMethodName    = "/spaceone.api.inventory.v1.CloudServiceType/get"
	CloudServiceType_List_FullMethodName   = "/spaceone.api.inventory.v1.CloudServiceType/list"
	CloudServiceType_Stat_FullMethodName   = "/spaceone.api.inventory.v1.CloudServiceType/stat"
)

// CloudServiceTypeClient is the client API for CloudServiceType service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudServiceTypeClient interface {
	// Creates a new CloudServiceType. You must specify the `name`, `provider`, and `group` parameters to create a CloudServiceType. One or several CloudServiceTypes exist in a specific `group`, and each CloudServiceType is identified by the `name` parameter.
	Create(ctx context.Context, in *CreateCloudServiceTypeRequest, opts ...grpc.CallOption) (*CloudServiceTypeInfo, error)
	// Updates a specific CloudServiceType. You can make changes in CloudServiceType settings, except for `name`, `provider` and `group`. In particular, you can set the CloudServiceType's priority in a `group`.
	Update(ctx context.Context, in *UpdateCloudServiceTypeRequest, opts ...grpc.CallOption) (*CloudServiceTypeInfo, error)
	// Deletes a specific CloudServiceType. You must specify the `cloud_service_type_id` of the CloudServiceType to delete.
	Delete(ctx context.Context, in *CloudServiceTypeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Gets a specific CloudServiceType. Prints detailed information about the CloudServiceType.
	Get(ctx context.Context, in *GetCloudServiceTypeRequest, opts ...grpc.CallOption) (*CloudServiceTypeInfo, error)
	// Gets a list of all CloudServiceTypes. You can use a query to get a filtered list of CloudServiceTypes.
	List(ctx context.Context, in *CloudServiceTypeQuery, opts ...grpc.CallOption) (*CloudServiceTypesInfo, error)
	Stat(ctx context.Context, in *CloudServiceTypeStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type cloudServiceTypeClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudServiceTypeClient(cc grpc.ClientConnInterface) CloudServiceTypeClient {
	return &cloudServiceTypeClient{cc}
}

func (c *cloudServiceTypeClient) Create(ctx context.Context, in *CreateCloudServiceTypeRequest, opts ...grpc.CallOption) (*CloudServiceTypeInfo, error) {
	out := new(CloudServiceTypeInfo)
	err := c.cc.Invoke(ctx, CloudServiceType_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceTypeClient) Update(ctx context.Context, in *UpdateCloudServiceTypeRequest, opts ...grpc.CallOption) (*CloudServiceTypeInfo, error) {
	out := new(CloudServiceTypeInfo)
	err := c.cc.Invoke(ctx, CloudServiceType_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceTypeClient) Delete(ctx context.Context, in *CloudServiceTypeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CloudServiceType_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceTypeClient) Get(ctx context.Context, in *GetCloudServiceTypeRequest, opts ...grpc.CallOption) (*CloudServiceTypeInfo, error) {
	out := new(CloudServiceTypeInfo)
	err := c.cc.Invoke(ctx, CloudServiceType_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceTypeClient) List(ctx context.Context, in *CloudServiceTypeQuery, opts ...grpc.CallOption) (*CloudServiceTypesInfo, error) {
	out := new(CloudServiceTypesInfo)
	err := c.cc.Invoke(ctx, CloudServiceType_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceTypeClient) Stat(ctx context.Context, in *CloudServiceTypeStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, CloudServiceType_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudServiceTypeServer is the server API for CloudServiceType service.
// All implementations must embed UnimplementedCloudServiceTypeServer
// for forward compatibility
type CloudServiceTypeServer interface {
	// Creates a new CloudServiceType. You must specify the `name`, `provider`, and `group` parameters to create a CloudServiceType. One or several CloudServiceTypes exist in a specific `group`, and each CloudServiceType is identified by the `name` parameter.
	Create(context.Context, *CreateCloudServiceTypeRequest) (*CloudServiceTypeInfo, error)
	// Updates a specific CloudServiceType. You can make changes in CloudServiceType settings, except for `name`, `provider` and `group`. In particular, you can set the CloudServiceType's priority in a `group`.
	Update(context.Context, *UpdateCloudServiceTypeRequest) (*CloudServiceTypeInfo, error)
	// Deletes a specific CloudServiceType. You must specify the `cloud_service_type_id` of the CloudServiceType to delete.
	Delete(context.Context, *CloudServiceTypeRequest) (*empty.Empty, error)
	// Gets a specific CloudServiceType. Prints detailed information about the CloudServiceType.
	Get(context.Context, *GetCloudServiceTypeRequest) (*CloudServiceTypeInfo, error)
	// Gets a list of all CloudServiceTypes. You can use a query to get a filtered list of CloudServiceTypes.
	List(context.Context, *CloudServiceTypeQuery) (*CloudServiceTypesInfo, error)
	Stat(context.Context, *CloudServiceTypeStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedCloudServiceTypeServer()
}

// UnimplementedCloudServiceTypeServer must be embedded to have forward compatible implementations.
type UnimplementedCloudServiceTypeServer struct {
}

func (UnimplementedCloudServiceTypeServer) Create(context.Context, *CreateCloudServiceTypeRequest) (*CloudServiceTypeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCloudServiceTypeServer) Update(context.Context, *UpdateCloudServiceTypeRequest) (*CloudServiceTypeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCloudServiceTypeServer) Delete(context.Context, *CloudServiceTypeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCloudServiceTypeServer) Get(context.Context, *GetCloudServiceTypeRequest) (*CloudServiceTypeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCloudServiceTypeServer) List(context.Context, *CloudServiceTypeQuery) (*CloudServiceTypesInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCloudServiceTypeServer) Stat(context.Context, *CloudServiceTypeStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedCloudServiceTypeServer) mustEmbedUnimplementedCloudServiceTypeServer() {}

// UnsafeCloudServiceTypeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudServiceTypeServer will
// result in compilation errors.
type UnsafeCloudServiceTypeServer interface {
	mustEmbedUnimplementedCloudServiceTypeServer()
}

func RegisterCloudServiceTypeServer(s grpc.ServiceRegistrar, srv CloudServiceTypeServer) {
	s.RegisterService(&CloudServiceType_ServiceDesc, srv)
}

func _CloudServiceType_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCloudServiceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceTypeServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceType_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceTypeServer).Create(ctx, req.(*CreateCloudServiceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudServiceType_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCloudServiceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceTypeServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceType_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceTypeServer).Update(ctx, req.(*UpdateCloudServiceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudServiceType_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudServiceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceTypeServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceType_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceTypeServer).Delete(ctx, req.(*CloudServiceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudServiceType_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudServiceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceTypeServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceType_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceTypeServer).Get(ctx, req.(*GetCloudServiceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudServiceType_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudServiceTypeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceTypeServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceType_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceTypeServer).List(ctx, req.(*CloudServiceTypeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudServiceType_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudServiceTypeStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceTypeServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceType_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceTypeServer).Stat(ctx, req.(*CloudServiceTypeStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudServiceType_ServiceDesc is the grpc.ServiceDesc for CloudServiceType service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudServiceType_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.inventory.v1.CloudServiceType",
	HandlerType: (*CloudServiceTypeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _CloudServiceType_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _CloudServiceType_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _CloudServiceType_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _CloudServiceType_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _CloudServiceType_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _CloudServiceType_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/inventory/v1/cloud_service_type.proto",
}
