// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: spaceone/api/inventory/v1/job_task.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobTaskClient is the client API for JobTask service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobTaskClient interface {
	// desc: Deletes a specific JobTask. You must specify the `job_task_id` of the JobTask to delete.
	// request_example: >-
	// {
	// "job_task_id": "job-task-123456789012",
	// "domain_id": "domain-123456789012"
	// }
	Delete(ctx context.Context, in *JobTaskRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// desc: Gets a specific JobTask. Prints detailed information about the JobTask, including its state, updated or failure counts, and error log.
	// request_example: >-
	// {
	// "job_task_id": "job-task-123456789012",
	// "domain_id": "domain-123456789012"
	// }
	// response_example: >-
	// {
	// "job_task_id": "job-task-123456789012",
	// "status": "FAILURE",
	// "updated_count": 199,
	// "failure_count": 1,
	// "errors": [
	// {
	// "error_code": "ERROR_PLUGIN",
	// "message": "{\"tags\": [\"Could not interpret the value as a list\"]}",
	// "additional": {
	// "domain_id": "domain-123456789012",
	// "resource_id": "eventarc-us-central1-function",
	// "resource_type": "inventory.CloudService",
	// "cloud_service_group": "Pub/Sub",
	// "cloud_service_type": "Subscription",
	// "provider": "google_cloud"
	// }
	// }
	// ],
	// "job_id": "job-123456789012",
	// "secret_id": "secret-123456789012",
	// "provider": "google_cloud",
	// "service_account_id": "sa-123456789012",
	// "project_id": "project-123456789012",
	// "domain_id": "domain-123456789012",
	// "created_at": "2022-01-01T11:00:02.588Z",
	// "started_at": "2022-01-01T11:00:02.819Z",
	// "finished_at": "2022-01-01T11:00:34.398Z"
	// }
	Get(ctx context.Context, in *GetJobTaskRequest, opts ...grpc.CallOption) (*JobTaskInfo, error)
	// desc: Gets a list of all JobTasks in a specific Job. You can use a query to get a filtered list of JobTasks.
	// request_example: >-
	// {
	// "query": {}
	// }
	// response_example: >-
	// {
	// "results": [
	// {
	// "job_task_id": "job_task-69b301d0fbfc",
	// "status": "SUCCESS",
	// "updated_count": 55,
	// "job_id": "job-587a3d3b4db3",
	// "secret_id": "secret-957e407bfc15",
	// "provider": "aws",
	// "service_account_id": "sa-a41ff4765671",
	// "project_id": "project-77dffd3f7cd3",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-06-17T08:00:00.680Z",
	// "started_at": "2022-06-17T08:00:00.914Z",
	// "finished_at": "2022-06-17T08:05:48.933Z"
	// },
	// {
	// "job_task_id": "job_task-c5077338cf23",
	// "status": "SUCCESS",
	// "updated_count": 1921,
	// "job_id": "job-587a3d3b4db3",
	// "secret_id": "secret-1cd7417c1889",
	// "provider": "aws",
	// "service_account_id": "sa-5e186fcc7c91",
	// "project_id": "project-18655561c535",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-06-17T08:00:00.582Z",
	// "started_at": "2022-06-17T08:00:00.814Z",
	// "finished_at": "2022-06-17T08:07:31.995Z"
	// }
	// ],
	// "total_count": 4839
	// }
	List(ctx context.Context, in *JobTaskQuery, opts ...grpc.CallOption) (*JobTasksInfo, error)
	Stat(ctx context.Context, in *JobTaskStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type jobTaskClient struct {
	cc grpc.ClientConnInterface
}

func NewJobTaskClient(cc grpc.ClientConnInterface) JobTaskClient {
	return &jobTaskClient{cc}
}

func (c *jobTaskClient) Delete(ctx context.Context, in *JobTaskRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/spaceone.api.inventory.v1.JobTask/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobTaskClient) Get(ctx context.Context, in *GetJobTaskRequest, opts ...grpc.CallOption) (*JobTaskInfo, error) {
	out := new(JobTaskInfo)
	err := c.cc.Invoke(ctx, "/spaceone.api.inventory.v1.JobTask/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobTaskClient) List(ctx context.Context, in *JobTaskQuery, opts ...grpc.CallOption) (*JobTasksInfo, error) {
	out := new(JobTasksInfo)
	err := c.cc.Invoke(ctx, "/spaceone.api.inventory.v1.JobTask/list", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobTaskClient) Stat(ctx context.Context, in *JobTaskStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, "/spaceone.api.inventory.v1.JobTask/stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobTaskServer is the server API for JobTask service.
// All implementations must embed UnimplementedJobTaskServer
// for forward compatibility
type JobTaskServer interface {
	// desc: Deletes a specific JobTask. You must specify the `job_task_id` of the JobTask to delete.
	// request_example: >-
	// {
	// "job_task_id": "job-task-123456789012",
	// "domain_id": "domain-123456789012"
	// }
	Delete(context.Context, *JobTaskRequest) (*empty.Empty, error)
	// desc: Gets a specific JobTask. Prints detailed information about the JobTask, including its state, updated or failure counts, and error log.
	// request_example: >-
	// {
	// "job_task_id": "job-task-123456789012",
	// "domain_id": "domain-123456789012"
	// }
	// response_example: >-
	// {
	// "job_task_id": "job-task-123456789012",
	// "status": "FAILURE",
	// "updated_count": 199,
	// "failure_count": 1,
	// "errors": [
	// {
	// "error_code": "ERROR_PLUGIN",
	// "message": "{\"tags\": [\"Could not interpret the value as a list\"]}",
	// "additional": {
	// "domain_id": "domain-123456789012",
	// "resource_id": "eventarc-us-central1-function",
	// "resource_type": "inventory.CloudService",
	// "cloud_service_group": "Pub/Sub",
	// "cloud_service_type": "Subscription",
	// "provider": "google_cloud"
	// }
	// }
	// ],
	// "job_id": "job-123456789012",
	// "secret_id": "secret-123456789012",
	// "provider": "google_cloud",
	// "service_account_id": "sa-123456789012",
	// "project_id": "project-123456789012",
	// "domain_id": "domain-123456789012",
	// "created_at": "2022-01-01T11:00:02.588Z",
	// "started_at": "2022-01-01T11:00:02.819Z",
	// "finished_at": "2022-01-01T11:00:34.398Z"
	// }
	Get(context.Context, *GetJobTaskRequest) (*JobTaskInfo, error)
	// desc: Gets a list of all JobTasks in a specific Job. You can use a query to get a filtered list of JobTasks.
	// request_example: >-
	// {
	// "query": {}
	// }
	// response_example: >-
	// {
	// "results": [
	// {
	// "job_task_id": "job_task-69b301d0fbfc",
	// "status": "SUCCESS",
	// "updated_count": 55,
	// "job_id": "job-587a3d3b4db3",
	// "secret_id": "secret-957e407bfc15",
	// "provider": "aws",
	// "service_account_id": "sa-a41ff4765671",
	// "project_id": "project-77dffd3f7cd3",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-06-17T08:00:00.680Z",
	// "started_at": "2022-06-17T08:00:00.914Z",
	// "finished_at": "2022-06-17T08:05:48.933Z"
	// },
	// {
	// "job_task_id": "job_task-c5077338cf23",
	// "status": "SUCCESS",
	// "updated_count": 1921,
	// "job_id": "job-587a3d3b4db3",
	// "secret_id": "secret-1cd7417c1889",
	// "provider": "aws",
	// "service_account_id": "sa-5e186fcc7c91",
	// "project_id": "project-18655561c535",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-06-17T08:00:00.582Z",
	// "started_at": "2022-06-17T08:00:00.814Z",
	// "finished_at": "2022-06-17T08:07:31.995Z"
	// }
	// ],
	// "total_count": 4839
	// }
	List(context.Context, *JobTaskQuery) (*JobTasksInfo, error)
	Stat(context.Context, *JobTaskStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedJobTaskServer()
}

// UnimplementedJobTaskServer must be embedded to have forward compatible implementations.
type UnimplementedJobTaskServer struct {
}

func (UnimplementedJobTaskServer) Delete(context.Context, *JobTaskRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedJobTaskServer) Get(context.Context, *GetJobTaskRequest) (*JobTaskInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedJobTaskServer) List(context.Context, *JobTaskQuery) (*JobTasksInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedJobTaskServer) Stat(context.Context, *JobTaskStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedJobTaskServer) mustEmbedUnimplementedJobTaskServer() {}

// UnsafeJobTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobTaskServer will
// result in compilation errors.
type UnsafeJobTaskServer interface {
	mustEmbedUnimplementedJobTaskServer()
}

func RegisterJobTaskServer(s grpc.ServiceRegistrar, srv JobTaskServer) {
	s.RegisterService(&JobTask_ServiceDesc, srv)
}

func _JobTask_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobTaskServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaceone.api.inventory.v1.JobTask/delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobTaskServer).Delete(ctx, req.(*JobTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobTask_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobTaskServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaceone.api.inventory.v1.JobTask/get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobTaskServer).Get(ctx, req.(*GetJobTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobTask_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobTaskQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobTaskServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaceone.api.inventory.v1.JobTask/list",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobTaskServer).List(ctx, req.(*JobTaskQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobTask_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobTaskStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobTaskServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaceone.api.inventory.v1.JobTask/stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobTaskServer).Stat(ctx, req.(*JobTaskStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// JobTask_ServiceDesc is the grpc.ServiceDesc for JobTask service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobTask_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.inventory.v1.JobTask",
	HandlerType: (*JobTaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "delete",
			Handler:    _JobTask_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _JobTask_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _JobTask_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _JobTask_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/inventory/v1/job_task.proto",
}
