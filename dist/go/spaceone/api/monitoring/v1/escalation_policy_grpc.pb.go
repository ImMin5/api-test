// An EscalationPolicy is a set of rules to deliver an alert to assigned members.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: spaceone/api/monitoring/v1/escalation_policy.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EscalationPolicy_Create_FullMethodName     = "/spaceone.api.monitoring.v1.EscalationPolicy/create"
	EscalationPolicy_Update_FullMethodName     = "/spaceone.api.monitoring.v1.EscalationPolicy/update"
	EscalationPolicy_SetDefault_FullMethodName = "/spaceone.api.monitoring.v1.EscalationPolicy/set_default"
	EscalationPolicy_Delete_FullMethodName     = "/spaceone.api.monitoring.v1.EscalationPolicy/delete"
	EscalationPolicy_Get_FullMethodName        = "/spaceone.api.monitoring.v1.EscalationPolicy/get"
	EscalationPolicy_List_FullMethodName       = "/spaceone.api.monitoring.v1.EscalationPolicy/list"
	EscalationPolicy_Stat_FullMethodName       = "/spaceone.api.monitoring.v1.EscalationPolicy/stat"
)

// EscalationPolicyClient is the client API for EscalationPolicy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EscalationPolicyClient interface {
	// Creates a new EscalationPolicy. When creating an EscalationPolicy, if the project_id is assigned, the EscalationPolicy is applied to the Project with the same project_id. If an EscalationPolicy is set as a global policy, all Projects in the same domain can apply the policy.
	Create(ctx context.Context, in *CreateEscalationPolicyRequest, opts ...grpc.CallOption) (*EscalationPolicyInfo, error)
	// Updates a specific EscalationPolicy. You can make changes in EscalationPolicy settings, including the name, the escalation process, and the number of iterations.
	Update(ctx context.Context, in *UpdateEscalationPolicyRequest, opts ...grpc.CallOption) (*EscalationPolicyInfo, error)
	// Sets a specific EscalationPolicy as default. Only policies configured as global can be set as default. When a Project is created, even if you did not configure any policy to the Project, the default policy set by this api method is applied.
	SetDefault(ctx context.Context, in *EscalationPolicyRequest, opts ...grpc.CallOption) (*EscalationPolicyInfo, error)
	// Deletes a specific EscalationPolicy. Deletes the EscalationPolicy with the escalation_policy_id from the deletion request.
	Delete(ctx context.Context, in *EscalationPolicyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Gets a specific EscalationPolicy. Prints detailed information about the EscalationPolicy, including the name, rules, and termination conditions.
	Get(ctx context.Context, in *GetEscalationPolicyRequest, opts ...grpc.CallOption) (*EscalationPolicyInfo, error)
	// Gets a list of all EscalationPolicies. You can use a query to get a filtered list of EscalationPolicies.
	List(ctx context.Context, in *EscalationPolicyQuery, opts ...grpc.CallOption) (*EscalationPoliciesInfo, error)
	Stat(ctx context.Context, in *EscalationPolicyStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type escalationPolicyClient struct {
	cc grpc.ClientConnInterface
}

func NewEscalationPolicyClient(cc grpc.ClientConnInterface) EscalationPolicyClient {
	return &escalationPolicyClient{cc}
}

func (c *escalationPolicyClient) Create(ctx context.Context, in *CreateEscalationPolicyRequest, opts ...grpc.CallOption) (*EscalationPolicyInfo, error) {
	out := new(EscalationPolicyInfo)
	err := c.cc.Invoke(ctx, EscalationPolicy_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escalationPolicyClient) Update(ctx context.Context, in *UpdateEscalationPolicyRequest, opts ...grpc.CallOption) (*EscalationPolicyInfo, error) {
	out := new(EscalationPolicyInfo)
	err := c.cc.Invoke(ctx, EscalationPolicy_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escalationPolicyClient) SetDefault(ctx context.Context, in *EscalationPolicyRequest, opts ...grpc.CallOption) (*EscalationPolicyInfo, error) {
	out := new(EscalationPolicyInfo)
	err := c.cc.Invoke(ctx, EscalationPolicy_SetDefault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escalationPolicyClient) Delete(ctx context.Context, in *EscalationPolicyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, EscalationPolicy_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escalationPolicyClient) Get(ctx context.Context, in *GetEscalationPolicyRequest, opts ...grpc.CallOption) (*EscalationPolicyInfo, error) {
	out := new(EscalationPolicyInfo)
	err := c.cc.Invoke(ctx, EscalationPolicy_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escalationPolicyClient) List(ctx context.Context, in *EscalationPolicyQuery, opts ...grpc.CallOption) (*EscalationPoliciesInfo, error) {
	out := new(EscalationPoliciesInfo)
	err := c.cc.Invoke(ctx, EscalationPolicy_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escalationPolicyClient) Stat(ctx context.Context, in *EscalationPolicyStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, EscalationPolicy_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EscalationPolicyServer is the server API for EscalationPolicy service.
// All implementations must embed UnimplementedEscalationPolicyServer
// for forward compatibility
type EscalationPolicyServer interface {
	// Creates a new EscalationPolicy. When creating an EscalationPolicy, if the project_id is assigned, the EscalationPolicy is applied to the Project with the same project_id. If an EscalationPolicy is set as a global policy, all Projects in the same domain can apply the policy.
	Create(context.Context, *CreateEscalationPolicyRequest) (*EscalationPolicyInfo, error)
	// Updates a specific EscalationPolicy. You can make changes in EscalationPolicy settings, including the name, the escalation process, and the number of iterations.
	Update(context.Context, *UpdateEscalationPolicyRequest) (*EscalationPolicyInfo, error)
	// Sets a specific EscalationPolicy as default. Only policies configured as global can be set as default. When a Project is created, even if you did not configure any policy to the Project, the default policy set by this api method is applied.
	SetDefault(context.Context, *EscalationPolicyRequest) (*EscalationPolicyInfo, error)
	// Deletes a specific EscalationPolicy. Deletes the EscalationPolicy with the escalation_policy_id from the deletion request.
	Delete(context.Context, *EscalationPolicyRequest) (*empty.Empty, error)
	// Gets a specific EscalationPolicy. Prints detailed information about the EscalationPolicy, including the name, rules, and termination conditions.
	Get(context.Context, *GetEscalationPolicyRequest) (*EscalationPolicyInfo, error)
	// Gets a list of all EscalationPolicies. You can use a query to get a filtered list of EscalationPolicies.
	List(context.Context, *EscalationPolicyQuery) (*EscalationPoliciesInfo, error)
	Stat(context.Context, *EscalationPolicyStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedEscalationPolicyServer()
}

// UnimplementedEscalationPolicyServer must be embedded to have forward compatible implementations.
type UnimplementedEscalationPolicyServer struct {
}

func (UnimplementedEscalationPolicyServer) Create(context.Context, *CreateEscalationPolicyRequest) (*EscalationPolicyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEscalationPolicyServer) Update(context.Context, *UpdateEscalationPolicyRequest) (*EscalationPolicyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEscalationPolicyServer) SetDefault(context.Context, *EscalationPolicyRequest) (*EscalationPolicyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefault not implemented")
}
func (UnimplementedEscalationPolicyServer) Delete(context.Context, *EscalationPolicyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEscalationPolicyServer) Get(context.Context, *GetEscalationPolicyRequest) (*EscalationPolicyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEscalationPolicyServer) List(context.Context, *EscalationPolicyQuery) (*EscalationPoliciesInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedEscalationPolicyServer) Stat(context.Context, *EscalationPolicyStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedEscalationPolicyServer) mustEmbedUnimplementedEscalationPolicyServer() {}

// UnsafeEscalationPolicyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EscalationPolicyServer will
// result in compilation errors.
type UnsafeEscalationPolicyServer interface {
	mustEmbedUnimplementedEscalationPolicyServer()
}

func RegisterEscalationPolicyServer(s grpc.ServiceRegistrar, srv EscalationPolicyServer) {
	s.RegisterService(&EscalationPolicy_ServiceDesc, srv)
}

func _EscalationPolicy_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEscalationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscalationPolicyServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EscalationPolicy_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscalationPolicyServer).Create(ctx, req.(*CreateEscalationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscalationPolicy_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEscalationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscalationPolicyServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EscalationPolicy_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscalationPolicyServer).Update(ctx, req.(*UpdateEscalationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscalationPolicy_SetDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EscalationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscalationPolicyServer).SetDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EscalationPolicy_SetDefault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscalationPolicyServer).SetDefault(ctx, req.(*EscalationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscalationPolicy_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EscalationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscalationPolicyServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EscalationPolicy_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscalationPolicyServer).Delete(ctx, req.(*EscalationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscalationPolicy_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEscalationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscalationPolicyServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EscalationPolicy_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscalationPolicyServer).Get(ctx, req.(*GetEscalationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscalationPolicy_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EscalationPolicyQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscalationPolicyServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EscalationPolicy_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscalationPolicyServer).List(ctx, req.(*EscalationPolicyQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscalationPolicy_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EscalationPolicyStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscalationPolicyServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EscalationPolicy_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscalationPolicyServer).Stat(ctx, req.(*EscalationPolicyStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// EscalationPolicy_ServiceDesc is the grpc.ServiceDesc for EscalationPolicy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EscalationPolicy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.monitoring.v1.EscalationPolicy",
	HandlerType: (*EscalationPolicyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _EscalationPolicy_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _EscalationPolicy_Update_Handler,
		},
		{
			MethodName: "set_default",
			Handler:    _EscalationPolicy_SetDefault_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _EscalationPolicy_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _EscalationPolicy_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _EscalationPolicy_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _EscalationPolicy_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/monitoring/v1/escalation_policy.proto",
}
