// An EventRule is a rule to transform the request data when an Event is generated.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: spaceone/api/monitoring/v1/event_rule.proto

package v1

import (
	v1 "github.com/cloudforet-io/api/dist/go/spaceone/api/core/v1"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateEventRuleRequest_ConditionsPolicy int32

const (
	CreateEventRuleRequest_NONE   CreateEventRuleRequest_ConditionsPolicy = 0
	CreateEventRuleRequest_ALL    CreateEventRuleRequest_ConditionsPolicy = 1
	CreateEventRuleRequest_ANY    CreateEventRuleRequest_ConditionsPolicy = 2
	CreateEventRuleRequest_ALWAYS CreateEventRuleRequest_ConditionsPolicy = 3
)

// Enum value maps for CreateEventRuleRequest_ConditionsPolicy.
var (
	CreateEventRuleRequest_ConditionsPolicy_name = map[int32]string{
		0: "NONE",
		1: "ALL",
		2: "ANY",
		3: "ALWAYS",
	}
	CreateEventRuleRequest_ConditionsPolicy_value = map[string]int32{
		"NONE":   0,
		"ALL":    1,
		"ANY":    2,
		"ALWAYS": 3,
	}
)

func (x CreateEventRuleRequest_ConditionsPolicy) Enum() *CreateEventRuleRequest_ConditionsPolicy {
	p := new(CreateEventRuleRequest_ConditionsPolicy)
	*p = x
	return p
}

func (x CreateEventRuleRequest_ConditionsPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateEventRuleRequest_ConditionsPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_monitoring_v1_event_rule_proto_enumTypes[0].Descriptor()
}

func (CreateEventRuleRequest_ConditionsPolicy) Type() protoreflect.EnumType {
	return &file_spaceone_api_monitoring_v1_event_rule_proto_enumTypes[0]
}

func (x CreateEventRuleRequest_ConditionsPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateEventRuleRequest_ConditionsPolicy.Descriptor instead.
func (CreateEventRuleRequest_ConditionsPolicy) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_monitoring_v1_event_rule_proto_rawDescGZIP(), []int{5, 0}
}

type UpdateEventRuleRequest_ConditionsPolicy int32

const (
	UpdateEventRuleRequest_NONE   UpdateEventRuleRequest_ConditionsPolicy = 0
	UpdateEventRuleRequest_ALL    UpdateEventRuleRequest_ConditionsPolicy = 1
	UpdateEventRuleRequest_ANY    UpdateEventRuleRequest_ConditionsPolicy = 2
	UpdateEventRuleRequest_ALWAYS UpdateEventRuleRequest_ConditionsPolicy = 3
)

// Enum value maps for UpdateEventRuleRequest_ConditionsPolicy.
var (
	UpdateEventRuleRequest_ConditionsPolicy_name = map[int32]string{
		0: "NONE",
		1: "ALL",
		2: "ANY",
		3: "ALWAYS",
	}
	UpdateEventRuleRequest_ConditionsPolicy_value = map[string]int32{
		"NONE":   0,
		"ALL":    1,
		"ANY":    2,
		"ALWAYS": 3,
	}
)

func (x UpdateEventRuleRequest_ConditionsPolicy) Enum() *UpdateEventRuleRequest_ConditionsPolicy {
	p := new(UpdateEventRuleRequest_ConditionsPolicy)
	*p = x
	return p
}

func (x UpdateEventRuleRequest_ConditionsPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateEventRuleRequest_ConditionsPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_monitoring_v1_event_rule_proto_enumTypes[1].Descriptor()
}

func (UpdateEventRuleRequest_ConditionsPolicy) Type() protoreflect.EnumType {
	return &file_spaceone_api_monitoring_v1_event_rule_proto_enumTypes[1]
}

func (x UpdateEventRuleRequest_ConditionsPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateEventRuleRequest_ConditionsPolicy.Descriptor instead.
func (UpdateEventRuleRequest_ConditionsPolicy) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_monitoring_v1_event_rule_proto_rawDescGZIP(), []int{6, 0}
}

type EventRuleQuery_EventRuleScope int32

const (
	EventRuleQuery_SCOPE_NONE EventRuleQuery_EventRuleScope = 0
	EventRuleQuery_GLOBAL     EventRuleQuery_EventRuleScope = 1
	EventRuleQuery_PROJECT    EventRuleQuery_EventRuleScope = 2
)

// Enum value maps for EventRuleQuery_EventRuleScope.
var (
	EventRuleQuery_EventRuleScope_name = map[int32]string{
		0: "SCOPE_NONE",
		1: "GLOBAL",
		2: "PROJECT",
	}
	EventRuleQuery_EventRuleScope_value = map[string]int32{
		"SCOPE_NONE": 0,
		"GLOBAL":     1,
		"PROJECT":    2,
	}
)

func (x EventRuleQuery_EventRuleScope) Enum() *EventRuleQuery_EventRuleScope {
	p := new(EventRuleQuery_EventRuleScope)
	*p = x
	return p
}

func (x EventRuleQuery_EventRuleScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventRuleQuery_EventRuleScope) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_monitoring_v1_event_rule_proto_enumTypes[2].Descriptor()
}

func (EventRuleQuery_EventRuleScope) Type() protoreflect.EnumType {
	return &file_spaceone_api_monitoring_v1_event_rule_proto_enumTypes[2]
}

func (x EventRuleQuery_EventRuleScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventRuleQuery_EventRuleScope.Descriptor instead.
func (EventRuleQuery_EventRuleScope) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_monitoring_v1_event_rule_proto_rawDescGZIP(), []int{10, 0}
}

type EventRuleInfo_EventRuleScope int32

const (
	EventRuleInfo_SCOPE_NONE EventRuleInfo_EventRuleScope = 0
	EventRuleInfo_GLOBAL     EventRuleInfo_EventRuleScope = 1
	EventRuleInfo_PROJECT    EventRuleInfo_EventRuleScope = 2
)

// Enum value maps for EventRuleInfo_EventRuleScope.
var (
	EventRuleInfo_EventRuleScope_name = map[int32]string{
		0: "SCOPE_NONE",
		1: "GLOBAL",
		2: "PROJECT",
	}
	EventRuleInfo_EventRuleScope_value = map[string]int32{
		"SCOPE_NONE": 0,
		"GLOBAL":     1,
		"PROJECT":    2,
	}
)

func (x EventRuleInfo_EventRuleScope) Enum() *EventRuleInfo_EventRuleScope {
	p := new(EventRuleInfo_EventRuleScope)
	*p = x
	return p
}

func (x EventRuleInfo_EventRuleScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventRuleInfo_EventRuleScope) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_monitoring_v1_event_rule_proto_enumTypes[3].Descriptor()
}

func (EventRuleInfo_EventRuleScope) Type() protoreflect.EnumType {
	return &file_spaceone_api_monitoring_v1_event_rule_proto_enumTypes[3]
}

func (x EventRuleInfo_EventRuleScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventRuleInfo_EventRuleScope.Descriptor instead.
func (EventRuleInfo_EventRuleScope) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_monitoring_v1_event_rule_proto_rawDescGZIP(), []int{11, 0}
}

type EventRuleInfo_ConditionsPolicy int32

const (
	EventRuleInfo_NONE   EventRuleInfo_ConditionsPolicy = 0
	EventRuleInfo_ALL    EventRuleInfo_ConditionsPolicy = 1
	EventRuleInfo_ANY    EventRuleInfo_ConditionsPolicy = 2
	EventRuleInfo_ALWAYS EventRuleInfo_ConditionsPolicy = 3
)

// Enum value maps for EventRuleInfo_ConditionsPolicy.
var (
	EventRuleInfo_ConditionsPolicy_name = map[int32]string{
		0: "NONE",
		1: "ALL",
		2: "ANY",
		3: "ALWAYS",
	}
	EventRuleInfo_ConditionsPolicy_value = map[string]int32{
		"NONE":   0,
		"ALL":    1,
		"ANY":    2,
		"ALWAYS": 3,
	}
)

func (x EventRuleInfo_ConditionsPolicy) Enum() *EventRuleInfo_ConditionsPolicy {
	p := new(EventRuleInfo_ConditionsPolicy)
	*p = x
	return p
}

func (x EventRuleInfo_ConditionsPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventRuleInfo_ConditionsPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_monitoring_v1_event_rule_proto_enumTypes[4].Descriptor()
}

func (EventRuleInfo_ConditionsPolicy) Type() protoreflect.EnumType {
	return &file_spaceone_api_monitoring_v1_event_rule_proto_enumTypes[4]
}

func (x EventRuleInfo_ConditionsPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventRuleInfo_ConditionsPolicy.Descriptor instead.
func (EventRuleInfo_ConditionsPolicy) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_monitoring_v1_event_rule_proto_rawDescGZIP(), []int{11, 1}
}

type EventRuleCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value    string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Operator string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *EventRuleCondition) Reset() {
	*x = EventRuleCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRuleCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRuleCondition) ProtoMessage() {}

func (x *EventRuleCondition) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRuleCondition.ProtoReflect.Descriptor instead.
func (*EventRuleCondition) Descriptor() ([]byte, []int) {
	return file_spaceone_api_monitoring_v1_event_rule_proto_rawDescGZIP(), []int{0}
}

func (x *EventRuleCondition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EventRuleCondition) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EventRuleCondition) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type EventRuleActionResponder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType string `protobuf:"bytes,1,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	ResourceId   string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *EventRuleActionResponder) Reset() {
	*x = EventRuleActionResponder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRuleActionResponder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRuleActionResponder) ProtoMessage() {}

func (x *EventRuleActionResponder) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRuleActionResponder.ProtoReflect.Descriptor instead.
func (*EventRuleActionResponder) Descriptor() ([]byte, []int) {
	return file_spaceone_api_monitoring_v1_event_rule_proto_rawDescGZIP(), []int{1}
}

func (x *EventRuleActionResponder) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *EventRuleActionResponder) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

type MatchRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Target string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *MatchRule) Reset() {
	*x = MatchRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRule) ProtoMessage() {}

func (x *MatchRule) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRule.ProtoReflect.Descriptor instead.
func (*MatchRule) Descriptor() ([]byte, []int) {
	return file_spaceone_api_monitoring_v1_event_rule_proto_rawDescGZIP(), []int{2}
}

func (x *MatchRule) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *MatchRule) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type EventRuleActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeAssignee       string                      `protobuf:"bytes,1,opt,name=change_assignee,json=changeAssignee,proto3" json:"change_assignee,omitempty"`
	ChangeUrgency        string                      `protobuf:"bytes,2,opt,name=change_urgency,json=changeUrgency,proto3" json:"change_urgency,omitempty"`
	ChangeProject        string                      `protobuf:"bytes,3,opt,name=change_project,json=changeProject,proto3" json:"change_project,omitempty"`
	AddProjectDependency []string                    `protobuf:"bytes,4,rep,name=add_project_dependency,json=addProjectDependency,proto3" json:"add_project_dependency,omitempty"`
	AddResponder         []*EventRuleActionResponder `protobuf:"bytes,5,rep,name=add_responder,json=addResponder,proto3" json:"add_responder,omitempty"`
	MatchServiceAccount  *MatchRule                  `protobuf:"bytes,6,opt,name=match_service_account,json=matchServiceAccount,proto3" json:"match_service_account,omitempty"`
	AddAdditionalInfo    *_struct.Struct             `protobuf:"bytes,7,opt,name=add_additional_info,json=addAdditionalInfo,proto3" json:"add_additional_info,omitempty"`
	NoNotification       bool                        `protobuf:"varint,8,opt,name=no_notification,json=noNotification,proto3" json:"no_notification,omitempty"`
}

func (x *EventRuleActions) Reset() {
	*x = EventRuleActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRuleActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRuleActions) ProtoMessage() {}

func (x *EventRuleActions) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRuleActions.ProtoReflect.Descriptor instead.
func (*EventRuleActions) Descriptor() ([]byte, []int) {
	return file_spaceone_api_monitoring_v1_event_rule_proto_rawDescGZIP(), []int{3}
}

func (x *EventRuleActions) GetChangeAssignee() string {
	if x != nil {
		return x.ChangeAssignee
	}
	return ""
}

func (x *EventRuleActions) GetChangeUrgency() string {
	if x != nil {
		return x.ChangeUrgency
	}
	return ""
}

func (x *EventRuleActions) GetChangeProject() string {
	if x != nil {
		return x.ChangeProject
	}
	return ""
}

func (x *EventRuleActions) GetAddProjectDependency() []string {
	if x != nil {
		return x.AddProjectDependency
	}
	return nil
}

func (x *EventRuleActions) GetAddResponder() []*EventRuleActionResponder {
	if x != nil {
		return x.AddResponder
	}
	return nil
}

func (x *EventRuleActions) GetMatchServiceAccount() *MatchRule {
	if x != nil {
		return x.MatchServiceAccount
	}
	return nil
}

func (x *EventRuleActions) GetAddAdditionalInfo() *_struct.Struct {
	if x != nil {
		return x.AddAdditionalInfo
	}
	return nil
}

func (x *EventRuleActions) GetNoNotification() bool {
	if x != nil {
		return x.NoNotification
	}
	return false
}

type EventRuleOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StopProcessing bool `protobuf:"varint,1,opt,name=stop_processing,json=stopProcessing,proto3" json:"stop_processing,omitempty"`
}

func (x *EventRuleOptions) Reset() {
	*x = EventRuleOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRuleOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRuleOptions) ProtoMessage() {}

func (x *EventRuleOptions) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRuleOptions.ProtoReflect.Descriptor instead.
func (*EventRuleOptions) Descriptor() ([]byte, []int) {
	return file_spaceone_api_monitoring_v1_event_rule_proto_rawDescGZIP(), []int{4}
}

func (x *EventRuleOptions) GetStopProcessing() bool {
	if x != nil {
		return x.StopProcessing
	}
	return false
}

//	{
//	     "conditions": [{"key": "description", "value": "API", "operator": "contain"}],
//	     "conditions_policy": "ALL",
//	     "actions": {"change_assignee": "user1@email.com",
//	     "change_urgency": "LOW",
//	     "change_project": "project-123456789012",
//	     "add_additional_info": {"type": "personal rule"},
//	     "no_notification": true},
//	     "options": {},
//	     "project_id": "project-123456789012",
//	     "domain_id": "domain-123456789012"
//	}
type CreateEventRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string                                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Conditions       []*EventRuleCondition                   `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty"`
	ConditionsPolicy CreateEventRuleRequest_ConditionsPolicy `protobuf:"varint,3,opt,name=conditions_policy,json=conditionsPolicy,proto3,enum=spaceone.api.monitoring.v1.CreateEventRuleRequest_ConditionsPolicy" json:"conditions_policy,omitempty"`
	Actions          *EventRuleActions                       `protobuf:"bytes,4,opt,name=actions,proto3" json:"actions,omitempty"`
	// +optional
	Options *EventRuleOptions `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
	// +optional
	ProjectId string `protobuf:"bytes,6,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// +optional
	Tags     *_struct.Struct `protobuf:"bytes,7,opt,name=tags,proto3" json:"tags,omitempty"`
	DomainId string          `protobuf:"bytes,11,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *CreateEventRuleRequest) Reset() {
	*x = CreateEventRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventRuleRequest) ProtoMessage() {}

func (x *CreateEventRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateEventRuleRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_monitoring_v1_event_rule_proto_rawDescGZIP(), []int{5}
}

func (x *CreateEventRuleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateEventRuleRequest) GetConditions() []*EventRuleCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *CreateEventRuleRequest) GetConditionsPolicy() CreateEventRuleRequest_ConditionsPolicy {
	if x != nil {
		return x.ConditionsPolicy
	}
	return CreateEventRuleRequest_NONE
}

func (x *CreateEventRuleRequest) GetActions() *EventRuleActions {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *CreateEventRuleRequest) GetOptions() *EventRuleOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CreateEventRuleRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateEventRuleRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateEventRuleRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

//	{
//	     "event_rule_id": "er-123456789012",
//	     "conditions": [{"key": "description", "value": "ELB", "operator": "contain"}],
//	     "conditions_policy": "ALL",
//	     "actions": {"change_assignee": "user2@email.com",
//	     "change_urgency": "HIGH",
//	     "change_project": "project-123456789012",
//	     "add_additional_info": {"type": "personal rule"},
//	     "no_notification": true},
//	     "options": {},
//	     "domain_id": "domain-123456789012"
//	}
type UpdateEventRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventRuleId string `protobuf:"bytes,1,opt,name=event_rule_id,json=eventRuleId,proto3" json:"event_rule_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	Conditions []*EventRuleCondition `protobuf:"bytes,3,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// +optional
	ConditionsPolicy UpdateEventRuleRequest_ConditionsPolicy `protobuf:"varint,4,opt,name=conditions_policy,json=conditionsPolicy,proto3,enum=spaceone.api.monitoring.v1.UpdateEventRuleRequest_ConditionsPolicy" json:"conditions_policy,omitempty"`
	// +optional
	Actions *EventRuleActions `protobuf:"bytes,5,opt,name=actions,proto3" json:"actions,omitempty"`
	// +optional
	Options *EventRuleOptions `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
	// +optional
	Tags     *_struct.Struct `protobuf:"bytes,7,opt,name=tags,proto3" json:"tags,omitempty"`
	DomainId string          `protobuf:"bytes,11,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *UpdateEventRuleRequest) Reset() {
	*x = UpdateEventRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEventRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventRuleRequest) ProtoMessage() {}

func (x *UpdateEventRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventRuleRequest.ProtoReflect.Descriptor instead.
func (*UpdateEventRuleRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_monitoring_v1_event_rule_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateEventRuleRequest) GetEventRuleId() string {
	if x != nil {
		return x.EventRuleId
	}
	return ""
}

func (x *UpdateEventRuleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateEventRuleRequest) GetConditions() []*EventRuleCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *UpdateEventRuleRequest) GetConditionsPolicy() UpdateEventRuleRequest_ConditionsPolicy {
	if x != nil {
		return x.ConditionsPolicy
	}
	return UpdateEventRuleRequest_NONE
}

func (x *UpdateEventRuleRequest) GetActions() *EventRuleActions {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *UpdateEventRuleRequest) GetOptions() *EventRuleOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *UpdateEventRuleRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateEventRuleRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

//	{
//	   "event_rule_id": "er-123456789012",
//	   "order": 2,
//	   "domain_id": "domain-123456789012"
//	}
type ChangeEventRuleOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventRuleId string `protobuf:"bytes,1,opt,name=event_rule_id,json=eventRuleId,proto3" json:"event_rule_id,omitempty"`
	Order       int32  `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
	DomainId    string `protobuf:"bytes,11,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *ChangeEventRuleOrderRequest) Reset() {
	*x = ChangeEventRuleOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeEventRuleOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeEventRuleOrderRequest) ProtoMessage() {}

func (x *ChangeEventRuleOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeEventRuleOrderRequest.ProtoReflect.Descriptor instead.
func (*ChangeEventRuleOrderRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_monitoring_v1_event_rule_proto_rawDescGZIP(), []int{7}
}

func (x *ChangeEventRuleOrderRequest) GetEventRuleId() string {
	if x != nil {
		return x.EventRuleId
	}
	return ""
}

func (x *ChangeEventRuleOrderRequest) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *ChangeEventRuleOrderRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

//	{
//	   "event_rule_id": "er-123456789012",
//	   "order": 2,
//	   "domain_id": "domain-123456789012"
//	}
type EventRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventRuleId string `protobuf:"bytes,1,opt,name=event_rule_id,json=eventRuleId,proto3" json:"event_rule_id,omitempty"`
	DomainId    string `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *EventRuleRequest) Reset() {
	*x = EventRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRuleRequest) ProtoMessage() {}

func (x *EventRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRuleRequest.ProtoReflect.Descriptor instead.
func (*EventRuleRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_monitoring_v1_event_rule_proto_rawDescGZIP(), []int{8}
}

func (x *EventRuleRequest) GetEventRuleId() string {
	if x != nil {
		return x.EventRuleId
	}
	return ""
}

func (x *EventRuleRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

//	{
//	   "event_rule_id": "er-123456789012",
//	   "domain_id": "domain-123456789012"
//	}
type GetEventRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventRuleId string `protobuf:"bytes,1,opt,name=event_rule_id,json=eventRuleId,proto3" json:"event_rule_id,omitempty"`
	DomainId    string `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	// +optional
	Only []string `protobuf:"bytes,3,rep,name=only,proto3" json:"only,omitempty"`
}

func (x *GetEventRuleRequest) Reset() {
	*x = GetEventRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventRuleRequest) ProtoMessage() {}

func (x *GetEventRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventRuleRequest.ProtoReflect.Descriptor instead.
func (*GetEventRuleRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_monitoring_v1_event_rule_proto_rawDescGZIP(), []int{9}
}

func (x *GetEventRuleRequest) GetEventRuleId() string {
	if x != nil {
		return x.EventRuleId
	}
	return ""
}

func (x *GetEventRuleRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *GetEventRuleRequest) GetOnly() []string {
	if x != nil {
		return x.Only
	}
	return nil
}

//	{
//	   "project_id": "project-123456789012",
//	   "domain_id": "domain-123456789012"
//	}
type EventRuleQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// +optional
	Query *v1.Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// +optional
	EventRuleId string `protobuf:"bytes,2,opt,name=event_rule_id,json=eventRuleId,proto3" json:"event_rule_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	Scope EventRuleQuery_EventRuleScope `protobuf:"varint,4,opt,name=scope,proto3,enum=spaceone.api.monitoring.v1.EventRuleQuery_EventRuleScope" json:"scope,omitempty"`
	// +optional
	ProjectId string `protobuf:"bytes,5,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DomainId  string `protobuf:"bytes,11,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *EventRuleQuery) Reset() {
	*x = EventRuleQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRuleQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRuleQuery) ProtoMessage() {}

func (x *EventRuleQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRuleQuery.ProtoReflect.Descriptor instead.
func (*EventRuleQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_monitoring_v1_event_rule_proto_rawDescGZIP(), []int{10}
}

func (x *EventRuleQuery) GetQuery() *v1.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *EventRuleQuery) GetEventRuleId() string {
	if x != nil {
		return x.EventRuleId
	}
	return ""
}

func (x *EventRuleQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventRuleQuery) GetScope() EventRuleQuery_EventRuleScope {
	if x != nil {
		return x.Scope
	}
	return EventRuleQuery_SCOPE_NONE
}

func (x *EventRuleQuery) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *EventRuleQuery) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

//	{
//	     "event_rule_id": "er-123456789012",
//	     "order": 1,
//	     "conditions": [
//	     {
//	     "key": "description",
//	     "value": "API",
//	     "operator": "contain"
//	     }
//	     ],
//	     "conditions_policy": "ALL",
//	     "actions": {
//	     "change_assignee": "user1@email.com",
//	     "change_urgency": "LOW",
//	     "change_project": "project-123456789012",
//	     "add_additional_info": {
//	     "type": "personal rule"
//	     },
//	     "no_notification": true
//	     },
//	     "options": {},
//	     "scope": "PROJECT",
//	     "project_id": "project-123456789012",
//	     "tags": {},
//	     "domain_id": "domain-123456789012",
//	     "created_at": "2022-01-02T06:02:31.517Z"
//	}
type EventRuleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventRuleId      string                         `protobuf:"bytes,1,opt,name=event_rule_id,json=eventRuleId,proto3" json:"event_rule_id,omitempty"`
	Name             string                         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Order            int32                          `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
	Conditions       []*EventRuleCondition          `protobuf:"bytes,4,rep,name=conditions,proto3" json:"conditions,omitempty"`
	ConditionsPolicy EventRuleInfo_ConditionsPolicy `protobuf:"varint,5,opt,name=conditions_policy,json=conditionsPolicy,proto3,enum=spaceone.api.monitoring.v1.EventRuleInfo_ConditionsPolicy" json:"conditions_policy,omitempty"`
	Actions          *EventRuleActions              `protobuf:"bytes,6,opt,name=actions,proto3" json:"actions,omitempty"`
	Options          *EventRuleOptions              `protobuf:"bytes,7,opt,name=options,proto3" json:"options,omitempty"`
	Scope            EventRuleInfo_EventRuleScope   `protobuf:"varint,8,opt,name=scope,proto3,enum=spaceone.api.monitoring.v1.EventRuleInfo_EventRuleScope" json:"scope,omitempty"`
	ProjectId        string                         `protobuf:"bytes,9,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Tags             *_struct.Struct                `protobuf:"bytes,10,opt,name=tags,proto3" json:"tags,omitempty"`
	DomainId         string                         `protobuf:"bytes,11,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	CreatedAt        string                         `protobuf:"bytes,21,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *EventRuleInfo) Reset() {
	*x = EventRuleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRuleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRuleInfo) ProtoMessage() {}

func (x *EventRuleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRuleInfo.ProtoReflect.Descriptor instead.
func (*EventRuleInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_monitoring_v1_event_rule_proto_rawDescGZIP(), []int{11}
}

func (x *EventRuleInfo) GetEventRuleId() string {
	if x != nil {
		return x.EventRuleId
	}
	return ""
}

func (x *EventRuleInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventRuleInfo) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *EventRuleInfo) GetConditions() []*EventRuleCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *EventRuleInfo) GetConditionsPolicy() EventRuleInfo_ConditionsPolicy {
	if x != nil {
		return x.ConditionsPolicy
	}
	return EventRuleInfo_NONE
}

func (x *EventRuleInfo) GetActions() *EventRuleActions {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *EventRuleInfo) GetOptions() *EventRuleOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *EventRuleInfo) GetScope() EventRuleInfo_EventRuleScope {
	if x != nil {
		return x.Scope
	}
	return EventRuleInfo_SCOPE_NONE
}

func (x *EventRuleInfo) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *EventRuleInfo) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *EventRuleInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *EventRuleInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

//	{
//	     "results": [
//	     {
//	     "event_rule_id": "er-123456789012",
//	     "order": 1,
//	     "conditions": [
//	     {
//	     "key": "title",
//	     "value": "AWS",
//	     "operator": "contain"
//	     }
//	     ],
//	     "conditions_policy": "ALL",
//	     "actions": {
//	     "change_assignee": "user2@email.com",
//	     "change_urgency": "HIGH",
//	     "add_additional_info": {},
//	     "no_notification": true
//	     },
//	     "options": {},
//	     "scope": "PROJECT",
//	     "project_id": "project-123456789012",
//	     "tags": {},
//	     "domain_id": "domain-123456789012",
//	     "created_at": "2022-01-01T06:33:58.388Z"
//	     },
//	     {
//	     "event_rule_id": "er-123456789012",
//	     "order": 2,
//	     "conditions": [
//	     {
//	     "key": "title",
//	     "value": "ELB",
//	     "operator": "contain"
//	     }
//	     ],
//	     "conditions_policy": "ALL",
//	     "actions": {
//	     "change_assignee": "user1@email.com",
//	     "change_urgency": "LOW",
//	     "change_project": "project-123456789012",
//	     "add_additional_info": {},
//	     "no_notification": true
//	     },
//	     "options": {},
//	     "scope": "PROJECT",
//	     "project_id": "project-123456789012",
//	     "tags": {},
//	     "domain_id": "domain-123456789012",
//	     "created_at": "2022-01-01T06:12:30.226Z"
//	     }
//	     ],
//	     "total_count": 2
//	}
type EventRulesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results    []*EventRuleInfo `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	TotalCount int32            `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *EventRulesInfo) Reset() {
	*x = EventRulesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRulesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRulesInfo) ProtoMessage() {}

func (x *EventRulesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRulesInfo.ProtoReflect.Descriptor instead.
func (*EventRulesInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_monitoring_v1_event_rule_proto_rawDescGZIP(), []int{12}
}

func (x *EventRulesInfo) GetResults() []*EventRuleInfo {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *EventRulesInfo) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type EventRuleStatQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query    *v1.StatisticsQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	DomainId string              `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *EventRuleStatQuery) Reset() {
	*x = EventRuleStatQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRuleStatQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRuleStatQuery) ProtoMessage() {}

func (x *EventRuleStatQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRuleStatQuery.ProtoReflect.Descriptor instead.
func (*EventRuleStatQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_monitoring_v1_event_rule_proto_rawDescGZIP(), []int{13}
}

func (x *EventRuleStatQuery) GetQuery() *v1.StatisticsQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *EventRuleStatQuery) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

var File_spaceone_api_monitoring_v1_event_rule_proto protoreflect.FileDescriptor

var file_spaceone_api_monitoring_v1_event_rule_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x60,
	0x0a, 0x18, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x22, 0x3b, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xe7, 0x03,
	0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x72, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x64, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x61, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x59, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x61, 0x64,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x15, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x13, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x5f, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x11, 0x61, 0x64, 0x64,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27,
	0x0a, 0x0f, 0x6e, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6e, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x22, 0xa3, 0x04, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f,
	0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x70, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x46, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x3a,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x10, 0x03, 0x22, 0xa8, 0x04, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x70, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x46, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x10, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4c, 0x57,
	0x41, 0x59, 0x53, 0x10, 0x03, 0x22, 0x74, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x10, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x22, 0x6a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x6e, 0x6c, 0x79, 0x22, 0xc3, 0x02, 0x0a,
	0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x31, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x43, 0x4f,
	0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4c, 0x4f,
	0x42, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x10, 0x02, 0x22, 0xf5, 0x05, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x67, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x46, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x39, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x02, 0x22, 0x3a,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x10, 0x03, 0x22, 0x76, 0x0a, 0x0e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x6e, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f,
	0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x32, 0xf4, 0x07, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x94, 0x01, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x75, 0x6c, 0x65,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x32, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0xa5,
	0x01, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x37, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26,
	0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x7b, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01,
	0x2a, 0x22, 0x20, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x12, 0x2f, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a,
	0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x67, 0x65,
	0x74, 0x12, 0x89, 0x01, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x2a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x7a, 0x0a,
	0x04, 0x73, 0x74, 0x61, 0x74, 0x12, 0x2e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d,
	0x72, 0x75, 0x6c, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x42, 0x41, 0x5a, 0x3f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x72,
	0x65, 0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x67,
	0x6f, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spaceone_api_monitoring_v1_event_rule_proto_rawDescOnce sync.Once
	file_spaceone_api_monitoring_v1_event_rule_proto_rawDescData = file_spaceone_api_monitoring_v1_event_rule_proto_rawDesc
)

func file_spaceone_api_monitoring_v1_event_rule_proto_rawDescGZIP() []byte {
	file_spaceone_api_monitoring_v1_event_rule_proto_rawDescOnce.Do(func() {
		file_spaceone_api_monitoring_v1_event_rule_proto_rawDescData = protoimpl.X.CompressGZIP(file_spaceone_api_monitoring_v1_event_rule_proto_rawDescData)
	})
	return file_spaceone_api_monitoring_v1_event_rule_proto_rawDescData
}

var file_spaceone_api_monitoring_v1_event_rule_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_spaceone_api_monitoring_v1_event_rule_proto_goTypes = []interface{}{
	(CreateEventRuleRequest_ConditionsPolicy)(0), // 0: spaceone.api.monitoring.v1.CreateEventRuleRequest.ConditionsPolicy
	(UpdateEventRuleRequest_ConditionsPolicy)(0), // 1: spaceone.api.monitoring.v1.UpdateEventRuleRequest.ConditionsPolicy
	(EventRuleQuery_EventRuleScope)(0),           // 2: spaceone.api.monitoring.v1.EventRuleQuery.EventRuleScope
	(EventRuleInfo_EventRuleScope)(0),            // 3: spaceone.api.monitoring.v1.EventRuleInfo.EventRuleScope
	(EventRuleInfo_ConditionsPolicy)(0),          // 4: spaceone.api.monitoring.v1.EventRuleInfo.ConditionsPolicy
	(*EventRuleCondition)(nil),                   // 5: spaceone.api.monitoring.v1.EventRuleCondition
	(*EventRuleActionResponder)(nil),             // 6: spaceone.api.monitoring.v1.EventRuleActionResponder
	(*MatchRule)(nil),                            // 7: spaceone.api.monitoring.v1.MatchRule
	(*EventRuleActions)(nil),                     // 8: spaceone.api.monitoring.v1.EventRuleActions
	(*EventRuleOptions)(nil),                     // 9: spaceone.api.monitoring.v1.EventRuleOptions
	(*CreateEventRuleRequest)(nil),               // 10: spaceone.api.monitoring.v1.CreateEventRuleRequest
	(*UpdateEventRuleRequest)(nil),               // 11: spaceone.api.monitoring.v1.UpdateEventRuleRequest
	(*ChangeEventRuleOrderRequest)(nil),          // 12: spaceone.api.monitoring.v1.ChangeEventRuleOrderRequest
	(*EventRuleRequest)(nil),                     // 13: spaceone.api.monitoring.v1.EventRuleRequest
	(*GetEventRuleRequest)(nil),                  // 14: spaceone.api.monitoring.v1.GetEventRuleRequest
	(*EventRuleQuery)(nil),                       // 15: spaceone.api.monitoring.v1.EventRuleQuery
	(*EventRuleInfo)(nil),                        // 16: spaceone.api.monitoring.v1.EventRuleInfo
	(*EventRulesInfo)(nil),                       // 17: spaceone.api.monitoring.v1.EventRulesInfo
	(*EventRuleStatQuery)(nil),                   // 18: spaceone.api.monitoring.v1.EventRuleStatQuery
	(*_struct.Struct)(nil),                       // 19: google.protobuf.Struct
	(*v1.Query)(nil),                             // 20: spaceone.api.core.v1.Query
	(*v1.StatisticsQuery)(nil),                   // 21: spaceone.api.core.v1.StatisticsQuery
	(*empty.Empty)(nil),                          // 22: google.protobuf.Empty
}
var file_spaceone_api_monitoring_v1_event_rule_proto_depIdxs = []int32{
	6,  // 0: spaceone.api.monitoring.v1.EventRuleActions.add_responder:type_name -> spaceone.api.monitoring.v1.EventRuleActionResponder
	7,  // 1: spaceone.api.monitoring.v1.EventRuleActions.match_service_account:type_name -> spaceone.api.monitoring.v1.MatchRule
	19, // 2: spaceone.api.monitoring.v1.EventRuleActions.add_additional_info:type_name -> google.protobuf.Struct
	5,  // 3: spaceone.api.monitoring.v1.CreateEventRuleRequest.conditions:type_name -> spaceone.api.monitoring.v1.EventRuleCondition
	0,  // 4: spaceone.api.monitoring.v1.CreateEventRuleRequest.conditions_policy:type_name -> spaceone.api.monitoring.v1.CreateEventRuleRequest.ConditionsPolicy
	8,  // 5: spaceone.api.monitoring.v1.CreateEventRuleRequest.actions:type_name -> spaceone.api.monitoring.v1.EventRuleActions
	9,  // 6: spaceone.api.monitoring.v1.CreateEventRuleRequest.options:type_name -> spaceone.api.monitoring.v1.EventRuleOptions
	19, // 7: spaceone.api.monitoring.v1.CreateEventRuleRequest.tags:type_name -> google.protobuf.Struct
	5,  // 8: spaceone.api.monitoring.v1.UpdateEventRuleRequest.conditions:type_name -> spaceone.api.monitoring.v1.EventRuleCondition
	1,  // 9: spaceone.api.monitoring.v1.UpdateEventRuleRequest.conditions_policy:type_name -> spaceone.api.monitoring.v1.UpdateEventRuleRequest.ConditionsPolicy
	8,  // 10: spaceone.api.monitoring.v1.UpdateEventRuleRequest.actions:type_name -> spaceone.api.monitoring.v1.EventRuleActions
	9,  // 11: spaceone.api.monitoring.v1.UpdateEventRuleRequest.options:type_name -> spaceone.api.monitoring.v1.EventRuleOptions
	19, // 12: spaceone.api.monitoring.v1.UpdateEventRuleRequest.tags:type_name -> google.protobuf.Struct
	20, // 13: spaceone.api.monitoring.v1.EventRuleQuery.query:type_name -> spaceone.api.core.v1.Query
	2,  // 14: spaceone.api.monitoring.v1.EventRuleQuery.scope:type_name -> spaceone.api.monitoring.v1.EventRuleQuery.EventRuleScope
	5,  // 15: spaceone.api.monitoring.v1.EventRuleInfo.conditions:type_name -> spaceone.api.monitoring.v1.EventRuleCondition
	4,  // 16: spaceone.api.monitoring.v1.EventRuleInfo.conditions_policy:type_name -> spaceone.api.monitoring.v1.EventRuleInfo.ConditionsPolicy
	8,  // 17: spaceone.api.monitoring.v1.EventRuleInfo.actions:type_name -> spaceone.api.monitoring.v1.EventRuleActions
	9,  // 18: spaceone.api.monitoring.v1.EventRuleInfo.options:type_name -> spaceone.api.monitoring.v1.EventRuleOptions
	3,  // 19: spaceone.api.monitoring.v1.EventRuleInfo.scope:type_name -> spaceone.api.monitoring.v1.EventRuleInfo.EventRuleScope
	19, // 20: spaceone.api.monitoring.v1.EventRuleInfo.tags:type_name -> google.protobuf.Struct
	16, // 21: spaceone.api.monitoring.v1.EventRulesInfo.results:type_name -> spaceone.api.monitoring.v1.EventRuleInfo
	21, // 22: spaceone.api.monitoring.v1.EventRuleStatQuery.query:type_name -> spaceone.api.core.v1.StatisticsQuery
	10, // 23: spaceone.api.monitoring.v1.EventRule.create:input_type -> spaceone.api.monitoring.v1.CreateEventRuleRequest
	11, // 24: spaceone.api.monitoring.v1.EventRule.update:input_type -> spaceone.api.monitoring.v1.UpdateEventRuleRequest
	12, // 25: spaceone.api.monitoring.v1.EventRule.change_order:input_type -> spaceone.api.monitoring.v1.ChangeEventRuleOrderRequest
	13, // 26: spaceone.api.monitoring.v1.EventRule.delete:input_type -> spaceone.api.monitoring.v1.EventRuleRequest
	14, // 27: spaceone.api.monitoring.v1.EventRule.get:input_type -> spaceone.api.monitoring.v1.GetEventRuleRequest
	15, // 28: spaceone.api.monitoring.v1.EventRule.list:input_type -> spaceone.api.monitoring.v1.EventRuleQuery
	18, // 29: spaceone.api.monitoring.v1.EventRule.stat:input_type -> spaceone.api.monitoring.v1.EventRuleStatQuery
	16, // 30: spaceone.api.monitoring.v1.EventRule.create:output_type -> spaceone.api.monitoring.v1.EventRuleInfo
	16, // 31: spaceone.api.monitoring.v1.EventRule.update:output_type -> spaceone.api.monitoring.v1.EventRuleInfo
	16, // 32: spaceone.api.monitoring.v1.EventRule.change_order:output_type -> spaceone.api.monitoring.v1.EventRuleInfo
	22, // 33: spaceone.api.monitoring.v1.EventRule.delete:output_type -> google.protobuf.Empty
	16, // 34: spaceone.api.monitoring.v1.EventRule.get:output_type -> spaceone.api.monitoring.v1.EventRuleInfo
	17, // 35: spaceone.api.monitoring.v1.EventRule.list:output_type -> spaceone.api.monitoring.v1.EventRulesInfo
	19, // 36: spaceone.api.monitoring.v1.EventRule.stat:output_type -> google.protobuf.Struct
	30, // [30:37] is the sub-list for method output_type
	23, // [23:30] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_spaceone_api_monitoring_v1_event_rule_proto_init() }
func file_spaceone_api_monitoring_v1_event_rule_proto_init() {
	if File_spaceone_api_monitoring_v1_event_rule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRuleCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRuleActionResponder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRuleActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRuleOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEventRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeEventRuleOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRuleQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRuleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRulesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRuleStatQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spaceone_api_monitoring_v1_event_rule_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spaceone_api_monitoring_v1_event_rule_proto_goTypes,
		DependencyIndexes: file_spaceone_api_monitoring_v1_event_rule_proto_depIdxs,
		EnumInfos:         file_spaceone_api_monitoring_v1_event_rule_proto_enumTypes,
		MessageInfos:      file_spaceone_api_monitoring_v1_event_rule_proto_msgTypes,
	}.Build()
	File_spaceone_api_monitoring_v1_event_rule_proto = out.File
	file_spaceone_api_monitoring_v1_event_rule_proto_rawDesc = nil
	file_spaceone_api_monitoring_v1_event_rule_proto_goTypes = nil
	file_spaceone_api_monitoring_v1_event_rule_proto_depIdxs = nil
}
