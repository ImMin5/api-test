// A MaintenanceWindow is a resource snoozing Alerts during maintenance time.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: spaceone/api/monitoring/v1/maintenance_window.proto

package v1

import (
	context "context"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MaintenanceWindow_Create_FullMethodName = "/spaceone.api.monitoring.v1.MaintenanceWindow/create"
	MaintenanceWindow_Update_FullMethodName = "/spaceone.api.monitoring.v1.MaintenanceWindow/update"
	MaintenanceWindow_Close_FullMethodName  = "/spaceone.api.monitoring.v1.MaintenanceWindow/close"
	MaintenanceWindow_Get_FullMethodName    = "/spaceone.api.monitoring.v1.MaintenanceWindow/get"
	MaintenanceWindow_List_FullMethodName   = "/spaceone.api.monitoring.v1.MaintenanceWindow/list"
	MaintenanceWindow_Stat_FullMethodName   = "/spaceone.api.monitoring.v1.MaintenanceWindow/stat"
)

// MaintenanceWindowClient is the client API for MaintenanceWindow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaintenanceWindowClient interface {
	// Creates a new MaintenanceWindow. When creating a MaintenanceWindow, you can set the title and maintenance schedule of the MaintenanceWindow. From the `start_time` to the `end_time` specified by the schedule set in this method, alerts in the Projects linked with the MaintenanceWindow are ceased.
	Create(ctx context.Context, in *CreateMaintenanceWindowRequest, opts ...grpc.CallOption) (*MaintenanceWindowInfo, error)
	// Updates a specific MaintenanceWindow. You can make changes in MaintenanceWindow settings including, the `title` and the schedule.
	Update(ctx context.Context, in *UpdateMaintenanceWindowRequest, opts ...grpc.CallOption) (*MaintenanceWindowInfo, error)
	// Closes a MaintenanceWindow by changing the state of the MaintenanceWindow to `CLOSED` when the maintenance is completed. As the MaintenanceWindow is not deleted but closed, the maintenance history remains undeleted.
	Close(ctx context.Context, in *MaintenanceWindowRequest, opts ...grpc.CallOption) (*MaintenanceWindowInfo, error)
	// Gets a specific MaintenanceWindow. Prints detailed information about the MaintenanceWindow, including the title and the schedule.
	Get(ctx context.Context, in *GetMaintenanceWindowRequest, opts ...grpc.CallOption) (*MaintenanceWindowInfo, error)
	// Gets a list of all MaintenanceWindows. You can use a query to get a filtered list of MaintenanceWindows.
	List(ctx context.Context, in *MaintenanceWindowQuery, opts ...grpc.CallOption) (*MaintenanceWindowsInfo, error)
	Stat(ctx context.Context, in *MaintenanceWindowStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type maintenanceWindowClient struct {
	cc grpc.ClientConnInterface
}

func NewMaintenanceWindowClient(cc grpc.ClientConnInterface) MaintenanceWindowClient {
	return &maintenanceWindowClient{cc}
}

func (c *maintenanceWindowClient) Create(ctx context.Context, in *CreateMaintenanceWindowRequest, opts ...grpc.CallOption) (*MaintenanceWindowInfo, error) {
	out := new(MaintenanceWindowInfo)
	err := c.cc.Invoke(ctx, MaintenanceWindow_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceWindowClient) Update(ctx context.Context, in *UpdateMaintenanceWindowRequest, opts ...grpc.CallOption) (*MaintenanceWindowInfo, error) {
	out := new(MaintenanceWindowInfo)
	err := c.cc.Invoke(ctx, MaintenanceWindow_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceWindowClient) Close(ctx context.Context, in *MaintenanceWindowRequest, opts ...grpc.CallOption) (*MaintenanceWindowInfo, error) {
	out := new(MaintenanceWindowInfo)
	err := c.cc.Invoke(ctx, MaintenanceWindow_Close_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceWindowClient) Get(ctx context.Context, in *GetMaintenanceWindowRequest, opts ...grpc.CallOption) (*MaintenanceWindowInfo, error) {
	out := new(MaintenanceWindowInfo)
	err := c.cc.Invoke(ctx, MaintenanceWindow_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceWindowClient) List(ctx context.Context, in *MaintenanceWindowQuery, opts ...grpc.CallOption) (*MaintenanceWindowsInfo, error) {
	out := new(MaintenanceWindowsInfo)
	err := c.cc.Invoke(ctx, MaintenanceWindow_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceWindowClient) Stat(ctx context.Context, in *MaintenanceWindowStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, MaintenanceWindow_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaintenanceWindowServer is the server API for MaintenanceWindow service.
// All implementations must embed UnimplementedMaintenanceWindowServer
// for forward compatibility
type MaintenanceWindowServer interface {
	// Creates a new MaintenanceWindow. When creating a MaintenanceWindow, you can set the title and maintenance schedule of the MaintenanceWindow. From the `start_time` to the `end_time` specified by the schedule set in this method, alerts in the Projects linked with the MaintenanceWindow are ceased.
	Create(context.Context, *CreateMaintenanceWindowRequest) (*MaintenanceWindowInfo, error)
	// Updates a specific MaintenanceWindow. You can make changes in MaintenanceWindow settings including, the `title` and the schedule.
	Update(context.Context, *UpdateMaintenanceWindowRequest) (*MaintenanceWindowInfo, error)
	// Closes a MaintenanceWindow by changing the state of the MaintenanceWindow to `CLOSED` when the maintenance is completed. As the MaintenanceWindow is not deleted but closed, the maintenance history remains undeleted.
	Close(context.Context, *MaintenanceWindowRequest) (*MaintenanceWindowInfo, error)
	// Gets a specific MaintenanceWindow. Prints detailed information about the MaintenanceWindow, including the title and the schedule.
	Get(context.Context, *GetMaintenanceWindowRequest) (*MaintenanceWindowInfo, error)
	// Gets a list of all MaintenanceWindows. You can use a query to get a filtered list of MaintenanceWindows.
	List(context.Context, *MaintenanceWindowQuery) (*MaintenanceWindowsInfo, error)
	Stat(context.Context, *MaintenanceWindowStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedMaintenanceWindowServer()
}

// UnimplementedMaintenanceWindowServer must be embedded to have forward compatible implementations.
type UnimplementedMaintenanceWindowServer struct {
}

func (UnimplementedMaintenanceWindowServer) Create(context.Context, *CreateMaintenanceWindowRequest) (*MaintenanceWindowInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMaintenanceWindowServer) Update(context.Context, *UpdateMaintenanceWindowRequest) (*MaintenanceWindowInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMaintenanceWindowServer) Close(context.Context, *MaintenanceWindowRequest) (*MaintenanceWindowInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedMaintenanceWindowServer) Get(context.Context, *GetMaintenanceWindowRequest) (*MaintenanceWindowInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMaintenanceWindowServer) List(context.Context, *MaintenanceWindowQuery) (*MaintenanceWindowsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMaintenanceWindowServer) Stat(context.Context, *MaintenanceWindowStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedMaintenanceWindowServer) mustEmbedUnimplementedMaintenanceWindowServer() {}

// UnsafeMaintenanceWindowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaintenanceWindowServer will
// result in compilation errors.
type UnsafeMaintenanceWindowServer interface {
	mustEmbedUnimplementedMaintenanceWindowServer()
}

func RegisterMaintenanceWindowServer(s grpc.ServiceRegistrar, srv MaintenanceWindowServer) {
	s.RegisterService(&MaintenanceWindow_ServiceDesc, srv)
}

func _MaintenanceWindow_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMaintenanceWindowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceWindowServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintenanceWindow_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceWindowServer).Create(ctx, req.(*CreateMaintenanceWindowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintenanceWindow_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMaintenanceWindowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceWindowServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintenanceWindow_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceWindowServer).Update(ctx, req.(*UpdateMaintenanceWindowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintenanceWindow_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaintenanceWindowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceWindowServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintenanceWindow_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceWindowServer).Close(ctx, req.(*MaintenanceWindowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintenanceWindow_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaintenanceWindowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceWindowServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintenanceWindow_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceWindowServer).Get(ctx, req.(*GetMaintenanceWindowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintenanceWindow_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaintenanceWindowQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceWindowServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintenanceWindow_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceWindowServer).List(ctx, req.(*MaintenanceWindowQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintenanceWindow_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaintenanceWindowStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceWindowServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintenanceWindow_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceWindowServer).Stat(ctx, req.(*MaintenanceWindowStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// MaintenanceWindow_ServiceDesc is the grpc.ServiceDesc for MaintenanceWindow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaintenanceWindow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.monitoring.v1.MaintenanceWindow",
	HandlerType: (*MaintenanceWindowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _MaintenanceWindow_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _MaintenanceWindow_Update_Handler,
		},
		{
			MethodName: "close",
			Handler:    _MaintenanceWindow_Close_Handler,
		},
		{
			MethodName: "get",
			Handler:    _MaintenanceWindow_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _MaintenanceWindow_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _MaintenanceWindow_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/monitoring/v1/maintenance_window.proto",
}
