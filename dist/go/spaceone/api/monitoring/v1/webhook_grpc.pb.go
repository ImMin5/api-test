// A Webhook is a plugin instance receiving data from external monitoring systems.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: spaceone/api/monitoring/v1/webhook.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Webhook_Create_FullMethodName       = "/spaceone.api.monitoring.v1.Webhook/create"
	Webhook_Update_FullMethodName       = "/spaceone.api.monitoring.v1.Webhook/update"
	Webhook_UpdatePlugin_FullMethodName = "/spaceone.api.monitoring.v1.Webhook/update_plugin"
	Webhook_VerifyPlugin_FullMethodName = "/spaceone.api.monitoring.v1.Webhook/verify_plugin"
	Webhook_Enable_FullMethodName       = "/spaceone.api.monitoring.v1.Webhook/enable"
	Webhook_Disable_FullMethodName      = "/spaceone.api.monitoring.v1.Webhook/disable"
	Webhook_Delete_FullMethodName       = "/spaceone.api.monitoring.v1.Webhook/delete"
	Webhook_Get_FullMethodName          = "/spaceone.api.monitoring.v1.Webhook/get"
	Webhook_List_FullMethodName         = "/spaceone.api.monitoring.v1.Webhook/list"
	Webhook_Stat_FullMethodName         = "/spaceone.api.monitoring.v1.Webhook/stat"
)

// WebhookClient is the client API for Webhook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebhookClient interface {
	// Creates a new Webhook. A Webhook collects data from an external monitoring system with a webhook URL generated by the resource.
	Create(ctx context.Context, in *CreateWebhookRequest, opts ...grpc.CallOption) (*WebhookInfo, error)
	// Updates a specific Webhook. You can make changes in Webhook settings, including the name and tags.
	Update(ctx context.Context, in *UpdateWebhookRequest, opts ...grpc.CallOption) (*WebhookInfo, error)
	// Updates the plugin of a specific DataSource. You can change the `version` of the plugin and select the `upgrade_mode` among `AUTO`, `MANUAL`, and `NONE`.
	UpdatePlugin(ctx context.Context, in *UpdateWebhookPluginRequest, opts ...grpc.CallOption) (*WebhookInfo, error)
	// Verifies a specific plugin for a Webhook.
	VerifyPlugin(ctx context.Context, in *WebhookRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Enables a specific Webhook. By enabling a Webhook, you can communicate with an external application.
	Enable(ctx context.Context, in *WebhookRequest, opts ...grpc.CallOption) (*WebhookInfo, error)
	// Disables a specific Webhook. By disabling a Webhook, you cannot communicate with an external application, as the webhook URL from the Webhook becomes invalid.
	Disable(ctx context.Context, in *WebhookRequest, opts ...grpc.CallOption) (*WebhookInfo, error)
	// Deletes a specific Webhook. By deleting a Webhook, you cannot collect data from an external monitoring system, as the `REST URL` is also deleted.
	Delete(ctx context.Context, in *WebhookRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Gets a specific Webhook. Prints detailed information about the Webhook, including the name, the version, and the created datetime.
	Get(ctx context.Context, in *GetWebhookRequest, opts ...grpc.CallOption) (*WebhookInfo, error)
	// Gets a list of all Webhooks. You can use a query to get a filtered list of Webhooks.
	List(ctx context.Context, in *WebhookQuery, opts ...grpc.CallOption) (*WebhooksInfo, error)
	Stat(ctx context.Context, in *WebhookStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type webhookClient struct {
	cc grpc.ClientConnInterface
}

func NewWebhookClient(cc grpc.ClientConnInterface) WebhookClient {
	return &webhookClient{cc}
}

func (c *webhookClient) Create(ctx context.Context, in *CreateWebhookRequest, opts ...grpc.CallOption) (*WebhookInfo, error) {
	out := new(WebhookInfo)
	err := c.cc.Invoke(ctx, Webhook_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookClient) Update(ctx context.Context, in *UpdateWebhookRequest, opts ...grpc.CallOption) (*WebhookInfo, error) {
	out := new(WebhookInfo)
	err := c.cc.Invoke(ctx, Webhook_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookClient) UpdatePlugin(ctx context.Context, in *UpdateWebhookPluginRequest, opts ...grpc.CallOption) (*WebhookInfo, error) {
	out := new(WebhookInfo)
	err := c.cc.Invoke(ctx, Webhook_UpdatePlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookClient) VerifyPlugin(ctx context.Context, in *WebhookRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Webhook_VerifyPlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookClient) Enable(ctx context.Context, in *WebhookRequest, opts ...grpc.CallOption) (*WebhookInfo, error) {
	out := new(WebhookInfo)
	err := c.cc.Invoke(ctx, Webhook_Enable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookClient) Disable(ctx context.Context, in *WebhookRequest, opts ...grpc.CallOption) (*WebhookInfo, error) {
	out := new(WebhookInfo)
	err := c.cc.Invoke(ctx, Webhook_Disable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookClient) Delete(ctx context.Context, in *WebhookRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Webhook_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookClient) Get(ctx context.Context, in *GetWebhookRequest, opts ...grpc.CallOption) (*WebhookInfo, error) {
	out := new(WebhookInfo)
	err := c.cc.Invoke(ctx, Webhook_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookClient) List(ctx context.Context, in *WebhookQuery, opts ...grpc.CallOption) (*WebhooksInfo, error) {
	out := new(WebhooksInfo)
	err := c.cc.Invoke(ctx, Webhook_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookClient) Stat(ctx context.Context, in *WebhookStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, Webhook_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebhookServer is the server API for Webhook service.
// All implementations must embed UnimplementedWebhookServer
// for forward compatibility
type WebhookServer interface {
	// Creates a new Webhook. A Webhook collects data from an external monitoring system with a webhook URL generated by the resource.
	Create(context.Context, *CreateWebhookRequest) (*WebhookInfo, error)
	// Updates a specific Webhook. You can make changes in Webhook settings, including the name and tags.
	Update(context.Context, *UpdateWebhookRequest) (*WebhookInfo, error)
	// Updates the plugin of a specific DataSource. You can change the `version` of the plugin and select the `upgrade_mode` among `AUTO`, `MANUAL`, and `NONE`.
	UpdatePlugin(context.Context, *UpdateWebhookPluginRequest) (*WebhookInfo, error)
	// Verifies a specific plugin for a Webhook.
	VerifyPlugin(context.Context, *WebhookRequest) (*empty.Empty, error)
	// Enables a specific Webhook. By enabling a Webhook, you can communicate with an external application.
	Enable(context.Context, *WebhookRequest) (*WebhookInfo, error)
	// Disables a specific Webhook. By disabling a Webhook, you cannot communicate with an external application, as the webhook URL from the Webhook becomes invalid.
	Disable(context.Context, *WebhookRequest) (*WebhookInfo, error)
	// Deletes a specific Webhook. By deleting a Webhook, you cannot collect data from an external monitoring system, as the `REST URL` is also deleted.
	Delete(context.Context, *WebhookRequest) (*empty.Empty, error)
	// Gets a specific Webhook. Prints detailed information about the Webhook, including the name, the version, and the created datetime.
	Get(context.Context, *GetWebhookRequest) (*WebhookInfo, error)
	// Gets a list of all Webhooks. You can use a query to get a filtered list of Webhooks.
	List(context.Context, *WebhookQuery) (*WebhooksInfo, error)
	Stat(context.Context, *WebhookStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedWebhookServer()
}

// UnimplementedWebhookServer must be embedded to have forward compatible implementations.
type UnimplementedWebhookServer struct {
}

func (UnimplementedWebhookServer) Create(context.Context, *CreateWebhookRequest) (*WebhookInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWebhookServer) Update(context.Context, *UpdateWebhookRequest) (*WebhookInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedWebhookServer) UpdatePlugin(context.Context, *UpdateWebhookPluginRequest) (*WebhookInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlugin not implemented")
}
func (UnimplementedWebhookServer) VerifyPlugin(context.Context, *WebhookRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPlugin not implemented")
}
func (UnimplementedWebhookServer) Enable(context.Context, *WebhookRequest) (*WebhookInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (UnimplementedWebhookServer) Disable(context.Context, *WebhookRequest) (*WebhookInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedWebhookServer) Delete(context.Context, *WebhookRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWebhookServer) Get(context.Context, *GetWebhookRequest) (*WebhookInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedWebhookServer) List(context.Context, *WebhookQuery) (*WebhooksInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWebhookServer) Stat(context.Context, *WebhookStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedWebhookServer) mustEmbedUnimplementedWebhookServer() {}

// UnsafeWebhookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebhookServer will
// result in compilation errors.
type UnsafeWebhookServer interface {
	mustEmbedUnimplementedWebhookServer()
}

func RegisterWebhookServer(s grpc.ServiceRegistrar, srv WebhookServer) {
	s.RegisterService(&Webhook_ServiceDesc, srv)
}

func _Webhook_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Webhook_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServer).Create(ctx, req.(*CreateWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webhook_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Webhook_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServer).Update(ctx, req.(*UpdateWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webhook_UpdatePlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebhookPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServer).UpdatePlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Webhook_UpdatePlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServer).UpdatePlugin(ctx, req.(*UpdateWebhookPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webhook_VerifyPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServer).VerifyPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Webhook_VerifyPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServer).VerifyPlugin(ctx, req.(*WebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webhook_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Webhook_Enable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServer).Enable(ctx, req.(*WebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webhook_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Webhook_Disable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServer).Disable(ctx, req.(*WebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webhook_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Webhook_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServer).Delete(ctx, req.(*WebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webhook_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Webhook_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServer).Get(ctx, req.(*GetWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webhook_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Webhook_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServer).List(ctx, req.(*WebhookQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webhook_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Webhook_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServer).Stat(ctx, req.(*WebhookStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Webhook_ServiceDesc is the grpc.ServiceDesc for Webhook service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Webhook_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.monitoring.v1.Webhook",
	HandlerType: (*WebhookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _Webhook_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _Webhook_Update_Handler,
		},
		{
			MethodName: "update_plugin",
			Handler:    _Webhook_UpdatePlugin_Handler,
		},
		{
			MethodName: "verify_plugin",
			Handler:    _Webhook_VerifyPlugin_Handler,
		},
		{
			MethodName: "enable",
			Handler:    _Webhook_Enable_Handler,
		},
		{
			MethodName: "disable",
			Handler:    _Webhook_Disable_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _Webhook_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Webhook_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _Webhook_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _Webhook_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/monitoring/v1/webhook.proto",
}
