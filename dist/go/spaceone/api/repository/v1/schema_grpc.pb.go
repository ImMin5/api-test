// A Schema is a data structure used in all domains. For example, data forms of Google OAuth2 credentials or AWS access keys can be a Schema resource.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: spaceone/api/repository/v1/schema.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Schema_Create_FullMethodName = "/spaceone.api.repository.v1.Schema/create"
	Schema_Update_FullMethodName = "/spaceone.api.repository.v1.Schema/update"
	Schema_Delete_FullMethodName = "/spaceone.api.repository.v1.Schema/delete"
	Schema_Get_FullMethodName    = "/spaceone.api.repository.v1.Schema/get"
	Schema_List_FullMethodName   = "/spaceone.api.repository.v1.Schema/list"
	Schema_Stat_FullMethodName   = "/spaceone.api.repository.v1.Schema/stat"
)

// SchemaClient is the client API for Schema service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchemaClient interface {
	// Creates a new Schema. You must specify the parameters: `service_type`, `name`, and `schema`(data structure). With the parameter `domain_id`, you can choose whether you will create a Schema in `Local` or externally. The Schema created includes `repository_info`, information about where the resource is managed.
	Create(ctx context.Context, in *CreateSchemaRequest, opts ...grpc.CallOption) (*SchemaInfo, error)
	// Updates a specific Schema. You can make changes in Schema settings, including `name`, `schema`, `labels`, and `tags`.
	Update(ctx context.Context, in *UpdateSchemaRequest, opts ...grpc.CallOption) (*SchemaInfo, error)
	// Deletes a specific Schema. You must specify the `name` of the Schema to delete, as the `name` is an identifier of Schema resources.
	Delete(ctx context.Context, in *SchemaRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Gets a specific Schema. You must specify the `name` of the Schema to get, as the `name` is an identifier of Schema resources. You can use the parameter `repository_id` to limit the scope of the method to a specific Repository.
	Get(ctx context.Context, in *GetRepositorySchemaRequest, opts ...grpc.CallOption) (*SchemaInfo, error)
	// Gets a list of all Schemas in a specific Repository. The parameter `repository_id` is used as an identifier of a Repository to get its list of Schemas. You can use a query to get a filtered list of Schemas.
	List(ctx context.Context, in *SchemaQuery, opts ...grpc.CallOption) (*SchemasInfo, error)
	Stat(ctx context.Context, in *SchemaStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type schemaClient struct {
	cc grpc.ClientConnInterface
}

func NewSchemaClient(cc grpc.ClientConnInterface) SchemaClient {
	return &schemaClient{cc}
}

func (c *schemaClient) Create(ctx context.Context, in *CreateSchemaRequest, opts ...grpc.CallOption) (*SchemaInfo, error) {
	out := new(SchemaInfo)
	err := c.cc.Invoke(ctx, Schema_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaClient) Update(ctx context.Context, in *UpdateSchemaRequest, opts ...grpc.CallOption) (*SchemaInfo, error) {
	out := new(SchemaInfo)
	err := c.cc.Invoke(ctx, Schema_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaClient) Delete(ctx context.Context, in *SchemaRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Schema_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaClient) Get(ctx context.Context, in *GetRepositorySchemaRequest, opts ...grpc.CallOption) (*SchemaInfo, error) {
	out := new(SchemaInfo)
	err := c.cc.Invoke(ctx, Schema_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaClient) List(ctx context.Context, in *SchemaQuery, opts ...grpc.CallOption) (*SchemasInfo, error) {
	out := new(SchemasInfo)
	err := c.cc.Invoke(ctx, Schema_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaClient) Stat(ctx context.Context, in *SchemaStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, Schema_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchemaServer is the server API for Schema service.
// All implementations must embed UnimplementedSchemaServer
// for forward compatibility
type SchemaServer interface {
	// Creates a new Schema. You must specify the parameters: `service_type`, `name`, and `schema`(data structure). With the parameter `domain_id`, you can choose whether you will create a Schema in `Local` or externally. The Schema created includes `repository_info`, information about where the resource is managed.
	Create(context.Context, *CreateSchemaRequest) (*SchemaInfo, error)
	// Updates a specific Schema. You can make changes in Schema settings, including `name`, `schema`, `labels`, and `tags`.
	Update(context.Context, *UpdateSchemaRequest) (*SchemaInfo, error)
	// Deletes a specific Schema. You must specify the `name` of the Schema to delete, as the `name` is an identifier of Schema resources.
	Delete(context.Context, *SchemaRequest) (*empty.Empty, error)
	// Gets a specific Schema. You must specify the `name` of the Schema to get, as the `name` is an identifier of Schema resources. You can use the parameter `repository_id` to limit the scope of the method to a specific Repository.
	Get(context.Context, *GetRepositorySchemaRequest) (*SchemaInfo, error)
	// Gets a list of all Schemas in a specific Repository. The parameter `repository_id` is used as an identifier of a Repository to get its list of Schemas. You can use a query to get a filtered list of Schemas.
	List(context.Context, *SchemaQuery) (*SchemasInfo, error)
	Stat(context.Context, *SchemaStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedSchemaServer()
}

// UnimplementedSchemaServer must be embedded to have forward compatible implementations.
type UnimplementedSchemaServer struct {
}

func (UnimplementedSchemaServer) Create(context.Context, *CreateSchemaRequest) (*SchemaInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSchemaServer) Update(context.Context, *UpdateSchemaRequest) (*SchemaInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSchemaServer) Delete(context.Context, *SchemaRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSchemaServer) Get(context.Context, *GetRepositorySchemaRequest) (*SchemaInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSchemaServer) List(context.Context, *SchemaQuery) (*SchemasInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSchemaServer) Stat(context.Context, *SchemaStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedSchemaServer) mustEmbedUnimplementedSchemaServer() {}

// UnsafeSchemaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchemaServer will
// result in compilation errors.
type UnsafeSchemaServer interface {
	mustEmbedUnimplementedSchemaServer()
}

func RegisterSchemaServer(s grpc.ServiceRegistrar, srv SchemaServer) {
	s.RegisterService(&Schema_ServiceDesc, srv)
}

func _Schema_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Schema_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaServer).Create(ctx, req.(*CreateSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schema_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Schema_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaServer).Update(ctx, req.(*UpdateSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schema_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Schema_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaServer).Delete(ctx, req.(*SchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schema_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepositorySchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Schema_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaServer).Get(ctx, req.(*GetRepositorySchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schema_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Schema_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaServer).List(ctx, req.(*SchemaQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schema_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Schema_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaServer).Stat(ctx, req.(*SchemaStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Schema_ServiceDesc is the grpc.ServiceDesc for Schema service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Schema_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.repository.v1.Schema",
	HandlerType: (*SchemaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _Schema_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _Schema_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _Schema_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Schema_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _Schema_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _Schema_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/repository/v1/schema.proto",
}
