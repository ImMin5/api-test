// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: spaceone/api/secret/v1/secret_group.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SecretGroup_Create_FullMethodName       = "/spaceone.api.secret.v1.SecretGroup/create"
	SecretGroup_Update_FullMethodName       = "/spaceone.api.secret.v1.SecretGroup/update"
	SecretGroup_AddSecret_FullMethodName    = "/spaceone.api.secret.v1.SecretGroup/add_secret"
	SecretGroup_RemoveSecret_FullMethodName = "/spaceone.api.secret.v1.SecretGroup/remove_secret"
	SecretGroup_Delete_FullMethodName       = "/spaceone.api.secret.v1.SecretGroup/delete"
	SecretGroup_Get_FullMethodName          = "/spaceone.api.secret.v1.SecretGroup/get"
	SecretGroup_List_FullMethodName         = "/spaceone.api.secret.v1.SecretGroup/list"
	SecretGroup_Stat_FullMethodName         = "/spaceone.api.secret.v1.SecretGroup/stat"
)

// SecretGroupClient is the client API for SecretGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecretGroupClient interface {
	Create(ctx context.Context, in *CreateSecretGroupRequest, opts ...grpc.CallOption) (*SecretGroupInfo, error)
	Update(ctx context.Context, in *UpdateSecretGroupRequest, opts ...grpc.CallOption) (*SecretGroupInfo, error)
	AddSecret(ctx context.Context, in *SecretGroupSecretRequest, opts ...grpc.CallOption) (*SecretGroupSecretInfo, error)
	RemoveSecret(ctx context.Context, in *SecretGroupSecretRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *SecretGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *GetSecretGroupRequest, opts ...grpc.CallOption) (*SecretGroupInfo, error)
	List(ctx context.Context, in *SecretGroupQuery, opts ...grpc.CallOption) (*SecretGroupsInfo, error)
	Stat(ctx context.Context, in *SecretGroupStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type secretGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretGroupClient(cc grpc.ClientConnInterface) SecretGroupClient {
	return &secretGroupClient{cc}
}

func (c *secretGroupClient) Create(ctx context.Context, in *CreateSecretGroupRequest, opts ...grpc.CallOption) (*SecretGroupInfo, error) {
	out := new(SecretGroupInfo)
	err := c.cc.Invoke(ctx, SecretGroup_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretGroupClient) Update(ctx context.Context, in *UpdateSecretGroupRequest, opts ...grpc.CallOption) (*SecretGroupInfo, error) {
	out := new(SecretGroupInfo)
	err := c.cc.Invoke(ctx, SecretGroup_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretGroupClient) AddSecret(ctx context.Context, in *SecretGroupSecretRequest, opts ...grpc.CallOption) (*SecretGroupSecretInfo, error) {
	out := new(SecretGroupSecretInfo)
	err := c.cc.Invoke(ctx, SecretGroup_AddSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretGroupClient) RemoveSecret(ctx context.Context, in *SecretGroupSecretRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, SecretGroup_RemoveSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretGroupClient) Delete(ctx context.Context, in *SecretGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, SecretGroup_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretGroupClient) Get(ctx context.Context, in *GetSecretGroupRequest, opts ...grpc.CallOption) (*SecretGroupInfo, error) {
	out := new(SecretGroupInfo)
	err := c.cc.Invoke(ctx, SecretGroup_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretGroupClient) List(ctx context.Context, in *SecretGroupQuery, opts ...grpc.CallOption) (*SecretGroupsInfo, error) {
	out := new(SecretGroupsInfo)
	err := c.cc.Invoke(ctx, SecretGroup_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretGroupClient) Stat(ctx context.Context, in *SecretGroupStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, SecretGroup_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretGroupServer is the server API for SecretGroup service.
// All implementations must embed UnimplementedSecretGroupServer
// for forward compatibility
type SecretGroupServer interface {
	Create(context.Context, *CreateSecretGroupRequest) (*SecretGroupInfo, error)
	Update(context.Context, *UpdateSecretGroupRequest) (*SecretGroupInfo, error)
	AddSecret(context.Context, *SecretGroupSecretRequest) (*SecretGroupSecretInfo, error)
	RemoveSecret(context.Context, *SecretGroupSecretRequest) (*empty.Empty, error)
	Delete(context.Context, *SecretGroupRequest) (*empty.Empty, error)
	Get(context.Context, *GetSecretGroupRequest) (*SecretGroupInfo, error)
	List(context.Context, *SecretGroupQuery) (*SecretGroupsInfo, error)
	Stat(context.Context, *SecretGroupStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedSecretGroupServer()
}

// UnimplementedSecretGroupServer must be embedded to have forward compatible implementations.
type UnimplementedSecretGroupServer struct {
}

func (UnimplementedSecretGroupServer) Create(context.Context, *CreateSecretGroupRequest) (*SecretGroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSecretGroupServer) Update(context.Context, *UpdateSecretGroupRequest) (*SecretGroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSecretGroupServer) AddSecret(context.Context, *SecretGroupSecretRequest) (*SecretGroupSecretInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSecret not implemented")
}
func (UnimplementedSecretGroupServer) RemoveSecret(context.Context, *SecretGroupSecretRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSecret not implemented")
}
func (UnimplementedSecretGroupServer) Delete(context.Context, *SecretGroupRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSecretGroupServer) Get(context.Context, *GetSecretGroupRequest) (*SecretGroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSecretGroupServer) List(context.Context, *SecretGroupQuery) (*SecretGroupsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSecretGroupServer) Stat(context.Context, *SecretGroupStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedSecretGroupServer) mustEmbedUnimplementedSecretGroupServer() {}

// UnsafeSecretGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretGroupServer will
// result in compilation errors.
type UnsafeSecretGroupServer interface {
	mustEmbedUnimplementedSecretGroupServer()
}

func RegisterSecretGroupServer(s grpc.ServiceRegistrar, srv SecretGroupServer) {
	s.RegisterService(&SecretGroup_ServiceDesc, srv)
}

func _SecretGroup_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecretGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretGroupServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretGroup_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretGroupServer).Create(ctx, req.(*CreateSecretGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretGroup_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecretGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretGroupServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretGroup_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretGroupServer).Update(ctx, req.(*UpdateSecretGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretGroup_AddSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretGroupSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretGroupServer).AddSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretGroup_AddSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretGroupServer).AddSecret(ctx, req.(*SecretGroupSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretGroup_RemoveSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretGroupSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretGroupServer).RemoveSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretGroup_RemoveSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretGroupServer).RemoveSecret(ctx, req.(*SecretGroupSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretGroup_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretGroupServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretGroup_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretGroupServer).Delete(ctx, req.(*SecretGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretGroup_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretGroupServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretGroup_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretGroupServer).Get(ctx, req.(*GetSecretGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretGroup_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretGroupQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretGroupServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretGroup_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretGroupServer).List(ctx, req.(*SecretGroupQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretGroup_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretGroupStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretGroupServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretGroup_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretGroupServer).Stat(ctx, req.(*SecretGroupStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretGroup_ServiceDesc is the grpc.ServiceDesc for SecretGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.secret.v1.SecretGroup",
	HandlerType: (*SecretGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _SecretGroup_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _SecretGroup_Update_Handler,
		},
		{
			MethodName: "add_secret",
			Handler:    _SecretGroup_AddSecret_Handler,
		},
		{
			MethodName: "remove_secret",
			Handler:    _SecretGroup_RemoveSecret_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _SecretGroup_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _SecretGroup_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _SecretGroup_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _SecretGroup_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/secret/v1/secret_group.proto",
}
