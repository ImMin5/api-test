// A Supervisor is a resource managing the lifecycle of the plugin instances to deploy. A Supervisor manages the deployment of plugin instances by deploying or deleting the `pod` of the plugin instances.
syntax = "proto3";

package spaceone.api.plugin.v1;

option go_package = "github.com/cloudforet-io/api/dist/go/spaceone/api/plugin/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v2/query.proto";


service Supervisor {
    // Creates a new Supervisor. Only Users with the `MANAGED` permission can set the Supervisor `public`. The Supervisor manages the lifecycle of plugin instances by the Supervisor's state. When a Supervisor is created, the state of the resource is `PENDING`. If the state remains the same for 5 minutes, the state is changed to `DISCONNECTED`.
    rpc publish (PublishSupervisorRequest) returns (SupervisorInfo) {}
    
    // Registers a specific Supervisor. You must specify the `supervisor_id` of the Supervisor to register. The `state` of the Supervisor changes from `PENDING` to `ENABLED`.
    rpc register (RegisterSupervisorRequest) returns (SupervisorInfo) {}
    
    // Updates a specific Supervisor. You can make changes in Supervisor settings, including `labels`, `tags`, and the `bool` type parameter `is_public`.
    rpc update (RegisterSupervisorRequest) returns (SupervisorInfo) {}
    
    // Deregisters and deletes a specific Supervisor. You must specify the `supervisor_id` of the Supervisor to deregister.
    rpc deregister (SupervisorRequest) returns (google.protobuf.Empty) {}
    
    // Enables a specific Supervisor. By changing the `state` parameter to `ENABLED`, the Supervisor can deploy or delete the `pod` of the plugin instance.
    rpc enable (SupervisorRequest) returns (SupervisorInfo) {}
    
    // Disables a specific Supervisor. By changing the `state` parameter to `DISABLED`, the Supervisor cannot deploy or delete the `pod` of the plugin instance.
    rpc disable (SupervisorRequest) returns (SupervisorInfo) {}
    
    // Recovers a specific plugin instance in a specific Supervisor. Changes the `state` of the Supervisor to `RE-PROVISIONING`.
    rpc recover_plugin (RecoverPluginRequest) returns (PluginInfo) {}
    
    rpc get (SupervisorRequest) returns (SupervisorInfo) {}
    
    // Gets a list of all Supervisors. You can use a query to get a filtered list of Supervisors.
    rpc list (SupervisorQuery) returns (SupervisorsInfo) {}
    
    rpc stat (SupervisorStatQuery) returns (google.protobuf.Struct) {}
    
    // Gets a list of all plugin instances regardless of Supervisors. Prints detailed information about the plugin instances, including `version`, `state`, and the relevant Supervisor.
    rpc list_plugins (PluginQuery) returns (PluginsInfo) {}
}

//{
//    "name": "test",
//    "hostname": "dev-test2",
//    "secret_key": "xxxxx",
//    "tags": {
//        "a": "b"
//    }
//}
message PublishSupervisorRequest {
    string name = 1;
    string hostname = 2;
    // +optional
    string secret_key = 3;
    // +optional
    repeated PluginInfo plugin_info = 4;
    // +optional
    bool is_public = 5;
    // +optional
    google.protobuf.ListValue labels = 6;
    // +optional
    google.protobuf.Struct tags = 7;
    string domain_id = 21;
}

//{
//    "supervisor_id": "supervisor-525982f2ae9a",
//    "is_public": true,
//    "priority": 10,
//    "labels": {
//        "a": "b"
//    },
//    "tags": {
//        "c": "d"
//    },
//    "domain_id": "domain-1c5a6b8181ad"
//}
message RegisterSupervisorRequest {
    string supervisor_id = 1;
    // +optional
    string name = 2;
    // +optional
    bool is_public = 3;
    // +optional
    int32 priority = 4;
    // +optional
    google.protobuf.Struct labels = 5;
    // +optional
    google.protobuf.Struct tags = 6;
    string domain_id = 21;
}

//{
//    "supervisor_id": "supervisor-d73011256d55"
//} 
message SupervisorRequest {
    string supervisor_id = 1;
    string domain_id = 21;
}

//{
//    "supervisor_id": "supervisor-a4c287cba676",
//    "plugin_id": "plugin-api-direct-mon-webhook",
//    "version": "1.1.0"
//}
message RecoverPluginRequest {
    string supervisor_id = 1;
    string version = 2;
    string domain_id = 21;
    string plugin_id = 22;
}

//{
//    "supervisor_id": "supervisor-525982f2ae9a",
//    "name": "test",
//    "hostname": "dev-test2",
//    "state": "ENABLED",
//    "domain_id": "domain-1c5a6b8181ad",
//    "tags": {
//        "a": "b"
//    },
//    "labels": {},
//    "created_at": "2022-01-15T05:42:02.999Z"
//}
message SupervisorInfo {
    enum State {
        NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
        PENDING = 3;
        DISCONNECTED = 4;
    }

    string supervisor_id = 1;
    string name = 2;
    string hostname = 3;
    State state = 4;
    bool is_public = 5;
    google.protobuf.Struct labels = 6;
    google.protobuf.Struct tags = 7;

    string domain_id = 21;

    string created_at = 31;
    string updated_at = 32;
}

//{
//    "query": {}
//}
message SupervisorQuery {
    // +optional
    spaceone.api.core.v2.Query query = 1;
    // +optional
    string supervisor_id = 2;
    // +optional
    string name = 3;
    // +optional
    bool is_public = 4;
    string domain_id = 21;
}

//{
//    "results": [
//        {
//            "supervisor_id": "supervisor-3a091f899539",
//            "name": "root",
//            "hostname": "dev-supervisor.svc.cluster.local",
//            "state": "ENABLED",
//            "is_public": true,
//            "domain_id": "domain-1c5a6b8181ad",
//            "labels": {},
//            "created_at": "2020-05-12T00:24:48.250Z"
//        },
//        {
//            "supervisor_id": "supervisor-a4c287cba676",
//            "name": "test",
//            "hostname": "dev-test",
//            "state": "ENABLED",
//            "domain_id": "domain-1c5a6b8181ad",
//            "tags": {
//                "a": "b"
//            },
//            "labels": {},
//            "created_at": "2022-06-15T05:39:15.886Z"
//        }
//    ],
//    "total_count": 2
//}
message SupervisorsInfo {
    repeated SupervisorInfo results = 1;
    int32 total_count = 2;
}

message SupervisorStatQuery {
    spaceone.api.core.v2.StatisticsQuery query = 1;
    string domain_id = 2;
}

//{
//  "query": {}
//}
message PluginQuery {
    enum State {
        NONE = 0;
        PROVISIONING = 1;
        ACTIVE = 2;
        RE_PROVISIONING = 3;
        ERROR = 4;
    }
    // +optional
    spaceone.api.core.v2.Query query = 1;
    // +optional
    string supervisor_id = 2;
    // +optional
    string hostname = 3;
    // +optional
    string plugin_id = 4;
    // +optional
    string version = 5;
    // +optional
    State state = 6;
    // +optional
    string endpoint = 7;
    string domain_id = 21;
}

message PluginInfo {
    enum State {
        NONE = 0;
        PROVISIONING = 1;
        ACTIVE = 2;
        RE_PROVISIONING = 3;
        ERROR = 4;
    }
    string plugin_id = 1;
    string version = 2;
    State state = 3;
    string endpoint = 4;
    bool managed = 7;
    repeated string endpoints = 8;

    string domain_id = 21;
    string supervisor_id = 22;
    string supervisor_name = 23;
}

//{
//    "results": [
//        {
//            "plugin_id": "plugin-openstack-inven-collector",
//            "version": "0.4.1.20220609.122832",
//            "state": "ACTIVE",
//            "endpoint": "grpc://plugin-openstack-inven-collector-vbnnsoszfjsneiqz.dev-supervisor.svc.cluster.local:50051",
//            "supervisor_id": "supervisor-3a091f899539",
//            "supervisor_name": "root",
//            "managed": true,
//            "endpoints": [
//                "grpc://172.16.16.234:50051"
//            ]
//        },
//        {
//            "plugin_id": "plugin-zabbix-mon-webhook",
//            "version": "1.0",
//            "state": "ACTIVE",
//            "endpoint": "grpc://plugin-zabbix-mon-webhook-dgqqfqsqidieeuk.dev-supervisor.svc.cluster.local:50051",
//            "supervisor_id": "supervisor-3a091f899539",
//            "supervisor_name": "root",
//            "managed": true,
//            "endpoints": [
//                "grpc://172.16.16.130:50051"
//            ]
//        }
//    ],
//    "total_count": 2
//}
message PluginsInfo {
    repeated PluginInfo results = 1;
    int32   total_count = 2;
}
