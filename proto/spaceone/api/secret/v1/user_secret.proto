// UserSecret is a service that stores and manages credentials.
// UserSecret is used to store credentials for a specific user.
syntax = "proto3";

package spaceone.api.user_secret.v1;

option go_package = "github.com/cloudforet-io/api/dist/go/spaceone/api/user_secret/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v2/query.proto";


service UserSecret {
    // Create a new user secret.
    // Created user secret is encrypted and stored securely.
    rpc create (CreateUserSecretRequest) returns (UserSecretInfo) {
        option (google.api.http) = {
            post: "/secret/v1/user-secret/create"
            body: "*"
        };
    }
    
    // Updates a specific user secret's information.
    // You can only change the 'name' and 'tags', and to change the data you must use the update_data API.
    rpc update (UpdateUserSecretRequest) returns (UserSecretInfo) {
        option (google.api.http) = {
            post: "/secret/v1/user-secret/update"
            body: "*"
        };
    }
    
    // Deletes a specific user secret.
    rpc delete (UserSecretRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/secret/v1/user-secret/delete"
            body: "*"
        };
    }
    
    // Updates a specific user secret's data.
    // Updated user_secret is encrypted and stored securely.
    rpc update_data (UpdateUserSecretDataRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/secret/v1/user-secret/update-data"
            body: "*"
        };
    }
    
    // Get a specific user secret's data.
    // This API is for internal system use only.
    rpc get_data (GetUserSecretDataRequest) returns (UserSecretDataInfo) {}
    
    // Get a specific user secret's information.
    rpc get (UserSecretRequest) returns (UserSecretInfo) {
        option (google.api.http) = {
            post: "/secret/v1/user-secret/get"
            body: "*"
        };
    }
    
    // Queries a list of user secrets.
    // You can use a query to get a filtered list of user secrets.
    rpc list (UserSecretQuery) returns (UserSecretsInfo) {
        option (google.api.http) = {
            post: "/secret/v1/user-secret/list"
            body: "*"
        };
    }
    
    rpc stat (UserSecretStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = {
            post: "/secret/v1/user-secret/stat"
            body: "*"
        };
    }
}

//{
//    "name": "Cloudforet AWS Dev",
//    "data": "********",
//    "schema_id": "aws_access_key",
//}
message CreateUserSecretRequest {
    string name = 1;
    google.protobuf.Struct data = 2;
    // +optional
    string schema_id = 3;
    // +optional
    google.protobuf.Struct tags = 4;
}

//{
//    "user_secret_id": "user-secret-123456789012",
//    "name": "aws-dev2",
//    "tags": { "a": "b"}
//}
message UpdateUserSecretRequest {
    string user_secret_id = 1;
    // +optional
    string name = 2;
    // +optional
    google.protobuf.Struct tags = 3;
}

//{
//    "user_secret_id": "user-secret-123456789012"
//}
message UserSecretRequest {
    string user_secret_id = 1;
}

//{
//    "user_secret_id": "user-secret-123456789012",
//    "domain_id": "domain-12345abcde"
//}
message GetUserSecretDataRequest {
    string user_secret_id = 1;
    string domain_id = 21;
}

//{
//    "user_secret_id": "user-secret-123456789012",
//     "data": "********"
//}
message UpdateUserSecretDataRequest {
    string user_secret_id = 1;
    string schema_id = 2;
    google.protobuf.Struct data = 3;
}

//{
//    "query": {}
//}
message UserSecretQuery {
    // +optional
    spaceone.api.core.v2.Query query = 1;
    // +optional
    string user_secret_id = 2;
    /// +optional
    string name = 3;
    // +optional
    string schema_id = 4;
    // +optional
    string provider = 5;
}

message UserSecretDataInfo {
    bool encrypted = 1;
    google.protobuf.Struct encrypt_options = 2;
    google.protobuf.Struct data = 3;
}

//{
//    "user_secret_id": "user_secret-123456789012",
//    "name": "aws-dev",
//    "tags": {},
//    "schema_id": "aws_access_key",
//    "provider": "aws",
//    "user_id": "whdalsrnt@gmail.com",
//    "domain_id": "domain-123456789012",
//    "created_at": "2022-01-01T06:10:14.851Z"
//}
message UserSecretInfo {

    enum ResourceGroup {
        RESOURCE_GROUP_NONE = 0;
        DOMAIN = 1;
        WORKSPACE = 2;
        PROJECT = 3;
    }

    string user_secret_id = 1;
    string name = 2;
    string schema_id = 3;
    string provider = 4;
    google.protobuf.Struct tags = 5;

    string domain_id = 21;
    string user_id = 22;

    string created_at = 31;
}

//{
//    "results": [
//        {
//           "user_secret_id": "user_secret-123456789012",
//           "name": "aws-dev",
//           "tags": {},
//           "schema": "aws_access_key",
//           "provider": "aws",
//           "user_id": "whdalsrnt@gmail",
//           "domain_id": "domain-123456789012",
//           "created_at": "2022-01-01T06:10:14.851Z"
//        },
//        {
//            "user_secret_id": "user_secret-987654321098",
//            "name": "plugin-credentials",
//            "tags": {},
//            "user_id": "whdalsrnt@gmail.com",
//            "domain_id": "domain-123456789012",
//            "created_at": "2022-01-01T02:31:01.709Z"
//        }
//    ],
//    "total_count": 2
//}
message UserSecretsInfo {
    repeated UserSecretInfo results = 1;
    int32 total_count = 2;
}

message UserSecretStatQuery {
    spaceone.api.core.v2.StatisticsQuery query = 1;
    string domain_id = 2;
}